url,title,content
https://www.postgresql.org/docs/15/geqo.html,Chapter 62. Genetic Query Optimizer,"Author Written by Martin Utesch ( < utesch@aut.tu-freiberg.de > ) for the Institute of Automatic Control at the University of Mining and Technology in Freiberg, Germany."
https://www.postgresql.org/docs/15/parallel-query.html,Chapter 15. Parallel Query,"PostgreSQL can devise query plans that can leverage multiple CPUs in order to answer queries faster. This feature is known as parallel query. Many queries cannot benefit from parallel query, either due to limitations of the current implementation or because there is no imaginable query plan that is any faster than the serial query plan. However, for queries that can benefit, the speedup from parallel query is often very significant. Many queries can run more than twice as fast when using parallel query, and some queries can run four times faster or even more. Queries that touch a large amount of data but return only a few rows to the user will typically benefit most. This chapter explains some details of how parallel query works and in which situations it can be used so that users who wish to make use of it can understand what to expect."
https://www.postgresql.org/docs/15/reference.html,No Title,"Part VI. Reference The entries in this Reference are meant to provide in reasonable length an authoritative, complete, and formal summary about their respective subjects. More information about the use of PostgreSQL , in narrative, tutorial, or example form, can be found in other parts of this book. See the cross-references listed on each reference page. The reference entries are also available as traditional “ man ” pages."
https://www.postgresql.org/docs/15/datetime-appendix.html,Appendix B. Date/Time Support,"PostgreSQL uses an internal heuristic parser for all date/time input support. Dates and times are input as strings, and are broken up into distinct fields with a preliminary determination of what kind of information can be in the field. Each field is interpreted and either assigned a numeric value, ignored, or rejected. The parser contains internal lookup tables for all textual fields, including months, days of the week, and time zones. This appendix includes information on the content of these lookup tables and describes the steps used by the parser to decode dates and times."
https://www.postgresql.org/docs/15/bgworker.html,Chapter 48. Background Worker Processes,"PostgreSQL can be extended to run user-supplied code in separate processes. Such processes are started, stopped and monitored by postgres , which permits them to have a lifetime closely linked to the server's status. These processes are attached to PostgreSQL 's shared memory area and have the option to connect to databases internally; they can also run multiple transactions serially, just like a regular client-connected server process. Also, by linking to libpq they can connect to the server and behave like a regular client application. Warning There are considerable robustness and security risks in using background worker processes because, being written in the C language, they have unrestricted access to data. Administrators wishing to enable modules that include background worker processes should exercise extreme caution. Only carefully audited modules should be permitted to run background worker processes. Background workers can be initialized at the time that PostgreSQL is started by including the module name in shared_preload_libraries . A module wishing to run a background worker can register it by calling RegisterBackgroundWorker( BackgroundWorker * worker ) from its _PG_init() function. Background workers can also be started after the system is up and running by calling RegisterDynamicBackgroundWorker( BackgroundWorker * worker , BackgroundWorkerHandle ** handle ) . Unlike RegisterBackgroundWorker , which can only be called from within the postmaster process, RegisterDynamicBackgroundWorker must be called from a regular backend or another background worker. The structure BackgroundWorker is defined thus: typedef void (*bgworker_main_type)(Datum main_arg); typedef struct BackgroundWorker { char bgw_name[BGW_MAXLEN]; char bgw_type[BGW_MAXLEN]; int bgw_flags; BgWorkerStartTime bgw_start_time; int bgw_restart_time; /* in seconds, or BGW_NEVER_RESTART */ char bgw_library_name[BGW_MAXLEN]; char bgw_function_name[BGW_MAXLEN]; Datum bgw_main_arg; char bgw_extra[BGW_EXTRALEN]; int bgw_notify_pid; } BackgroundWorker; bgw_name and bgw_type are strings to be used in log messages, process listings and similar contexts. bgw_type should be the same for all background workers of the same type, so that it is possible to group such workers in a process listing, for example. bgw_name on the other hand can contain additional information about the specific process. (Typically, the string for bgw_name will contain the type somehow, but that is not strictly required.) bgw_flags is a bitwise-or'd bit mask indicating the capabilities that the module wants. Possible values are: BGWORKER_SHMEM_ACCESS Requests shared memory access. This flag is required. BGWORKER_BACKEND_DATABASE_CONNECTION Requests the ability to establish a database connection through which it can later run transactions and queries. A background worker using BGWORKER_BACKEND_DATABASE_CONNECTION to connect to a database must also attach shared memory using BGWORKER_SHMEM_ACCESS , or worker start-up will fail. bgw_start_time is the server state during which postgres should start the process; it can be one of BgWorkerStart_PostmasterStart (start as soon as postgres itself has finished its own initialization; processes requesting this are not eligible for database connections), BgWorkerStart_ConsistentState (start as soon as a consistent state has been reached in a hot standby, allowing processes to connect to databases and run read-only queries), and BgWorkerStart_RecoveryFinished (start as soon as the system has entered normal read-write state). Note the last two values are equivalent in a server that's not a hot standby. Note that this setting only indicates when the processes are to be started; they do not stop when a different state is reached. bgw_restart_time is the interval, in seconds, that postgres should wait before restarting the process in the event that it crashes. It can be any positive value, or BGW_NEVER_RESTART , indicating not to restart the process in case of a crash. bgw_library_name is the name of a library in which the initial entry point for the background worker should be sought. The named library will be dynamically loaded by the worker process and bgw_function_name will be used to identify the function to be called. If loading a function from the core code, this must be set to ""postgres"". bgw_function_name is the name of a function in a dynamically loaded library which should be used as the initial entry point for a new background worker. bgw_main_arg is the Datum argument to the background worker main function. This main function should take a single argument of type Datum and return void . bgw_main_arg will be passed as the argument. In addition, the global variable MyBgworkerEntry points to a copy of the BackgroundWorker structure passed at registration time; the worker may find it helpful to examine this structure. On Windows (and anywhere else where EXEC_BACKEND is defined) or in dynamic background workers it is not safe to pass a Datum by reference, only by value. If an argument is required, it is safest to pass an int32 or other small value and use that as an index into an array allocated in shared memory. If a value like a cstring or text is passed then the pointer won't be valid from the new background worker process. bgw_extra can contain extra data to be passed to the background worker. Unlike bgw_main_arg , this data is not passed as an argument to the worker's main function, but it can be accessed via MyBgworkerEntry , as discussed above. bgw_notify_pid is the PID of a PostgreSQL backend process to which the postmaster should send SIGUSR1 when the process is started or exits. It should be 0 for workers registered at postmaster startup time, or when the backend registering the worker does not wish to wait for the worker to start up. Otherwise, it should be initialized to MyProcPid . Once running, the process can connect to a database by calling BackgroundWorkerInitializeConnection( char *dbname , char *username , uint32 flags ) or BackgroundWorkerInitializeConnectionByOid( Oid dboid , Oid useroid , uint32 flags ) . This allows the process to run transactions and queries using the SPI interface. If dbname is NULL or dboid is InvalidOid , the session is not connected to any particular database, but shared catalogs can be accessed. If username is NULL or useroid is InvalidOid , the process will run as the superuser created during initdb . If BGWORKER_BYPASS_ALLOWCONN is specified as flags it is possible to bypass the restriction to connect to databases not allowing user connections. A background worker can only call one of these two functions, and only once. It is not possible to switch databases. Signals are initially blocked when control reaches the background worker's main function, and must be unblocked by it; this is to allow the process to customize its signal handlers, if necessary. Signals can be unblocked in the new process by calling BackgroundWorkerUnblockSignals and blocked by calling BackgroundWorkerBlockSignals . If bgw_restart_time for a background worker is configured as BGW_NEVER_RESTART , or if it exits with an exit code of 0 or is terminated by TerminateBackgroundWorker , it will be automatically unregistered by the postmaster on exit. Otherwise, it will be restarted after the time period configured via bgw_restart_time , or immediately if the postmaster reinitializes the cluster due to a backend failure. Backends which need to suspend execution only temporarily should use an interruptible sleep rather than exiting; this can be achieved by calling WaitLatch() . Make sure the WL_POSTMASTER_DEATH flag is set when calling that function, and verify the return code for a prompt exit in the emergency case that postgres itself has terminated. When a background worker is registered using the RegisterDynamicBackgroundWorker function, it is possible for the backend performing the registration to obtain information regarding the status of the worker. Backends wishing to do this should pass the address of a BackgroundWorkerHandle * as the second argument to RegisterDynamicBackgroundWorker . If the worker is successfully registered, this pointer will be initialized with an opaque handle that can subsequently be passed to GetBackgroundWorkerPid( BackgroundWorkerHandle * , pid_t * ) or TerminateBackgroundWorker( BackgroundWorkerHandle * ) . GetBackgroundWorkerPid can be used to poll the status of the worker: a return value of BGWH_NOT_YET_STARTED indicates that the worker has not yet been started by the postmaster; BGWH_STOPPED indicates that it has been started but is no longer running; and BGWH_STARTED indicates that it is currently running. In this last case, the PID will also be returned via the second argument. TerminateBackgroundWorker causes the postmaster to send SIGTERM to the worker if it is running, and to unregister it as soon as it is not. In some cases, a process which registers a background worker may wish to wait for the worker to start up. This can be accomplished by initializing bgw_notify_pid to MyProcPid and then passing the BackgroundWorkerHandle * obtained at registration time to WaitForBackgroundWorkerStartup( BackgroundWorkerHandle *handle , pid_t * ) function. This function will block until the postmaster has attempted to start the background worker, or until the postmaster dies. If the background worker is running, the return value will be BGWH_STARTED , and the PID will be written to the provided address. Otherwise, the return value will be BGWH_STOPPED or BGWH_POSTMASTER_DIED . A process can also wait for a background worker to shut down, by using the WaitForBackgroundWorkerShutdown( BackgroundWorkerHandle *handle ) function and passing the BackgroundWorkerHandle * obtained at registration. This function will block until the background worker exits, or postmaster dies. When the background worker exits, the return value is BGWH_STOPPED , if postmaster dies it will return BGWH_POSTMASTER_DIED . Background workers can send asynchronous notification messages, either by using the NOTIFY command via SPI , or directly via Async_Notify() . Such notifications will be sent at transaction commit. Background workers should not register to receive asynchronous notifications with the LISTEN command, as there is no infrastructure for a worker to consume such notifications. The src/test/modules/worker_spi module contains a working example, which demonstrates some useful techniques. The maximum number of registered background workers is limited by max_worker_processes ."
https://www.postgresql.org/docs/15/custom-scan.html,Chapter 61. Writing a Custom Scan Provider,"PostgreSQL supports a set of experimental facilities which are intended to allow extension modules to add new scan types to the system. Unlike a foreign data wrapper , which is only responsible for knowing how to scan its own foreign tables, a custom scan provider can provide an alternative method of scanning any relation in the system. Typically, the motivation for writing a custom scan provider will be to allow the use of some optimization not supported by the core system, such as caching or some form of hardware acceleration. This chapter outlines how to write a new custom scan provider. Implementing a new type of custom scan is a three-step process. First, during planning, it is necessary to generate access paths representing a scan using the proposed strategy. Second, if one of those access paths is selected by the planner as the optimal strategy for scanning a particular relation, the access path must be converted to a plan. Finally, it must be possible to execute the plan and generate the same results that would have been generated for any other access path targeting the same relation."
https://www.postgresql.org/docs/15/contrib-prog.html,Appendix G. Additional Supplied Programs,"This appendix and the previous one contain information regarding the modules that can be found in the contrib directory of the PostgreSQL distribution. See Appendix F for more information about the contrib section in general and server extensions and plug-ins found in contrib specifically. This appendix covers utility programs found in contrib . Once installed, either from source or a packaging system, they are found in the bin directory of the PostgreSQL installation and can be used like any other program."
https://www.postgresql.org/docs/15/release.html,Appendix E. Release Notes,"The release notes contain the significant changes in each PostgreSQL release, with major features and migration issues listed at the top. The release notes do not contain changes that affect only a few users or changes that are internal and therefore not user-visible. For example, the optimizer is improved in almost every release, but the improvements are usually observed by users as simply faster queries. A complete list of changes for each release can be obtained by viewing the Git logs for each release. The pgsql-committers email list records all source code changes as well. There is also a web interface that shows changes to specific files. The name appearing next to each item represents the major developer for that item. Of course all changes involve community discussion and patch review, so each item is truly a community effort. Section markers (§) in the release notes link to gitweb pages which show the primary git commit messages and source tree changes responsible for the release note item. There might be additional git commits which are not shown."
https://www.postgresql.org/docs/15/logical-replication.html,Chapter 31. Logical Replication,"Logical replication is a method of replicating data objects and their changes, based upon their replication identity (usually a primary key). We use the term logical in contrast to physical replication, which uses exact block addresses and byte-by-byte replication. PostgreSQL supports both mechanisms concurrently, see Chapter 27 . Logical replication allows fine-grained control over both data replication and security. Logical replication uses a publish and subscribe model with one or more subscribers subscribing to one or more publications on a publisher node. Subscribers pull data from the publications they subscribe to and may subsequently re-publish data to allow cascading replication or more complex configurations. Logical replication of a table typically starts with taking a snapshot of the data on the publisher database and copying that to the subscriber. Once that is done, the changes on the publisher are sent to the subscriber as they occur in real-time. The subscriber applies the data in the same order as the publisher so that transactional consistency is guaranteed for publications within a single subscription. This method of data replication is sometimes referred to as transactional replication. The typical use-cases for logical replication are: Sending incremental changes in a single database or a subset of a database to subscribers as they occur. Firing triggers for individual changes as they arrive on the subscriber. Consolidating multiple databases into a single one (for example for analytical purposes). Replicating between different major versions of PostgreSQL. Replicating between PostgreSQL instances on different platforms (for example Linux to Windows) Giving access to replicated data to different groups of users. Sharing a subset of the database between multiple databases. The subscriber database behaves in the same way as any other PostgreSQL instance and can be used as a publisher for other databases by defining its own publications. When the subscriber is treated as read-only by application, there will be no conflicts from a single subscription. On the other hand, if there are other writes done either by an application or by other subscribers to the same set of tables, conflicts can arise."
https://www.postgresql.org/docs/15/plpython.html,Chapter 46. PL/Python — Python Procedural Language,"The PL/Python procedural language allows PostgreSQL functions and procedures to be written in the Python language . To install PL/Python in a particular database, use CREATE EXTENSION plpython3u . Tip If a language is installed into template1 , all subsequently created databases will have the language installed automatically. PL/Python is only available as an “ untrusted ” language, meaning it does not offer any way of restricting what users can do in it and is therefore named plpython3u . A trusted variant plpython might become available in the future if a secure execution mechanism is developed in Python. The writer of a function in untrusted PL/Python must take care that the function cannot be used to do anything unwanted, since it will be able to do anything that could be done by a user logged in as the database administrator. Only superusers can create functions in untrusted languages such as plpython3u . Note Users of source packages must specially enable the build of PL/Python during the installation process. (Refer to the installation instructions for more information.) Users of binary packages might find PL/Python in a separate subpackage."
https://www.postgresql.org/docs/15/charset.html,Chapter 24. Localization,"This chapter describes the available localization features from the point of view of the administrator. PostgreSQL supports two localization facilities: Using the locale features of the operating system to provide locale-specific collation order, number formatting, translated messages, and other aspects. This is covered in Section 24.1 and Section 24.2 . Providing a number of different character sets to support storing text in all kinds of languages, and providing character set translation between client and server. This is covered in Section 24.3 ."
https://www.postgresql.org/docs/15/plperl.html,Chapter 45. PL/Perl — Perl Procedural Language,"PL/Perl is a loadable procedural language that enables you to write PostgreSQL functions and procedures in the Perl programming language . The main advantage to using PL/Perl is that this allows use, within stored functions and procedures, of the manyfold “ string munging ” operators and functions available for Perl. Parsing complex strings might be easier using Perl than it is with the string functions and control structures provided in PL/pgSQL. To install PL/Perl in a particular database, use CREATE EXTENSION plperl . Tip If a language is installed into template1 , all subsequently created databases will have the language installed automatically. Note Users of source packages must specially enable the build of PL/Perl during the installation process. (Refer to Chapter 17 for more information.) Users of binary packages might find PL/Perl in a separate subpackage."
https://www.postgresql.org/docs/15/docguide.html,Appendix J. Documentation,"PostgreSQL has four primary documentation formats: Plain text, for pre-installation information HTML , for on-line browsing and reference PDF, for printing man pages, for quick reference. Additionally, a number of plain-text README files can be found throughout the PostgreSQL source tree, documenting various implementation issues. HTML documentation and man pages are part of a standard distribution and are installed by default. PDF format documentation is available separately for download."
https://www.postgresql.org/docs/15/sql-keywords-appendix.html,Appendix C.SQLKey Words,"Table C.1 lists all tokens that are key words in the SQL standard and in PostgreSQL 15.14. Background information can be found in Section 4.1.1 . (For space reasons, only the latest two versions of the SQL standard, and SQL-92 for historical comparison, are included. The differences between those and the other intermediate standard versions are small.) SQL distinguishes between reserved and non-reserved key words. According to the standard, reserved key words are the only real key words; they are never allowed as identifiers. Non-reserved key words only have a special meaning in particular contexts and can be used as identifiers in other contexts. Most non-reserved key words are actually the names of built-in tables and functions specified by SQL. The concept of non-reserved key words essentially only exists to declare that some predefined meaning is attached to a word in some contexts. In the PostgreSQL parser, life is a bit more complicated. There are several different classes of tokens ranging from those that can never be used as an identifier to those that have absolutely no special status in the parser, but are considered ordinary identifiers. (The latter is usually the case for functions specified by SQL.) Even reserved key words are not completely reserved in PostgreSQL , but can be used as column labels (for example, SELECT 55 AS CHECK , even though CHECK is a reserved key word). In Table C.1 in the column for PostgreSQL we classify as “ non-reserved ” those key words that are explicitly known to the parser but are allowed as column or table names. Some key words that are otherwise non-reserved cannot be used as function or data type names and are marked accordingly. (Most of these words represent built-in functions or data types with special syntax. The function or type is still available but it cannot be redefined by the user.) Labeled “ reserved ” are those tokens that are not allowed as column or table names. Some reserved key words are allowable as names for functions or data types; this is also shown in the table. If not so marked, a reserved key word is only allowed as a column label. A blank entry in this column means that the word is treated as an ordinary identifier by PostgreSQL . Furthermore, while most key words can be used as “ bare ” column labels without writing AS before them (as described in Section 7.3.2 ), there are a few that require a leading AS to avoid ambiguity. These are marked in the table as “ requires AS ” . As a general rule, if you get spurious parser errors for commands that use any of the listed key words as an identifier, you should try quoting the identifier to see if the problem goes away. It is important to understand before studying Table C.1 that the fact that a key word is not reserved in PostgreSQL does not mean that the feature related to the word is not implemented. Conversely, the presence of a key word does not indicate the existence of a feature. Table C.1. SQL Key Words Key Word PostgreSQL SQL:2016 SQL:2011 SQL-92 A non-reserved non-reserved ABORT non-reserved ABS reserved reserved ABSENT reserved non-reserved ABSOLUTE non-reserved non-reserved non-reserved reserved ACCESS non-reserved ACCORDING non-reserved non-reserved ACOS reserved ACTION non-reserved non-reserved non-reserved reserved ADA non-reserved non-reserved non-reserved ADD non-reserved non-reserved non-reserved reserved ADMIN non-reserved non-reserved non-reserved AFTER non-reserved non-reserved non-reserved AGGREGATE non-reserved ALL reserved reserved reserved reserved ALLOCATE reserved reserved reserved ALSO non-reserved ALTER non-reserved reserved reserved reserved ALWAYS non-reserved non-reserved non-reserved ANALYSE reserved ANALYZE reserved AND reserved reserved reserved reserved ANY reserved reserved reserved reserved ARE reserved reserved reserved ARRAY reserved, requires AS reserved reserved ARRAY_AGG reserved reserved ARRAY_​MAX_​CARDINALITY reserved reserved AS reserved, requires AS reserved reserved reserved ASC reserved non-reserved non-reserved reserved ASENSITIVE non-reserved reserved reserved ASIN reserved ASSERTION non-reserved non-reserved non-reserved reserved ASSIGNMENT non-reserved non-reserved non-reserved ASYMMETRIC reserved reserved reserved AT non-reserved reserved reserved reserved ATAN reserved ATOMIC non-reserved reserved reserved ATTACH non-reserved ATTRIBUTE non-reserved non-reserved non-reserved ATTRIBUTES non-reserved non-reserved AUTHORIZATION reserved (can be function or type) reserved reserved reserved AVG reserved reserved reserved BACKWARD non-reserved BASE64 non-reserved non-reserved BEFORE non-reserved non-reserved non-reserved BEGIN non-reserved reserved reserved reserved BEGIN_FRAME reserved reserved BEGIN_PARTITION reserved reserved BERNOULLI non-reserved non-reserved BETWEEN non-reserved (cannot be function or type) reserved reserved reserved BIGINT non-reserved (cannot be function or type) reserved reserved BINARY reserved (can be function or type) reserved reserved BIT non-reserved (cannot be function or type) reserved BIT_LENGTH reserved BLOB reserved reserved BLOCKED non-reserved non-reserved BOM non-reserved non-reserved BOOLEAN non-reserved (cannot be function or type) reserved reserved BOTH reserved reserved reserved reserved BREADTH non-reserved non-reserved non-reserved BY non-reserved reserved reserved reserved C non-reserved non-reserved non-reserved CACHE non-reserved CALL non-reserved reserved reserved CALLED non-reserved reserved reserved CARDINALITY reserved reserved CASCADE non-reserved non-reserved non-reserved reserved CASCADED non-reserved reserved reserved reserved CASE reserved reserved reserved reserved CAST reserved reserved reserved reserved CATALOG non-reserved non-reserved non-reserved reserved CATALOG_NAME non-reserved non-reserved non-reserved CEIL reserved reserved CEILING reserved reserved CHAIN non-reserved non-reserved non-reserved CHAINING non-reserved CHAR non-reserved (cannot be function or type), requires AS reserved reserved reserved CHARACTER non-reserved (cannot be function or type), requires AS reserved reserved reserved CHARACTERISTICS non-reserved non-reserved non-reserved CHARACTERS non-reserved non-reserved CHARACTER_LENGTH reserved reserved reserved CHARACTER_​SET_​CATALOG non-reserved non-reserved non-reserved CHARACTER_SET_NAME non-reserved non-reserved non-reserved CHARACTER_SET_SCHEMA non-reserved non-reserved non-reserved CHAR_LENGTH reserved reserved reserved CHECK reserved reserved reserved reserved CHECKPOINT non-reserved CLASS non-reserved CLASSIFIER reserved CLASS_ORIGIN non-reserved non-reserved non-reserved CLOB reserved reserved CLOSE non-reserved reserved reserved reserved CLUSTER non-reserved COALESCE non-reserved (cannot be function or type) reserved reserved reserved COBOL non-reserved non-reserved non-reserved COLLATE reserved reserved reserved reserved COLLATION reserved (can be function or type) non-reserved non-reserved reserved COLLATION_CATALOG non-reserved non-reserved non-reserved COLLATION_NAME non-reserved non-reserved non-reserved COLLATION_SCHEMA non-reserved non-reserved non-reserved COLLECT reserved reserved COLUMN reserved reserved reserved reserved COLUMNS non-reserved non-reserved non-reserved COLUMN_NAME non-reserved non-reserved non-reserved COMMAND_FUNCTION non-reserved non-reserved non-reserved COMMAND_​FUNCTION_​CODE non-reserved non-reserved COMMENT non-reserved COMMENTS non-reserved COMMIT non-reserved reserved reserved reserved COMMITTED non-reserved non-reserved non-reserved non-reserved COMPRESSION non-reserved CONCURRENTLY reserved (can be function or type) CONDITION reserved reserved CONDITIONAL non-reserved CONDITION_NUMBER non-reserved non-reserved non-reserved CONFIGURATION non-reserved CONFLICT non-reserved CONNECT reserved reserved reserved CONNECTION non-reserved non-reserved non-reserved reserved CONNECTION_NAME non-reserved non-reserved non-reserved CONSTRAINT reserved reserved reserved reserved CONSTRAINTS non-reserved non-reserved non-reserved reserved CONSTRAINT_CATALOG non-reserved non-reserved non-reserved CONSTRAINT_NAME non-reserved non-reserved non-reserved CONSTRAINT_SCHEMA non-reserved non-reserved non-reserved CONSTRUCTOR non-reserved non-reserved CONTAINS reserved reserved CONTENT non-reserved non-reserved non-reserved CONTINUE non-reserved non-reserved non-reserved reserved CONTROL non-reserved non-reserved CONVERSION non-reserved CONVERT reserved reserved reserved COPY non-reserved reserved CORR reserved reserved CORRESPONDING reserved reserved reserved COS reserved COSH reserved COST non-reserved COUNT reserved reserved reserved COVAR_POP reserved reserved COVAR_SAMP reserved reserved CREATE reserved, requires AS reserved reserved reserved CROSS reserved (can be function or type) reserved reserved reserved CSV non-reserved CUBE non-reserved reserved reserved CUME_DIST reserved reserved CURRENT non-reserved reserved reserved reserved CURRENT_CATALOG reserved reserved reserved CURRENT_DATE reserved reserved reserved reserved CURRENT_​DEFAULT_​TRANSFORM_​GROUP reserved reserved CURRENT_PATH reserved reserved CURRENT_ROLE reserved reserved reserved CURRENT_ROW reserved reserved CURRENT_SCHEMA reserved (can be function or type) reserved reserved CURRENT_TIME reserved reserved reserved reserved CURRENT_TIMESTAMP reserved reserved reserved reserved CURRENT_​TRANSFORM_​GROUP_​FOR_​TYPE reserved reserved CURRENT_USER reserved reserved reserved reserved CURSOR non-reserved reserved reserved reserved CURSOR_NAME non-reserved non-reserved non-reserved CYCLE non-reserved reserved reserved DATA non-reserved non-reserved non-reserved non-reserved DATABASE non-reserved DATALINK reserved reserved DATE reserved reserved reserved DATETIME_​INTERVAL_​CODE non-reserved non-reserved non-reserved DATETIME_​INTERVAL_​PRECISION non-reserved non-reserved non-reserved DAY non-reserved, requires AS reserved reserved reserved DB non-reserved non-reserved DEALLOCATE non-reserved reserved reserved reserved DEC non-reserved (cannot be function or type) reserved reserved reserved DECFLOAT reserved DECIMAL non-reserved (cannot be function or type) reserved reserved reserved DECLARE non-reserved reserved reserved reserved DEFAULT reserved reserved reserved reserved DEFAULTS non-reserved non-reserved non-reserved DEFERRABLE reserved non-reserved non-reserved reserved DEFERRED non-reserved non-reserved non-reserved reserved DEFINE reserved DEFINED non-reserved non-reserved DEFINER non-reserved non-reserved non-reserved DEGREE non-reserved non-reserved DELETE non-reserved reserved reserved reserved DELIMITER non-reserved DELIMITERS non-reserved DENSE_RANK reserved reserved DEPENDS non-reserved DEPTH non-reserved non-reserved non-reserved DEREF reserved reserved DERIVED non-reserved non-reserved DESC reserved non-reserved non-reserved reserved DESCRIBE reserved reserved reserved DESCRIPTOR non-reserved non-reserved reserved DETACH non-reserved DETERMINISTIC reserved reserved DIAGNOSTICS non-reserved non-reserved reserved DICTIONARY non-reserved DISABLE non-reserved DISCARD non-reserved DISCONNECT reserved reserved reserved DISPATCH non-reserved non-reserved DISTINCT reserved reserved reserved reserved DLNEWCOPY reserved reserved DLPREVIOUSCOPY reserved reserved DLURLCOMPLETE reserved reserved DLURLCOMPLETEONLY reserved reserved DLURLCOMPLETEWRITE reserved reserved DLURLPATH reserved reserved DLURLPATHONLY reserved reserved DLURLPATHWRITE reserved reserved DLURLSCHEME reserved reserved DLURLSERVER reserved reserved DLVALUE reserved reserved DO reserved DOCUMENT non-reserved non-reserved non-reserved DOMAIN non-reserved non-reserved non-reserved reserved DOUBLE non-reserved reserved reserved reserved DROP non-reserved reserved reserved reserved DYNAMIC reserved reserved DYNAMIC_FUNCTION non-reserved non-reserved non-reserved DYNAMIC_​FUNCTION_​CODE non-reserved non-reserved EACH non-reserved reserved reserved ELEMENT reserved reserved ELSE reserved reserved reserved reserved EMPTY reserved non-reserved ENABLE non-reserved ENCODING non-reserved non-reserved non-reserved ENCRYPTED non-reserved END reserved reserved reserved reserved END-EXEC reserved reserved reserved END_FRAME reserved reserved END_PARTITION reserved reserved ENFORCED non-reserved non-reserved ENUM non-reserved EQUALS reserved reserved ERROR non-reserved ESCAPE non-reserved reserved reserved reserved EVENT non-reserved EVERY reserved reserved EXCEPT reserved, requires AS reserved reserved reserved EXCEPTION reserved EXCLUDE non-reserved non-reserved non-reserved EXCLUDING non-reserved non-reserved non-reserved EXCLUSIVE non-reserved EXEC reserved reserved reserved EXECUTE non-reserved reserved reserved reserved EXISTS non-reserved (cannot be function or type) reserved reserved reserved EXP reserved reserved EXPLAIN non-reserved EXPRESSION non-reserved non-reserved non-reserved EXTENSION non-reserved EXTERNAL non-reserved reserved reserved reserved EXTRACT non-reserved (cannot be function or type) reserved reserved reserved FALSE reserved reserved reserved reserved FAMILY non-reserved FETCH reserved, requires AS reserved reserved reserved FILE non-reserved non-reserved FILTER non-reserved, requires AS reserved reserved FINAL non-reserved non-reserved FINALIZE non-reserved FINISH non-reserved FIRST non-reserved non-reserved non-reserved reserved FIRST_VALUE reserved reserved FLAG non-reserved non-reserved FLOAT non-reserved (cannot be function or type) reserved reserved reserved FLOOR reserved reserved FOLLOWING non-reserved non-reserved non-reserved FOR reserved, requires AS reserved reserved reserved FORCE non-reserved FOREIGN reserved reserved reserved reserved FORMAT non-reserved FORTRAN non-reserved non-reserved non-reserved FORWARD non-reserved FOUND non-reserved non-reserved reserved FRAME_ROW reserved reserved FREE reserved reserved FREEZE reserved (can be function or type) FROM reserved, requires AS reserved reserved reserved FS non-reserved non-reserved FULFILL non-reserved FULL reserved (can be function or type) reserved reserved reserved FUNCTION non-reserved reserved reserved FUNCTIONS non-reserved FUSION reserved reserved G non-reserved non-reserved GENERAL non-reserved non-reserved GENERATED non-reserved non-reserved non-reserved GET reserved reserved reserved GLOBAL non-reserved reserved reserved reserved GO non-reserved non-reserved reserved GOTO non-reserved non-reserved reserved GRANT reserved, requires AS reserved reserved reserved GRANTED non-reserved non-reserved non-reserved GREATEST non-reserved (cannot be function or type) GROUP reserved, requires AS reserved reserved reserved GROUPING non-reserved (cannot be function or type) reserved reserved GROUPS non-reserved reserved reserved HANDLER non-reserved HAVING reserved, requires AS reserved reserved reserved HEADER non-reserved HEX non-reserved non-reserved HIERARCHY non-reserved non-reserved HOLD non-reserved reserved reserved HOUR non-reserved, requires AS reserved reserved reserved ID non-reserved non-reserved IDENTITY non-reserved reserved reserved reserved IF non-reserved IGNORE non-reserved non-reserved ILIKE reserved (can be function or type) IMMEDIATE non-reserved non-reserved non-reserved reserved IMMEDIATELY non-reserved non-reserved IMMUTABLE non-reserved IMPLEMENTATION non-reserved non-reserved IMPLICIT non-reserved IMPORT non-reserved reserved reserved IN reserved reserved reserved reserved INCLUDE non-reserved INCLUDING non-reserved non-reserved non-reserved INCREMENT non-reserved non-reserved non-reserved INDENT non-reserved non-reserved INDEX non-reserved INDEXES non-reserved INDICATOR reserved reserved reserved INHERIT non-reserved INHERITS non-reserved INITIAL reserved INITIALLY reserved non-reserved non-reserved reserved INLINE non-reserved INNER reserved (can be function or type) reserved reserved reserved INOUT non-reserved (cannot be function or type) reserved reserved INPUT non-reserved non-reserved non-reserved reserved INSENSITIVE non-reserved reserved reserved reserved INSERT non-reserved reserved reserved reserved INSTANCE non-reserved non-reserved INSTANTIABLE non-reserved non-reserved INSTEAD non-reserved non-reserved non-reserved INT non-reserved (cannot be function or type) reserved reserved reserved INTEGER non-reserved (cannot be function or type) reserved reserved reserved INTEGRITY non-reserved non-reserved INTERSECT reserved, requires AS reserved reserved reserved INTERSECTION reserved reserved INTERVAL non-reserved (cannot be function or type) reserved reserved reserved INTO reserved, requires AS reserved reserved reserved INVOKER non-reserved non-reserved non-reserved IS reserved (can be function or type) reserved reserved reserved ISNULL reserved (can be function or type), requires AS ISOLATION non-reserved non-reserved non-reserved reserved JOIN reserved (can be function or type) reserved reserved reserved JSON_ARRAY reserved JSON_ARRAYAGG reserved JSON_EXISTS reserved JSON_OBJECT reserved JSON_OBJECTAGG reserved JSON_QUERY reserved JSON_TABLE reserved JSON_TABLE_PRIMITIVE reserved JSON_VALUE reserved K non-reserved non-reserved KEEP non-reserved KEY non-reserved non-reserved non-reserved reserved KEYS non-reserved KEY_MEMBER non-reserved non-reserved KEY_TYPE non-reserved non-reserved LABEL non-reserved LAG reserved reserved LANGUAGE non-reserved reserved reserved reserved LARGE non-reserved reserved reserved LAST non-reserved non-reserved non-reserved reserved LAST_VALUE reserved reserved LATERAL reserved reserved reserved LEAD reserved reserved LEADING reserved reserved reserved reserved LEAKPROOF non-reserved LEAST non-reserved (cannot be function or type) LEFT reserved (can be function or type) reserved reserved reserved LENGTH non-reserved non-reserved non-reserved LEVEL non-reserved non-reserved non-reserved reserved LIBRARY non-reserved non-reserved LIKE reserved (can be function or type) reserved reserved reserved LIKE_REGEX reserved reserved LIMIT reserved, requires AS non-reserved non-reserved LINK non-reserved non-reserved LISTAGG reserved LISTEN non-reserved LN reserved reserved LOAD non-reserved LOCAL non-reserved reserved reserved reserved LOCALTIME reserved reserved reserved LOCALTIMESTAMP reserved reserved reserved LOCATION non-reserved non-reserved non-reserved LOCATOR non-reserved non-reserved LOCK non-reserved LOCKED non-reserved LOG reserved LOG10 reserved LOGGED non-reserved LOWER reserved reserved reserved M non-reserved non-reserved MAP non-reserved non-reserved MAPPING non-reserved non-reserved non-reserved MATCH non-reserved reserved reserved reserved MATCHED non-reserved non-reserved non-reserved MATCHES reserved MATCH_NUMBER reserved MATCH_RECOGNIZE reserved MATERIALIZED non-reserved MAX reserved reserved reserved MAXVALUE non-reserved non-reserved non-reserved MEASURES reserved MEMBER reserved reserved MERGE non-reserved reserved reserved MESSAGE_LENGTH non-reserved non-reserved non-reserved MESSAGE_OCTET_LENGTH non-reserved non-reserved non-reserved MESSAGE_TEXT non-reserved non-reserved non-reserved METHOD non-reserved reserved reserved MIN reserved reserved reserved MINUTE non-reserved, requires AS reserved reserved reserved MINVALUE non-reserved non-reserved non-reserved MOD reserved reserved MODE non-reserved MODIFIES reserved reserved MODULE reserved reserved reserved MONTH non-reserved, requires AS reserved reserved reserved MORE non-reserved non-reserved non-reserved MOVE non-reserved MULTISET reserved reserved MUMPS non-reserved non-reserved non-reserved NAME non-reserved non-reserved non-reserved non-reserved NAMES non-reserved non-reserved non-reserved reserved NAMESPACE non-reserved non-reserved NATIONAL non-reserved (cannot be function or type) reserved reserved reserved NATURAL reserved (can be function or type) reserved reserved reserved NCHAR non-reserved (cannot be function or type) reserved reserved reserved NCLOB reserved reserved NESTED non-reserved NESTING non-reserved non-reserved NEW non-reserved reserved reserved NEXT non-reserved non-reserved non-reserved reserved NFC non-reserved non-reserved non-reserved NFD non-reserved non-reserved non-reserved NFKC non-reserved non-reserved non-reserved NFKD non-reserved non-reserved non-reserved NIL non-reserved non-reserved NO non-reserved reserved reserved reserved NONE non-reserved (cannot be function or type) reserved reserved NORMALIZE non-reserved (cannot be function or type) reserved reserved NORMALIZED non-reserved non-reserved non-reserved NOT reserved reserved reserved reserved NOTHING non-reserved NOTIFY non-reserved NOTNULL reserved (can be function or type), requires AS NOWAIT non-reserved NTH_VALUE reserved reserved NTILE reserved reserved NULL reserved reserved reserved reserved NULLABLE non-reserved non-reserved non-reserved NULLIF non-reserved (cannot be function or type) reserved reserved reserved NULLS non-reserved non-reserved non-reserved NULL_ORDERING non-reserved NUMBER non-reserved non-reserved non-reserved NUMERIC non-reserved (cannot be function or type) reserved reserved reserved OBJECT non-reserved non-reserved non-reserved OCCURRENCE non-reserved OCCURRENCES_REGEX reserved reserved OCTETS non-reserved non-reserved OCTET_LENGTH reserved reserved reserved OF non-reserved reserved reserved reserved OFF non-reserved non-reserved non-reserved OFFSET reserved, requires AS reserved reserved OIDS non-reserved OLD non-reserved reserved reserved OMIT reserved ON reserved, requires AS reserved reserved reserved ONE reserved ONLY reserved reserved reserved reserved OPEN reserved reserved reserved OPERATOR non-reserved OPTION non-reserved non-reserved non-reserved reserved OPTIONS non-reserved non-reserved non-reserved OR reserved reserved reserved reserved ORDER reserved, requires AS reserved reserved reserved ORDERING non-reserved non-reserved ORDINALITY non-reserved non-reserved non-reserved OTHERS non-reserved non-reserved non-reserved OUT non-reserved (cannot be function or type) reserved reserved OUTER reserved (can be function or type) reserved reserved reserved OUTPUT non-reserved non-reserved reserved OVER non-reserved, requires AS reserved reserved OVERFLOW non-reserved OVERLAPS reserved (can be function or type), requires AS reserved reserved reserved OVERLAY non-reserved (cannot be function or type) reserved reserved OVERRIDING non-reserved non-reserved non-reserved OWNED non-reserved OWNER non-reserved P non-reserved non-reserved PAD non-reserved non-reserved reserved PARALLEL non-reserved PARAMETER non-reserved reserved reserved PARAMETER_MODE non-reserved non-reserved PARAMETER_NAME non-reserved non-reserved PARAMETER_​ORDINAL_​POSITION non-reserved non-reserved PARAMETER_​SPECIFIC_​CATALOG non-reserved non-reserved PARAMETER_​SPECIFIC_​NAME non-reserved non-reserved PARAMETER_​SPECIFIC_​SCHEMA non-reserved non-reserved PARSER non-reserved PARTIAL non-reserved non-reserved non-reserved reserved PARTITION non-reserved reserved reserved PASCAL non-reserved non-reserved non-reserved PASS non-reserved PASSING non-reserved non-reserved non-reserved PASSTHROUGH non-reserved non-reserved PASSWORD non-reserved PAST non-reserved PATH non-reserved non-reserved PATTERN reserved PER reserved PERCENT reserved reserved PERCENTILE_CONT reserved reserved PERCENTILE_DISC reserved reserved PERCENT_RANK reserved reserved PERIOD reserved reserved PERMISSION non-reserved non-reserved PERMUTE reserved PIPE non-reserved PLACING reserved non-reserved non-reserved PLAN non-reserved PLANS non-reserved PLI non-reserved non-reserved non-reserved POLICY non-reserved PORTION reserved reserved POSITION non-reserved (cannot be function or type) reserved reserved reserved POSITION_REGEX reserved reserved POWER reserved reserved PRECEDES reserved reserved PRECEDING non-reserved non-reserved non-reserved PRECISION non-reserved (cannot be function or type), requires AS reserved reserved reserved PREPARE non-reserved reserved reserved reserved PREPARED non-reserved PRESERVE non-reserved non-reserved non-reserved reserved PREV non-reserved PRIMARY reserved reserved reserved reserved PRIOR non-reserved non-reserved non-reserved reserved PRIVATE non-reserved PRIVILEGES non-reserved non-reserved non-reserved reserved PROCEDURAL non-reserved PROCEDURE non-reserved reserved reserved reserved PROCEDURES non-reserved PROGRAM non-reserved PRUNE non-reserved PTF reserved PUBLIC non-reserved non-reserved reserved PUBLICATION non-reserved QUOTE non-reserved QUOTES non-reserved RANGE non-reserved reserved reserved RANK reserved reserved READ non-reserved non-reserved non-reserved reserved READS reserved reserved REAL non-reserved (cannot be function or type) reserved reserved reserved REASSIGN non-reserved RECHECK non-reserved RECOVERY non-reserved non-reserved RECURSIVE non-reserved reserved reserved REF non-reserved reserved reserved REFERENCES reserved reserved reserved reserved REFERENCING non-reserved reserved reserved REFRESH non-reserved REGR_AVGX reserved reserved REGR_AVGY reserved reserved REGR_COUNT reserved reserved REGR_INTERCEPT reserved reserved REGR_R2 reserved reserved REGR_SLOPE reserved reserved REGR_SXX reserved reserved REGR_SXY reserved reserved REGR_SYY reserved reserved REINDEX non-reserved RELATIVE non-reserved non-reserved non-reserved reserved RELEASE non-reserved reserved reserved RENAME non-reserved REPEATABLE non-reserved non-reserved non-reserved non-reserved REPLACE non-reserved REPLICA non-reserved REQUIRING non-reserved non-reserved RESET non-reserved RESPECT non-reserved non-reserved RESTART non-reserved non-reserved non-reserved RESTORE non-reserved non-reserved RESTRICT non-reserved non-reserved non-reserved reserved RESULT reserved reserved RETURN non-reserved reserved reserved RETURNED_CARDINALITY non-reserved non-reserved RETURNED_LENGTH non-reserved non-reserved non-reserved RETURNED_​OCTET_​LENGTH non-reserved non-reserved non-reserved RETURNED_SQLSTATE non-reserved non-reserved non-reserved RETURNING reserved, requires AS non-reserved non-reserved RETURNS non-reserved reserved reserved REVOKE non-reserved reserved reserved reserved RIGHT reserved (can be function or type) reserved reserved reserved ROLE non-reserved non-reserved non-reserved ROLLBACK non-reserved reserved reserved reserved ROLLUP non-reserved reserved reserved ROUTINE non-reserved non-reserved non-reserved ROUTINES non-reserved ROUTINE_CATALOG non-reserved non-reserved ROUTINE_NAME non-reserved non-reserved ROUTINE_SCHEMA non-reserved non-reserved ROW non-reserved (cannot be function or type) reserved reserved ROWS non-reserved reserved reserved reserved ROW_COUNT non-reserved non-reserved non-reserved ROW_NUMBER reserved reserved RULE non-reserved RUNNING reserved SAVEPOINT non-reserved reserved reserved SCALAR non-reserved SCALE non-reserved non-reserved non-reserved SCHEMA non-reserved non-reserved non-reserved reserved SCHEMAS non-reserved SCHEMA_NAME non-reserved non-reserved non-reserved SCOPE reserved reserved SCOPE_CATALOG non-reserved non-reserved SCOPE_NAME non-reserved non-reserved SCOPE_SCHEMA non-reserved non-reserved SCROLL non-reserved reserved reserved reserved SEARCH non-reserved reserved reserved SECOND non-reserved, requires AS reserved reserved reserved SECTION non-reserved non-reserved reserved SECURITY non-reserved non-reserved non-reserved SEEK reserved SELECT reserved reserved reserved reserved SELECTIVE non-reserved non-reserved SELF non-reserved non-reserved SEMANTICS non-reserved SENSITIVE reserved reserved SEQUENCE non-reserved non-reserved non-reserved SEQUENCES non-reserved SERIALIZABLE non-reserved non-reserved non-reserved non-reserved SERVER non-reserved non-reserved non-reserved SERVER_NAME non-reserved non-reserved non-reserved SESSION non-reserved non-reserved non-reserved reserved SESSION_USER reserved reserved reserved reserved SET non-reserved reserved reserved reserved SETOF non-reserved (cannot be function or type) SETS non-reserved non-reserved non-reserved SHARE non-reserved SHOW non-reserved reserved SIMILAR reserved (can be function or type) reserved reserved SIMPLE non-reserved non-reserved non-reserved SIN reserved SINH reserved SIZE non-reserved non-reserved reserved SKIP non-reserved reserved SMALLINT non-reserved (cannot be function or type) reserved reserved reserved SNAPSHOT non-reserved SOME reserved reserved reserved reserved SORT_DIRECTION non-reserved SOURCE non-reserved non-reserved SPACE non-reserved non-reserved reserved SPECIFIC reserved reserved SPECIFICTYPE reserved reserved SPECIFIC_NAME non-reserved non-reserved SQL non-reserved reserved reserved reserved SQLCODE reserved SQLERROR reserved SQLEXCEPTION reserved reserved SQLSTATE reserved reserved reserved SQLWARNING reserved reserved SQRT reserved reserved STABLE non-reserved STANDALONE non-reserved non-reserved non-reserved START non-reserved reserved reserved STATE non-reserved non-reserved STATEMENT non-reserved non-reserved non-reserved STATIC reserved reserved STATISTICS non-reserved STDDEV_POP reserved reserved STDDEV_SAMP reserved reserved STDIN non-reserved STDOUT non-reserved STORAGE non-reserved STORED non-reserved STRICT non-reserved STRING non-reserved STRIP non-reserved non-reserved non-reserved STRUCTURE non-reserved non-reserved STYLE non-reserved non-reserved SUBCLASS_ORIGIN non-reserved non-reserved non-reserved SUBMULTISET reserved reserved SUBSCRIPTION non-reserved SUBSET reserved SUBSTRING non-reserved (cannot be function or type) reserved reserved reserved SUBSTRING_REGEX reserved reserved SUCCEEDS reserved reserved SUM reserved reserved reserved SUPPORT non-reserved SYMMETRIC reserved reserved reserved SYSID non-reserved SYSTEM non-reserved reserved reserved SYSTEM_TIME reserved reserved SYSTEM_USER reserved reserved reserved T non-reserved non-reserved TABLE reserved reserved reserved reserved TABLES non-reserved TABLESAMPLE reserved (can be function or type) reserved reserved TABLESPACE non-reserved TABLE_NAME non-reserved non-reserved non-reserved TAN reserved TANH reserved TEMP non-reserved TEMPLATE non-reserved TEMPORARY non-reserved non-reserved non-reserved reserved TEXT non-reserved THEN reserved reserved reserved reserved THROUGH non-reserved TIES non-reserved non-reserved non-reserved TIME non-reserved (cannot be function or type) reserved reserved reserved TIMESTAMP non-reserved (cannot be function or type) reserved reserved reserved TIMEZONE_HOUR reserved reserved reserved TIMEZONE_MINUTE reserved reserved reserved TO reserved, requires AS reserved reserved reserved TOKEN non-reserved non-reserved TOP_LEVEL_COUNT non-reserved non-reserved TRAILING reserved reserved reserved reserved TRANSACTION non-reserved non-reserved non-reserved reserved TRANSACTIONS_​COMMITTED non-reserved non-reserved TRANSACTIONS_​ROLLED_​BACK non-reserved non-reserved TRANSACTION_ACTIVE non-reserved non-reserved TRANSFORM non-reserved non-reserved non-reserved TRANSFORMS non-reserved non-reserved TRANSLATE reserved reserved reserved TRANSLATE_REGEX reserved reserved TRANSLATION reserved reserved reserved TREAT non-reserved (cannot be function or type) reserved reserved TRIGGER non-reserved reserved reserved TRIGGER_CATALOG non-reserved non-reserved TRIGGER_NAME non-reserved non-reserved TRIGGER_SCHEMA non-reserved non-reserved TRIM non-reserved (cannot be function or type) reserved reserved reserved TRIM_ARRAY reserved reserved TRUE reserved reserved reserved reserved TRUNCATE non-reserved reserved reserved TRUSTED non-reserved TYPE non-reserved non-reserved non-reserved non-reserved TYPES non-reserved UESCAPE non-reserved reserved reserved UNBOUNDED non-reserved non-reserved non-reserved UNCOMMITTED non-reserved non-reserved non-reserved non-reserved UNCONDITIONAL non-reserved UNDER non-reserved non-reserved UNENCRYPTED non-reserved UNION reserved, requires AS reserved reserved reserved UNIQUE reserved reserved reserved reserved UNKNOWN non-reserved reserved reserved reserved UNLINK non-reserved non-reserved UNLISTEN non-reserved UNLOGGED non-reserved UNMATCHED reserved UNNAMED non-reserved non-reserved non-reserved UNNEST reserved reserved UNTIL non-reserved UNTYPED non-reserved non-reserved UPDATE non-reserved reserved reserved reserved UPPER reserved reserved reserved URI non-reserved non-reserved USAGE non-reserved non-reserved reserved USER reserved reserved reserved reserved USER_​DEFINED_​TYPE_​CATALOG non-reserved non-reserved USER_​DEFINED_​TYPE_​CODE non-reserved non-reserved USER_​DEFINED_​TYPE_​NAME non-reserved non-reserved USER_​DEFINED_​TYPE_​SCHEMA non-reserved non-reserved USING reserved reserved reserved reserved UTF16 non-reserved UTF32 non-reserved UTF8 non-reserved VACUUM non-reserved VALID non-reserved non-reserved non-reserved VALIDATE non-reserved VALIDATOR non-reserved VALUE non-reserved reserved reserved reserved VALUES non-reserved (cannot be function or type) reserved reserved reserved VALUE_OF reserved reserved VARBINARY reserved reserved VARCHAR non-reserved (cannot be function or type) reserved reserved reserved VARIADIC reserved VARYING non-reserved, requires AS reserved reserved reserved VAR_POP reserved reserved VAR_SAMP reserved reserved VERBOSE reserved (can be function or type) VERSION non-reserved non-reserved non-reserved VERSIONING reserved reserved VIEW non-reserved non-reserved non-reserved reserved VIEWS non-reserved VOLATILE non-reserved WHEN reserved reserved reserved reserved WHENEVER reserved reserved reserved WHERE reserved, requires AS reserved reserved reserved WHITESPACE non-reserved non-reserved non-reserved WIDTH_BUCKET reserved reserved WINDOW reserved, requires AS reserved reserved WITH reserved, requires AS reserved reserved reserved WITHIN non-reserved, requires AS reserved reserved WITHOUT non-reserved, requires AS reserved reserved WORK non-reserved non-reserved non-reserved reserved WRAPPER non-reserved non-reserved non-reserved WRITE non-reserved non-reserved non-reserved reserved XML non-reserved reserved reserved XMLAGG reserved reserved XMLATTRIBUTES non-reserved (cannot be function or type) reserved reserved XMLBINARY reserved reserved XMLCAST reserved reserved XMLCOMMENT reserved reserved XMLCONCAT non-reserved (cannot be function or type) reserved reserved XMLDECLARATION non-reserved non-reserved XMLDOCUMENT reserved reserved XMLELEMENT non-reserved (cannot be function or type) reserved reserved XMLEXISTS non-reserved (cannot be function or type) reserved reserved XMLFOREST non-reserved (cannot be function or type) reserved reserved XMLITERATE reserved reserved XMLNAMESPACES non-reserved (cannot be function or type) reserved reserved XMLPARSE non-reserved (cannot be function or type) reserved reserved XMLPI non-reserved (cannot be function or type) reserved reserved XMLQUERY reserved reserved XMLROOT non-reserved (cannot be function or type) XMLSCHEMA non-reserved non-reserved XMLSERIALIZE non-reserved (cannot be function or type) reserved reserved XMLTABLE non-reserved (cannot be function or type) reserved reserved XMLTEXT reserved reserved XMLVALIDATE reserved reserved YEAR non-reserved, requires AS reserved reserved reserved YES non-reserved non-reserved non-reserved ZONE non-reserved non-reserved non-reserved reserved"
https://www.postgresql.org/docs/15/admin.html,No Title,"Part III. Server Administration This part covers topics that are of interest to a PostgreSQL database administrator. This includes installation of the software, set up and configuration of the server, management of users and databases, and maintenance tasks. Anyone who runs a PostgreSQL server, even for personal use, but especially in production, should be familiar with the topics covered in this part. The information in this part is arranged approximately in the order in which a new user should read it. But the chapters are self-contained and can be read individually as desired. The information in this part is presented in a narrative fashion in topical units. Readers looking for a complete description of a particular command should see Part VI . The first few chapters are written so they can be understood without prerequisite knowledge, so new users who need to set up their own server can begin their exploration with this part. The rest of this part is about tuning and management; that material assumes that the reader is familiar with the general use of the PostgreSQL database system. Readers are encouraged to look at Part I and Part II for additional information."
https://www.postgresql.org/docs/15/plhandler.html,Chapter 58. Writing a Procedural Language Handler,"All calls to functions that are written in a language other than the current “ version 1 ” interface for compiled languages (this includes functions in user-defined procedural languages and functions written in SQL) go through a call handler function for the specific language. It is the responsibility of the call handler to execute the function in a meaningful way, such as by interpreting the supplied source text. This chapter outlines how a new procedural language's call handler can be written. The call handler for a procedural language is a “ normal ” function that must be written in a compiled language such as C, using the version-1 interface, and registered with PostgreSQL as taking no arguments and returning the type language_handler . This special pseudo-type identifies the function as a call handler and prevents it from being called directly in SQL commands. For more details on C language calling conventions and dynamic loading, see Section 38.10 . The call handler is called in the same way as any other function: It receives a pointer to a FunctionCallInfoBaseData struct containing argument values and information about the called function, and it is expected to return a Datum result (and possibly set the isnull field of the FunctionCallInfoBaseData structure, if it wishes to return an SQL null result). The difference between a call handler and an ordinary callee function is that the flinfo->fn_oid field of the FunctionCallInfoBaseData structure will contain the OID of the actual function to be called, not of the call handler itself. The call handler must use this field to determine which function to execute. Also, the passed argument list has been set up according to the declaration of the target function, not of the call handler. It's up to the call handler to fetch the entry of the function from the pg_proc system catalog and to analyze the argument and return types of the called function. The AS clause from the CREATE FUNCTION command for the function will be found in the prosrc column of the pg_proc row. This is commonly source text in the procedural language, but in theory it could be something else, such as a path name to a file, or anything else that tells the call handler what to do in detail. Often, the same function is called many times per SQL statement. A call handler can avoid repeated lookups of information about the called function by using the flinfo->fn_extra field. This will initially be NULL , but can be set by the call handler to point at information about the called function. On subsequent calls, if flinfo->fn_extra is already non- NULL then it can be used and the information lookup step skipped. The call handler must make sure that flinfo->fn_extra is made to point at memory that will live at least until the end of the current query, since an FmgrInfo data structure could be kept that long. One way to do this is to allocate the extra data in the memory context specified by flinfo->fn_mcxt ; such data will normally have the same lifespan as the FmgrInfo itself. But the handler could also choose to use a longer-lived memory context so that it can cache function definition information across queries. When a procedural-language function is invoked as a trigger, no arguments are passed in the usual way, but the FunctionCallInfoBaseData 's context field points at a TriggerData structure, rather than being NULL as it is in a plain function call. A language handler should provide mechanisms for procedural-language functions to get at the trigger information. A template for a procedural-language handler written as a C extension is provided in src/test/modules/plsample . This is a working sample demonstrating one way to create a procedural-language handler, process parameters, and return a value. Although providing a call handler is sufficient to create a minimal procedural language, there are two other functions that can optionally be provided to make the language more convenient to use. These are a validator and an inline handler . A validator can be provided to allow language-specific checking to be done during CREATE FUNCTION . An inline handler can be provided to allow the language to support anonymous code blocks executed via the DO command. If a validator is provided by a procedural language, it must be declared as a function taking a single parameter of type oid . The validator's result is ignored, so it is customarily declared to return void . The validator will be called at the end of a CREATE FUNCTION command that has created or updated a function written in the procedural language. The passed-in OID is the OID of the function's pg_proc row. The validator must fetch this row in the usual way, and do whatever checking is appropriate. First, call CheckFunctionValidatorAccess() to diagnose explicit calls to the validator that the user could not achieve through CREATE FUNCTION . Typical checks then include verifying that the function's argument and result types are supported by the language, and that the function's body is syntactically correct in the language. If the validator finds the function to be okay, it should just return. If it finds an error, it should report that via the normal ereport() error reporting mechanism. Throwing an error will force a transaction rollback and thus prevent the incorrect function definition from being committed. Validator functions should typically honor the check_function_bodies parameter: if it is turned off then any expensive or context-sensitive checking should be skipped. If the language provides for code execution at compilation time, the validator must suppress checks that would induce such execution. In particular, this parameter is turned off by pg_dump so that it can load procedural language functions without worrying about side effects or dependencies of the function bodies on other database objects. (Because of this requirement, the call handler should avoid assuming that the validator has fully checked the function. The point of having a validator is not to let the call handler omit checks, but to notify the user immediately if there are obvious errors in a CREATE FUNCTION command.) While the choice of exactly what to check is mostly left to the discretion of the validator function, note that the core CREATE FUNCTION code only executes SET clauses attached to a function when check_function_bodies is on. Therefore, checks whose results might be affected by GUC parameters definitely should be skipped when check_function_bodies is off, to avoid false failures when restoring a dump. If an inline handler is provided by a procedural language, it must be declared as a function taking a single parameter of type internal . The inline handler's result is ignored, so it is customarily declared to return void . The inline handler will be called when a DO statement is executed specifying the procedural language. The parameter actually passed is a pointer to an InlineCodeBlock struct, which contains information about the DO statement's parameters, in particular the text of the anonymous code block to be executed. The inline handler should execute this code and return. It's recommended that you wrap all these function declarations, as well as the CREATE LANGUAGE command itself, into an extension so that a simple CREATE EXTENSION command is sufficient to install the language. See Section 38.17 for information about writing extensions. The procedural languages included in the standard distribution are good references when trying to write your own language handler. Look into the src/pl subdirectory of the source tree. The CREATE LANGUAGE reference page also has some useful details."
https://www.postgresql.org/docs/15/indexes.html,Chapter 11. Indexes,"Indexes are a common way to enhance database performance. An index allows the database server to find and retrieve specific rows much faster than it could do without an index. But indexes also add overhead to the database system as a whole, so they should be used sensibly."
https://www.postgresql.org/docs/15/libpq.html,Chapter 34.libpq— C Library,"libpq is the C application programmer's interface to PostgreSQL . libpq is a set of library functions that allow client programs to pass queries to the PostgreSQL backend server and to receive the results of these queries. libpq is also the underlying engine for several other PostgreSQL application interfaces, including those written for C++, Perl, Python, Tcl and ECPG . So some aspects of libpq 's behavior will be important to you if you use one of those packages. In particular, Section 34.15 , Section 34.16 and Section 34.19 describe behavior that is visible to the user of any application that uses libpq . Some short programs are included at the end of this chapter ( Section 34.22 ) to show how to write programs that use libpq . There are also several complete examples of libpq applications in the directory src/test/examples in the source code distribution. Client programs that use libpq must include the header file libpq-fe.h and must link with the libpq library."
https://www.postgresql.org/docs/15/tutorial.html,No Title,"Part I. Tutorial Welcome to the PostgreSQL Tutorial. The following few chapters are intended to give a simple introduction to PostgreSQL , relational database concepts, and the SQL language to those who are new to any one of these aspects. We only assume some general knowledge about how to use computers. No particular Unix or programming experience is required. This part is mainly intended to give you some hands-on experience with important aspects of the PostgreSQL system. It makes no attempt to be a complete or thorough treatment of the topics it covers. After you have worked through this tutorial you might want to move on to reading Part II to gain a more formal knowledge of the SQL language, or Part IV for information about developing applications for PostgreSQL . Those who set up and manage their own server should also read Part III ."
https://www.postgresql.org/docs/15/acronyms.html,Appendix L. Acronyms,"This is a list of acronyms commonly used in the PostgreSQL documentation and in discussions about PostgreSQL . ANSI American National Standards Institute API Application Programming Interface ASCII American Standard Code for Information Interchange BKI Backend Interface CA Certificate Authority CIDR Classless Inter-Domain Routing CPAN Comprehensive Perl Archive Network CRL Certificate Revocation List CSV Comma Separated Values CTE Common Table Expression CVE Common Vulnerabilities and Exposures DBA Database Administrator DBI Database Interface (Perl) DBMS Database Management System DDL Data Definition Language , SQL commands such as CREATE TABLE , ALTER USER DML Data Manipulation Language , SQL commands such as INSERT , UPDATE , DELETE DST Daylight Saving Time ECPG Embedded C for PostgreSQL ESQL Embedded SQL FAQ Frequently Asked Questions FSM Free Space Map GEQO Genetic Query Optimizer GIN Generalized Inverted Index GiST Generalized Search Tree Git Git GMT Greenwich Mean Time GSSAPI Generic Security Services Application Programming Interface GUC Grand Unified Configuration , the PostgreSQL subsystem that handles server configuration HBA Host-Based Authentication HOT Heap-Only Tuples IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IPC Inter-Process Communication ISO International Organization for Standardization ISSN International Standard Serial Number JDBC Java Database Connectivity JIT Just-in-Time compilation JSON JavaScript Object Notation LDAP Lightweight Directory Access Protocol LSN Log Sequence Number, see pg_lsn and WAL Internals . MITM Man-in-the-middle attack MSVC Microsoft Visual C MVCC Multi-Version Concurrency Control NLS National Language Support ODBC Open Database Connectivity OID Object Identifier OLAP Online Analytical Processing OLTP Online Transaction Processing ORDBMS Object-Relational Database Management System PAM Pluggable Authentication Modules PGSQL PostgreSQL PGXS PostgreSQL Extension System PID Process Identifier PITR Point-In-Time Recovery (Continuous Archiving) PL Procedural Languages (server-side) POSIX Portable Operating System Interface RDBMS Relational Database Management System RFC Request For Comments SGML Standard Generalized Markup Language SNI Server Name Indication , RFC 6066 SPI Server Programming Interface SP-GiST Space-Partitioned Generalized Search Tree SQL Structured Query Language SRF Set-Returning Function SSH Secure Shell SSL Secure Sockets Layer SSPI Security Support Provider Interface SYSV Unix System V TCP/IP Transmission Control Protocol (TCP) / Internet Protocol (IP) TID Tuple Identifier TLS Transport Layer Security TOAST The Oversized-Attribute Storage Technique TPC Transaction Processing Performance Council URL Uniform Resource Locator UTC Coordinated Universal Time UTF Unicode Transformation Format UTF8 Eight-Bit Unicode Transformation Format UUID Universally Unique Identifier WAL Write-Ahead Log XID Transaction Identifier XML Extensible Markup Language"
https://www.postgresql.org/docs/15/runtime-config.html,Chapter 20. Server Configuration,There are many configuration parameters that affect the behavior of the database system. In the first section of this chapter we describe how to interact with configuration parameters. The subsequent sections discuss each parameter in detail.
https://www.postgresql.org/docs/15/resources.html,4. Further Information,"Besides the documentation, that is, this book, there are other resources about PostgreSQL : Wiki The PostgreSQL wiki contains the project's FAQ (Frequently Asked Questions) list, TODO list, and detailed information about many more topics. Web Site The PostgreSQL web site carries details on the latest release and other information to make your work or play with PostgreSQL more productive. Mailing Lists The mailing lists are a good place to have your questions answered, to share experiences with other users, and to contact the developers. Consult the PostgreSQL web site for details. Yourself! PostgreSQL is an open-source project. As such, it depends on the user community for ongoing support. As you begin to use PostgreSQL , you will rely on others for help, either through the documentation or through the mailing lists. Consider contributing your knowledge back. Read the mailing lists and answer questions. If you learn something which is not in the documentation, write it up and contribute it. If you add features to the code, contribute them."
https://www.postgresql.org/docs/15/backup-manifest-format.html,Chapter 76. Backup Manifest Format,"The backup manifest generated by pg_basebackup is primarily intended to permit the backup to be verified using pg_verifybackup . However, it is also possible for other tools to read the backup manifest file and use the information contained therein for their own purposes. To that end, this chapter describes the format of the backup manifest file. A backup manifest is a JSON document encoded as UTF-8. (Although in general JSON documents are required to be Unicode, PostgreSQL permits the json and jsonb data types to be used with any supported server encoding. There is no similar exception for backup manifests.) The JSON document is always an object; the keys that are present in this object are described in the next section."
https://www.postgresql.org/docs/15/extend.html,Chapter 38. ExtendingSQL,"In the sections that follow, we will discuss how you can extend the PostgreSQL SQL query language by adding: functions (starting in Section 38.3 ) aggregates (starting in Section 38.12 ) data types (starting in Section 38.13 ) operators (starting in Section 38.14 ) operator classes for indexes (starting in Section 38.16 ) packages of related objects (starting in Section 38.17 )"
https://www.postgresql.org/docs/15/replication-origins.html,Chapter 50. Replication Progress Tracking,"Replication origins are intended to make it easier to implement logical replication solutions on top of logical decoding . They provide a solution to two common problems: How to safely keep track of replication progress How to change replication behavior based on the origin of a row; for example, to prevent loops in bi-directional replication setups Replication origins have just two properties, a name and an ID. The name, which is what should be used to refer to the origin across systems, is free-form text . It should be used in a way that makes conflicts between replication origins created by different replication solutions unlikely; e.g., by prefixing the replication solution's name to it. The ID is used only to avoid having to store the long version in situations where space efficiency is important. It should never be shared across systems. Replication origins can be created using the function pg_replication_origin_create() ; dropped using pg_replication_origin_drop() ; and seen in the pg_replication_origin system catalog. One nontrivial part of building a replication solution is to keep track of replay progress in a safe manner. When the applying process, or the whole cluster, dies, it needs to be possible to find out up to where data has successfully been replicated. Naive solutions to this, such as updating a row in a table for every replayed transaction, have problems like run-time overhead and database bloat. Using the replication origin infrastructure a session can be marked as replaying from a remote node (using the pg_replication_origin_session_setup() function). Additionally the LSN and commit time stamp of every source transaction can be configured on a per transaction basis using pg_replication_origin_xact_setup() . If that's done replication progress will persist in a crash safe manner. Replay progress for all replication origins can be seen in the pg_replication_origin_status view. An individual origin's progress, e.g., when resuming replication, can be acquired using pg_replication_origin_progress() for any origin or pg_replication_origin_session_progress() for the origin configured in the current session. In replication topologies more complex than replication from exactly one system to one other system, another problem can be that it is hard to avoid replicating replayed rows again. That can lead both to cycles in the replication and inefficiencies. Replication origins provide an optional mechanism to recognize and prevent that. When configured using the functions referenced in the previous paragraph, every change and transaction passed to output plugin callbacks (see Section 49.6 ) generated by the session is tagged with the replication origin of the generating session. This allows treating them differently in the output plugin, e.g., ignoring all but locally-originating rows. Additionally the filter_by_origin_cb callback can be used to filter the logical decoding change stream based on the source. While less flexible, filtering via that callback is considerably more efficient than doing it in the output plugin."
https://www.postgresql.org/docs/15/preface.html,No Title,"Preface This book is the official documentation of PostgreSQL . It has been written by the PostgreSQL developers and other volunteers in parallel to the development of the PostgreSQL software. It describes all the functionality that the current version of PostgreSQL officially supports. To make the large amount of information about PostgreSQL manageable, this book has been organized in several parts. Each part is targeted at a different class of users, or at users in different stages of their PostgreSQL experience: Part I is an informal introduction for new users. Part II documents the SQL query language environment, including data types and functions, as well as user-level performance tuning. Every PostgreSQL user should read this. Part III describes the installation and administration of the server. Everyone who runs a PostgreSQL server, be it for private use or for others, should read this part. Part IV describes the programming interfaces for PostgreSQL client programs. Part V contains information for advanced users about the extensibility capabilities of the server. Topics include user-defined data types and functions. Part VI contains reference information about SQL commands, client and server programs. This part supports the other parts with structured information sorted by command or program. Part VII contains assorted information that might be of use to PostgreSQL developers."
https://www.postgresql.org/docs/15/sql-syntax.html,Chapter 4. SQL Syntax,This chapter describes the syntax of SQL. It forms the foundation for understanding the following chapters which will go into detail about how SQL commands are applied to define and modify data. We also advise users who are already familiar with SQL to read this chapter carefully because it contains several rules and concepts that are implemented inconsistently among SQL databases or that are specific to PostgreSQL .
https://www.postgresql.org/docs/15/sourcerepo.html,Appendix I. The Source Code Repository,"The PostgreSQL source code is stored and managed using the Git version control system. A public mirror of the master repository is available; it is updated within a minute of any change to the master repository. Our wiki, https://wiki.postgresql.org/wiki/Working_with_Git , has some discussion on working with Git. Note that building PostgreSQL from the source repository requires reasonably up-to-date versions of bison , flex , and Perl . These tools are not needed to build from a distribution tarball, because the files that these tools are used to build are included in the tarball. Other tool requirements are the same as shown in Section 17.2 ."
https://www.postgresql.org/docs/15/biblio.html,No Title,"Bibliography Selected references and readings for SQL and PostgreSQL . Some white papers and technical reports from the original POSTGRES development team are available at the University of California, Berkeley, Computer Science Department web site . SQL Reference Books [bowman01] The Practical SQL Handbook . Using SQL Variants. Fourth Edition. Judith Bowman , Sandra Emerson , and Marcy Darnovsky . ISBN 0-201-70309-2. Addison-Wesley Professional. 2001. [date97] A Guide to the SQL Standard . A user's guide to the standard database language SQL . Fourth Edition. C. J. Date and Hugh Darwen . ISBN 0-201-96426-0. Addison-Wesley. 1997. [date04] An Introduction to Database Systems . Eighth Edition. C. J. Date . ISBN 0-321-19784-4. Addison-Wesley. 2003. [elma04] Fundamentals of Database Systems . Fourth Edition. Ramez Elmasri and Shamkant Navathe . ISBN 0-321-12226-7. Addison-Wesley. 2003. [melt93] Understanding the New SQL . A complete guide. Jim Melton and Alan R. Simon . ISBN 1-55860-245-3. Morgan Kaufmann. 1993. [ull88] Principles of Database and Knowledge-Base Systems . Classical Database Systems. Jeffrey D. Ullman . Volume 1. Computer Science Press. 1988. [sqltr-19075-6] SQL Technical Report . Part 6: SQL support for JavaScript Object Notation (JSON). First Edition. 2017. PostgreSQL-specific Documentation [sim98] Enhancement of the ANSI SQL Implementation of PostgreSQL . Stefan Simkovics . Department of Information Systems, Vienna University of Technology. Vienna, Austria. November 29, 1998. [yu95] The Postgres95. User Manual . A. Yu and J. Chen . University of California. Berkeley, California. Sept. 5, 1995. [fong] The design and implementation of the POSTGRES query optimizer . Zelaine Fong . University of California, Berkeley, Computer Science Department. Proceedings and Articles [ports12] “ Serializable Snapshot Isolation in PostgreSQL ”. D. Ports and K. Grittner . VLDB Conference, August 2012. [berenson95] “ A Critique of ANSI SQL Isolation Levels ”. H. Berenson , P. Bernstein , J. Gray , J. Melton , E. O'Neil , and P. O'Neil . ACM-SIGMOD Conference on Management of Data, June 1995. [olson93] Partial indexing in POSTGRES: research project . Nels Olson . UCB Engin T7.49.1993 O676. University of California. Berkeley, California. 1993. [ong90] “A Unified Framework for Version Modeling Using Production Rules in a Database System”. L. Ong and J. Goh . ERL Technical Memorandum M90/33 . University of California. Berkeley, California. April, 1990. [rowe87] “ The POSTGRES data model ”. L. Rowe and M. Stonebraker . VLDB Conference, Sept. 1987. [seshadri95] “ Generalized Partial Indexes ”. P. Seshadri and A. Swami . Eleventh International Conference on Data Engineering, 6–10 March 1995. Cat. No.95CH35724. IEEE Computer Society Press. Los Alamitos, California. 1995. 420–7. [ston86] “ The design of POSTGRES ”. M. Stonebraker and L. Rowe . ACM-SIGMOD Conference on Management of Data, May 1986. [ston87a] “The design of the POSTGRES rules system”. M. Stonebraker , E. Hanson , and C. H. Hong . IEEE Conference on Data Engineering, Feb. 1987. [ston87b] “ The design of the POSTGRES storage system ”. M. Stonebraker . VLDB Conference, Sept. 1987. [ston89] “ A commentary on the POSTGRES rules system ”. M. Stonebraker , M. Hearst , and S. Potamianos . SIGMOD Record 18(3) . Sept. 1989. [ston89b] “ The case for partial indexes ”. M. Stonebraker . SIGMOD Record 18(4) . Dec. 1989. 4–11. [ston90a] “ The implementation of POSTGRES ”. M. Stonebraker , L. A. Rowe , and M. Hirohama . Transactions on Knowledge and Data Engineering 2(1) . IEEE. March 1990. [ston90b] “ On Rules, Procedures, Caching and Views in Database Systems ”. M. Stonebraker , A. Jhingran , J. Goh , and S. Potamianos . ACM-SIGMOD Conference on Management of Data, June 1990. [ston92] “ An overview of the Sequoia 2000 project ”. M. Stonebraker . Digest of Papers COMPCON Spring 1992 . 1992. 383–388."
https://www.postgresql.org/docs/15/logicaldecoding.html,Chapter 49. Logical Decoding,"PostgreSQL provides infrastructure to stream the modifications performed via SQL to external consumers. This functionality can be used for a variety of purposes, including replication solutions and auditing. Changes are sent out in streams identified by logical replication slots. The format in which those changes are streamed is determined by the output plugin used. An example plugin is provided in the PostgreSQL distribution. Additional plugins can be written to extend the choice of available formats without modifying any core code. Every output plugin has access to each individual new row produced by INSERT and the new row version created by UPDATE . Availability of old row versions for UPDATE and DELETE depends on the configured replica identity (see REPLICA IDENTITY ). Changes can be consumed either using the streaming replication protocol (see Section 55.4 and Section 49.3 ), or by calling functions via SQL (see Section 49.4 ). It is also possible to write additional methods of consuming the output of a replication slot without modifying core code (see Section 49.7 )."
https://www.postgresql.org/docs/15/tablesample-method.html,Chapter 60. Writing a Table Sampling Method,"PostgreSQL 's implementation of the TABLESAMPLE clause supports custom table sampling methods, in addition to the BERNOULLI and SYSTEM methods that are required by the SQL standard. The sampling method determines which rows of the table will be selected when the TABLESAMPLE clause is used. At the SQL level, a table sampling method is represented by a single SQL function, typically implemented in C, having the signature method_name(internal) RETURNS tsm_handler The name of the function is the same method name appearing in the TABLESAMPLE clause. The internal argument is a dummy (always having value zero) that simply serves to prevent this function from being called directly from an SQL command. The result of the function must be a palloc'd struct of type TsmRoutine , which contains pointers to support functions for the sampling method. These support functions are plain C functions and are not visible or callable at the SQL level. The support functions are described in Section 60.1 . In addition to function pointers, the TsmRoutine struct must provide these additional fields: List *parameterTypes This is an OID list containing the data type OIDs of the parameter(s) that will be accepted by the TABLESAMPLE clause when this sampling method is used. For example, for the built-in methods, this list contains a single item with value FLOAT4OID , which represents the sampling percentage. Custom sampling methods can have more or different parameters. bool repeatable_across_queries If true , the sampling method can deliver identical samples across successive queries, if the same parameters and REPEATABLE seed value are supplied each time and the table contents have not changed. When this is false , the REPEATABLE clause is not accepted for use with the sampling method. bool repeatable_across_scans If true , the sampling method can deliver identical samples across successive scans in the same query (assuming unchanging parameters, seed value, and snapshot). When this is false , the planner will not select plans that would require scanning the sampled table more than once, since that might result in inconsistent query output. The TsmRoutine struct type is declared in src/include/access/tsmapi.h , which see for additional details. The table sampling methods included in the standard distribution are good references when trying to write your own. Look into the src/backend/access/tablesample subdirectory of the source tree for the built-in sampling methods, and into the contrib subdirectory for add-on methods."
https://www.postgresql.org/docs/15/managing-databases.html,Chapter 23. Managing Databases,"Every instance of a running PostgreSQL server manages one or more databases. Databases are therefore the topmost hierarchical level for organizing SQL objects ( “ database objects ” ). This chapter describes the properties of databases, and how to create, manage, and destroy them."
https://www.postgresql.org/docs/15/client-interfaces.html,No Title,Part IV. Client Interfaces This part describes the client programming interfaces distributed with PostgreSQL . Each of these chapters can be read independently. Note that there are many other programming interfaces for client programs that are distributed separately and contain their own documentation ( Appendix H lists some of the more popular ones). Readers of this part should be familiar with using SQL commands to manipulate and query the database (see Part II ) and of course with the programming language that the interface uses.
https://www.postgresql.org/docs/15/bookindex.html,No Title,"Index Symbols | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z Symbols $, Positional Parameters $libdir, Dynamic Loading $libdir/plugins, Shared Library Preloading , Description *, Select-List Items .pgpass, The Password File .pg_service.conf, The Connection Service File ::, Type Casts _PG_archive_module_init, Initialization Functions _PG_init, Dynamic Loading _PG_output_plugin_init, Initialization Function A abbrev, Network Address Functions and Operators ABORT, ABORT abs, Mathematical Functions and Operators ACL, Privileges aclcontains, System Information Functions and Operators acldefault, System Information Functions and Operators aclexplode, System Information Functions and Operators aclitem, Privileges aclitemeq, System Information Functions and Operators acos, Mathematical Functions and Operators acosd, Mathematical Functions and Operators acosh, Mathematical Functions and Operators administration tools externally maintained, Administration Tools adminpack, adminpack advisory lock, Advisory Locks age, Date/Time Functions and Operators , System Information Functions and Operators aggregate function, Aggregate Functions , Aggregate Expressions , Aggregate Functions , User-Defined Aggregates built-in, Aggregate Functions invocation, Aggregate Expressions moving aggregate, Moving-Aggregate Mode ordered set, Ordered-Set Aggregates partial aggregation, Partial Aggregation polymorphic, Polymorphic and Variadic Aggregates support functions for, Support Functions for Aggregates user-defined, User-Defined Aggregates variadic, Polymorphic and Variadic Aggregates AIX, AIX installation on, AIX IPC configuration, Shared Memory and Semaphores akeys, hstore Operators and Functions alias, Table and Column Aliases , Column Labels for table name in query, Joins Between Tables in the FROM clause, Table and Column Aliases in the select list, Column Labels ALL, GROUPING SETS, CUBE, and ROLLUP , DISTINCT , Subquery Expressions , Row and Array Comparisons GROUP BY ALL, GROUPING SETS, CUBE, and ROLLUP SELECT ALL, DISTINCT allow_in_place_tablespaces configuration parameter, Developer Options allow_system_table_mods configuration parameter, Developer Options ALTER AGGREGATE, ALTER AGGREGATE ALTER COLLATION, ALTER COLLATION ALTER CONVERSION, ALTER CONVERSION ALTER DATABASE, ALTER DATABASE ALTER DEFAULT PRIVILEGES, ALTER DEFAULT PRIVILEGES ALTER DOMAIN, ALTER DOMAIN ALTER EVENT TRIGGER, ALTER EVENT TRIGGER ALTER EXTENSION, ALTER EXTENSION ALTER FOREIGN DATA WRAPPER, ALTER FOREIGN DATA WRAPPER ALTER FOREIGN TABLE, ALTER FOREIGN TABLE ALTER FUNCTION, ALTER FUNCTION ALTER GROUP, ALTER GROUP ALTER INDEX, ALTER INDEX ALTER LANGUAGE, ALTER LANGUAGE ALTER LARGE OBJECT, ALTER LARGE OBJECT ALTER MATERIALIZED VIEW, ALTER MATERIALIZED VIEW ALTER OPERATOR, ALTER OPERATOR ALTER OPERATOR CLASS, ALTER OPERATOR CLASS ALTER OPERATOR FAMILY, ALTER OPERATOR FAMILY ALTER POLICY, ALTER POLICY ALTER PROCEDURE, ALTER PROCEDURE ALTER PUBLICATION, ALTER PUBLICATION ALTER ROLE, Role Attributes , ALTER ROLE ALTER ROUTINE, ALTER ROUTINE ALTER RULE, ALTER RULE ALTER SCHEMA, ALTER SCHEMA ALTER SEQUENCE, ALTER SEQUENCE ALTER SERVER, ALTER SERVER ALTER STATISTICS, ALTER STATISTICS ALTER SUBSCRIPTION, ALTER SUBSCRIPTION ALTER SYSTEM, ALTER SYSTEM ALTER TABLE, ALTER TABLE ALTER TABLESPACE, ALTER TABLESPACE ALTER TEXT SEARCH CONFIGURATION, ALTER TEXT SEARCH CONFIGURATION ALTER TEXT SEARCH DICTIONARY, ALTER TEXT SEARCH DICTIONARY ALTER TEXT SEARCH PARSER, ALTER TEXT SEARCH PARSER ALTER TEXT SEARCH TEMPLATE, ALTER TEXT SEARCH TEMPLATE ALTER TRIGGER, ALTER TRIGGER ALTER TYPE, ALTER TYPE ALTER USER, ALTER USER ALTER USER MAPPING, ALTER USER MAPPING ALTER VIEW, ALTER VIEW amcheck, amcheck ANALYZE, Updating Planner Statistics , ANALYZE AND (operator), Logical Operators anonymous code blocks, DO any, Pseudo-Types ANY, Aggregate Functions , Subquery Expressions , Row and Array Comparisons anyarray, Pseudo-Types anycompatible, Pseudo-Types anycompatiblearray, Pseudo-Types anycompatiblemultirange, Pseudo-Types anycompatiblenonarray, Pseudo-Types anycompatiblerange, Pseudo-Types anyelement, Pseudo-Types anyenum, Pseudo-Types anymultirange, Pseudo-Types anynonarray, Pseudo-Types anyrange, Pseudo-Types applicable role, applicable_roles application_name configuration parameter, What to Log arbitrary precision numbers, Arbitrary Precision Numbers Archive Modules, Archive Modules archive_cleanup_command configuration parameter, Archive Recovery archive_command configuration parameter, Archiving archive_library configuration parameter, Archiving archive_mode configuration parameter, Archiving archive_timeout configuration parameter, Archiving area, Geometric Functions and Operators armor, armor(), dearmor() array, Arrays accessing, Accessing Arrays constant, Array Value Input constructor, Array Constructors declaration, Declaration of Array Types I/O, Array Input and Output Syntax modifying, Modifying Arrays of user-defined type, User-Defined Types searching, Searching in Arrays ARRAY, Array Constructors , UNION, CASE, and Related Constructs determination of result type, UNION, CASE, and Related Constructs array_agg, Aggregate Functions , Functions array_append, Array Functions and Operators array_cat, Array Functions and Operators array_dims, Array Functions and Operators array_fill, Array Functions and Operators array_length, Array Functions and Operators array_lower, Array Functions and Operators array_ndims, Array Functions and Operators array_nulls configuration parameter, Previous PostgreSQL Versions array_position, Array Functions and Operators array_positions, Array Functions and Operators array_prepend, Array Functions and Operators array_remove, Array Functions and Operators array_replace, Array Functions and Operators array_to_json, Processing and Creating JSON Data array_to_string, Array Functions and Operators array_to_tsvector, Text Search Functions and Operators array_upper, Array Functions and Operators ascii, String Functions and Operators asin, Mathematical Functions and Operators asind, Mathematical Functions and Operators asinh, Mathematical Functions and Operators ASSERT in PL/pgSQL, Checking Assertions assertions in PL/pgSQL, Checking Assertions asynchronous commit, Asynchronous Commit AT TIME ZONE, AT TIME ZONE atan, Mathematical Functions and Operators atan2, Mathematical Functions and Operators atan2d, Mathematical Functions and Operators atand, Mathematical Functions and Operators atanh, Mathematical Functions and Operators authentication_timeout configuration parameter, Authentication auth_delay, auth_delay auth_delay.milliseconds configuration parameter, Configuration Parameters auto-increment (see serial ) autocommit bulk-loading data, Disable Autocommit psql, Variables autosummarize storage parameter, Index Storage Parameters autovacuum configuration parameters, Automatic Vacuuming general information, The Autovacuum Daemon autovacuum configuration parameter, Automatic Vacuuming autovacuum_analyze_scale_factor configuration parameter, Automatic Vacuuming storage parameter, Storage Parameters autovacuum_analyze_threshold configuration parameter, Automatic Vacuuming storage parameter, Storage Parameters autovacuum_enabled storage parameter, Storage Parameters autovacuum_freeze_max_age configuration parameter, Automatic Vacuuming storage parameter, Storage Parameters autovacuum_freeze_min_age storage parameter, Storage Parameters autovacuum_freeze_table_age storage parameter, Storage Parameters autovacuum_max_workers configuration parameter, Automatic Vacuuming autovacuum_multixact_freeze_max_age configuration parameter, Automatic Vacuuming storage parameter, Storage Parameters autovacuum_multixact_freeze_min_age storage parameter, Storage Parameters autovacuum_multixact_freeze_table_age storage parameter, Storage Parameters autovacuum_naptime configuration parameter, Automatic Vacuuming autovacuum_vacuum_cost_delay configuration parameter, Automatic Vacuuming storage parameter, Storage Parameters autovacuum_vacuum_cost_limit configuration parameter, Automatic Vacuuming storage parameter, Storage Parameters autovacuum_vacuum_insert_scale_factor configuration parameter, Automatic Vacuuming storage parameter, Storage Parameters autovacuum_vacuum_insert_threshold configuration parameter, Automatic Vacuuming storage parameter, Storage Parameters autovacuum_vacuum_scale_factor configuration parameter, Automatic Vacuuming storage parameter, Storage Parameters autovacuum_vacuum_threshold configuration parameter, Automatic Vacuuming storage parameter, Storage Parameters autovacuum_work_mem configuration parameter, Memory auto_explain, auto_explain auto_explain.log_analyze configuration parameter, Configuration Parameters auto_explain.log_buffers configuration parameter, Configuration Parameters auto_explain.log_format configuration parameter, Configuration Parameters auto_explain.log_level configuration parameter, Configuration Parameters auto_explain.log_min_duration configuration parameter, Configuration Parameters auto_explain.log_nested_statements configuration parameter, Configuration Parameters auto_explain.log_settings configuration parameter, Configuration Parameters auto_explain.log_timing configuration parameter, Configuration Parameters auto_explain.log_triggers configuration parameter, Configuration Parameters auto_explain.log_verbose configuration parameter, Configuration Parameters auto_explain.log_wal configuration parameter, Configuration Parameters auto_explain.sample_rate configuration parameter, Configuration Parameters avals, hstore Operators and Functions average, Aggregate Functions avg, Aggregate Functions B B-Tree (see index ) backend_flush_after configuration parameter, Asynchronous Behavior Background workers, Background Worker Processes backslash escapes, String Constants with C-Style Escapes backslash_quote configuration parameter, Previous PostgreSQL Versions backtrace_functions configuration parameter, Developer Options backup, Backup Control Functions , Backup and Restore Backup Manifest, Backup Manifest Format base type, The PostgreSQL Type System base64 format, Binary String Functions and Operators basebackup_to_shell, basebackup_to_shell basebackup_to_shell.command configuration parameter, Configuration Parameters basebackup_to_shell.required_role configuration parameter, Configuration Parameters BASE_BACKUP, Streaming Replication Protocol basic_archive, basic_archive basic_archive.archive_directory configuration parameter, Configuration Parameters batch mode, Pipeline Mode in libpq, Pipeline Mode BEGIN, BEGIN BETWEEN, Comparison Functions and Operators BETWEEN SYMMETRIC, Comparison Functions and Operators BGWORKER_BACKEND_​DATABASE_CONNECTION, Background Worker Processes BGWORKER_SHMEM_ACCESS, Background Worker Processes bgwriter_delay configuration parameter, Background Writer bgwriter_flush_after configuration parameter, Background Writer bgwriter_lru_maxpages configuration parameter, Background Writer bgwriter_lru_multiplier configuration parameter, Background Writer bigint, Numeric Constants , Integer Types bigserial, Serial Types binary data, Binary Data Types , Binary String Functions and Operators functions, Binary String Functions and Operators binary string concatenation, Binary String Functions and Operators converting to character string, Binary String Functions and Operators length, Binary String Functions and Operators bison, Requirements bit string, Bit-String Constants , Bit String Types constant, Bit-String Constants data type, Bit String Types length, Bit String Functions and Operators bit strings, Bit String Functions and Operators functions, Bit String Functions and Operators bitmap scan, Combining Multiple Indexes , Planner Method Configuration bit_and, Aggregate Functions bit_count, Binary String Functions and Operators , Bit String Functions and Operators bit_length, String Functions and Operators , Binary String Functions and Operators , Bit String Functions and Operators bit_or, Aggregate Functions bit_xor, Aggregate Functions BLOB (see large object ) block_size configuration parameter, Preset Options bloom, bloom bonjour configuration parameter, Connection Settings bonjour_name configuration parameter, Connection Settings Boolean, Boolean Type data type, Boolean Type operators (see operators, logical) bool_and, Aggregate Functions bool_or, Aggregate Functions booting starting the server during, Starting the Database Server bound_box, Geometric Functions and Operators box, Geometric Functions and Operators box (data type), Boxes BRIN (see index ) brin_desummarize_range, Index Maintenance Functions brin_metapage_info, BRIN Functions brin_page_items, BRIN Functions brin_page_type, BRIN Functions brin_revmap_data, BRIN Functions brin_summarize_new_values, Index Maintenance Functions brin_summarize_range, Index Maintenance Functions broadcast, Network Address Functions and Operators BSD Authentication, BSD Authentication btree_gin, btree_gin btree_gist, btree_gist btrim, String Functions and Operators , Binary String Functions and Operators bt_index_check, Functions bt_index_parent_check, Functions bt_metap, B-Tree Functions bt_page_items, B-Tree Functions bt_page_stats, B-Tree Functions buffering storage parameter, Index Storage Parameters bytea, Binary Data Types bytea_output configuration parameter, Statement Behavior C C, libpq — C Library , ECPG — Embedded SQL in C C++, Using C++ for Extensibility CALL, CALL canceling, Canceling Queries in Progress SQL command, Canceling Queries in Progress cardinality, Array Functions and Operators CASCADE, Dependency Tracking with DROP, Dependency Tracking foreign key action, Foreign Keys Cascading Replication, High Availability, Load Balancing, and Replication CASE, Conditional Expressions , UNION, CASE, and Related Constructs determination of result type, UNION, CASE, and Related Constructs case sensitivity of SQL commands, Identifiers and Key Words cast, CREATE CAST I/O conversion, CREATE CAST cbrt, Mathematical Functions and Operators ceil, Mathematical Functions and Operators ceiling, Mathematical Functions and Operators center, Geometric Functions and Operators Certificate, Certificate Authentication chained transactions, Transaction Management , Parameters , Parameters in PL/pgSQL, Transaction Management char, Character Types character, Character Types character set, Locale and Formatting , Preset Options , Character Set Support character string, String Constants , Character Types concatenation, String Functions and Operators constant, String Constants converting to binary string, Binary String Functions and Operators data types, Character Types length, String Functions and Operators prefix test, String Functions and Operators character varying, Character Types character_length, String Functions and Operators char_length, String Functions and Operators check constraint, Check Constraints CHECK OPTION, CREATE VIEW checkpoint, WAL Configuration CHECKPOINT, CHECKPOINT checkpoint_completion_target configuration parameter, Checkpoints checkpoint_flush_after configuration parameter, Checkpoints checkpoint_timeout configuration parameter, Checkpoints checkpoint_warning configuration parameter, Checkpoints checksums, Data Checksums check_function_bodies configuration parameter, Statement Behavior chr, String Functions and Operators cid, Object Identifier Types cidr, cidr circle, Circles , Geometric Functions and Operators citext, citext client authentication, Client Authentication timeout during, Authentication client_connection_check_interval configuration parameter, Connection Settings client_encoding configuration parameter, Locale and Formatting client_min_messages configuration parameter, Statement Behavior clock_timestamp, Date/Time Functions and Operators CLOSE, CLOSE cluster of databases (see database cluster ) CLUSTER, CLUSTER clusterdb, clusterdb clustering, High Availability, Load Balancing, and Replication cluster_name configuration parameter, Process Title cmax, System Columns cmin, System Columns COALESCE, COALESCE COLLATE, Collation Expressions collation, Collation Support in PL/pgSQL, Collation of PL/pgSQL Variables in SQL functions, SQL Functions with Collations COLLATION FOR, System Information Functions and Operators color, Color Support column, Concepts , Table Basics adding, Adding a Column removing, Removing a Column renaming, Renaming a Column system column, System Columns column data type changing, Changing a Column's Data Type column reference, Column References col_description, System Information Functions and Operators comment, Comments about database objects, System Information Functions and Operators in SQL, Comments COMMENT, COMMENT COMMIT, COMMIT COMMIT PREPARED, COMMIT PREPARED commit_delay configuration parameter, Settings commit_siblings configuration parameter, Settings common table expression (see WITH ) comparison, Comparison Functions and Operators , Subquery Expressions composite type, Row and Array Comparisons operators, Comparison Functions and Operators row constructor, Row and Array Comparisons subquery result row, Subquery Expressions compiling, Building libpq Programs libpq applications, Building libpq Programs composite type, Composite Types , The PostgreSQL Type System comparison, Row and Array Comparisons constant, Constructing Composite Values constructor, Row Constructors computed field, Using Composite Types in Queries compute_query_id configuration parameter, Statistics Monitoring concat, String Functions and Operators concat_ws, String Functions and Operators concurrency, Concurrency Control conditional expression, Conditional Expressions configuration of recovery general settings, Recovery of a standby server, Archive Recovery of the server, Server Configuration of the server functions, Configuration Settings Functions configure, Installation Procedure configure environment variables, configure Environment Variables configure options, configure Options config_file configuration parameter, File Locations conjunction, Logical Operators connectby, Functions Provided , connectby connection service file, The Connection Service File conninfo, Connection Strings constant, Constants constraint, Constraints adding, Adding a Constraint check, Check Constraints exclusion, Exclusion Constraints foreign key, Foreign Keys name, Check Constraints NOT NULL, Not-Null Constraints primary key, Primary Keys removing, Removing a Constraint unique, Unique Constraints constraint exclusion, Partitioning and Constraint Exclusion , Other Planner Options constraint_exclusion configuration parameter, Other Planner Options container type, The PostgreSQL Type System CONTINUE in PL/pgSQL, CONTINUE continuous archiving, Backup and Restore in standby, Continuous Archiving in Standby control file, Extension Files convert, Binary String Functions and Operators convert_from, Binary String Functions and Operators convert_to, Binary String Functions and Operators COPY, Populating a Table With Rows , Functions Associated with the COPY Command , COPY with libpq, Functions Associated with the COPY Command corr, Aggregate Functions correlation, Aggregate Functions in the query planner, Extended Statistics cos, Mathematical Functions and Operators cosd, Mathematical Functions and Operators cosh, Mathematical Functions and Operators cot, Mathematical Functions and Operators cotd, Mathematical Functions and Operators count, Aggregate Functions covariance population, Aggregate Functions sample, Aggregate Functions covar_pop, Aggregate Functions covar_samp, Aggregate Functions covering index, Index-Only Scans and Covering Indexes cpu_index_tuple_cost configuration parameter, Planner Cost Constants cpu_operator_cost configuration parameter, Planner Cost Constants cpu_tuple_cost configuration parameter, Planner Cost Constants CREATE ACCESS METHOD, CREATE ACCESS METHOD CREATE AGGREGATE, CREATE AGGREGATE CREATE CAST, CREATE CAST CREATE COLLATION, CREATE COLLATION CREATE CONVERSION, CREATE CONVERSION CREATE DATABASE, Creating a Database , CREATE DATABASE CREATE DOMAIN, CREATE DOMAIN CREATE EVENT TRIGGER, CREATE EVENT TRIGGER CREATE EXTENSION, CREATE EXTENSION CREATE FOREIGN DATA WRAPPER, CREATE FOREIGN DATA WRAPPER CREATE FOREIGN TABLE, CREATE FOREIGN TABLE CREATE FUNCTION, CREATE FUNCTION CREATE GROUP, CREATE GROUP CREATE INDEX, CREATE INDEX CREATE LANGUAGE, CREATE LANGUAGE CREATE MATERIALIZED VIEW, CREATE MATERIALIZED VIEW CREATE OPERATOR, CREATE OPERATOR CREATE OPERATOR CLASS, CREATE OPERATOR CLASS CREATE OPERATOR FAMILY, CREATE OPERATOR FAMILY CREATE POLICY, CREATE POLICY CREATE PROCEDURE, CREATE PROCEDURE CREATE PUBLICATION, CREATE PUBLICATION CREATE ROLE, Database Roles , CREATE ROLE CREATE RULE, CREATE RULE CREATE SCHEMA, CREATE SCHEMA CREATE SEQUENCE, CREATE SEQUENCE CREATE SERVER, CREATE SERVER CREATE STATISTICS, CREATE STATISTICS CREATE SUBSCRIPTION, CREATE SUBSCRIPTION CREATE TABLE, Creating a New Table , CREATE TABLE CREATE TABLE AS, CREATE TABLE AS CREATE TABLESPACE, Tablespaces , CREATE TABLESPACE CREATE TEXT SEARCH CONFIGURATION, CREATE TEXT SEARCH CONFIGURATION CREATE TEXT SEARCH DICTIONARY, CREATE TEXT SEARCH DICTIONARY CREATE TEXT SEARCH PARSER, CREATE TEXT SEARCH PARSER CREATE TEXT SEARCH TEMPLATE, CREATE TEXT SEARCH TEMPLATE CREATE TRANSFORM, CREATE TRANSFORM CREATE TRIGGER, CREATE TRIGGER CREATE TYPE, CREATE TYPE CREATE USER, CREATE USER CREATE USER MAPPING, CREATE USER MAPPING CREATE VIEW, CREATE VIEW createdb, Creating a Database , Creating a Database , createdb createuser, Database Roles , createuser CREATE_REPLICATION_SLOT, Streaming Replication Protocol cross compilation, Build Process Details cross join, Joined Tables crosstab, crosstab(text) , crosstabN(text) , crosstab(text, text) crypt, crypt() cstring, Pseudo-Types CSV (Comma-Separated Values) format in psql, Meta-Commands ctid, System Columns CTID, View Rules in Non-SELECT Statements CUBE, GROUPING SETS, CUBE, and ROLLUP cube (extension), cube cume_dist, Window Functions hypothetical, Aggregate Functions current_catalog, System Information Functions and Operators current_database, System Information Functions and Operators current_date, Date/Time Functions and Operators current_logfiles and the log_destination configuration parameter, Where to Log and the pg_current_logfile function, System Information Functions and Operators current_query, System Information Functions and Operators current_role, System Information Functions and Operators current_schema, System Information Functions and Operators current_schemas, System Information Functions and Operators current_setting, Configuration Settings Functions current_time, Date/Time Functions and Operators current_timestamp, Date/Time Functions and Operators current_user, System Information Functions and Operators currval, Sequence Manipulation Functions cursor, Cursors , CLOSE , DECLARE , EXPLAIN , FETCH , MOVE CLOSE, CLOSE DECLARE, DECLARE FETCH, FETCH in PL/pgSQL, Cursors MOVE, MOVE showing the query plan, EXPLAIN cursor_tuple_fraction configuration parameter, Other Planner Options custom scan provider, Writing a Custom Scan Provider handler for, Writing a Custom Scan Provider Cygwin, Cygwin installation on, Cygwin D data area (see database cluster ) data partitioning, High Availability, Load Balancing, and Replication data type, Data Types , Numeric Types , Enumerated Types , Domain Types , Type Conversion , The PostgreSQL Type System , The PostgreSQL Type System , The PostgreSQL Type System , Polymorphic Types , Base Types in C-Language Functions , User-Defined Types base, The PostgreSQL Type System category, Overview composite, The PostgreSQL Type System constant, Constants of Other Types container, The PostgreSQL Type System conversion, Type Conversion domain, Domain Types enumerated (enum), Enumerated Types internal organization, Base Types in C-Language Functions numeric, Numeric Types polymorphic, Polymorphic Types type cast, Type Casts user-defined, User-Defined Types database, Creating a Database , Managing Databases creating, Creating a Database privilege to create, Role Attributes database activity, Monitoring Database Activity monitoring, Monitoring Database Activity database cluster, Concepts , Creating a Database Cluster data_checksums configuration parameter, Preset Options data_directory configuration parameter, File Locations data_directory_mode configuration parameter, Preset Options data_sync_retry configuration parameter, Error Handling date, Date/Time Types , Dates constants, Special Values current, Current Date/Time output format, Date/Time Output (see also formatting ) DateStyle configuration parameter, Locale and Formatting date_bin, date_bin date_part, Date/Time Functions and Operators , EXTRACT, date_part date_trunc, Date/Time Functions and Operators , date_trunc dblink, dblink , dblink dblink_build_sql_delete, dblink_build_sql_delete dblink_build_sql_insert, dblink_build_sql_insert dblink_build_sql_update, dblink_build_sql_update dblink_cancel_query, dblink_cancel_query dblink_close, dblink_close dblink_connect, dblink_connect dblink_connect_u, dblink_connect_u dblink_disconnect, dblink_disconnect dblink_error_message, dblink_error_message dblink_exec, dblink_exec dblink_fetch, dblink_fetch dblink_get_connections, dblink_get_connections dblink_get_notify, dblink_get_notify dblink_get_pkey, dblink_get_pkey dblink_get_result, dblink_get_result dblink_is_busy, dblink_is_busy dblink_open, dblink_open dblink_send_query, dblink_send_query db_user_namespace configuration parameter, Authentication deadlock, Deadlocks timeout during, Lock Management deadlock_timeout configuration parameter, Lock Management DEALLOCATE, DEALLOCATE dearmor, armor(), dearmor() debug_assertions configuration parameter, Preset Options debug_deadlocks configuration parameter, Developer Options debug_discard_caches configuration parameter, Developer Options debug_pretty_print configuration parameter, What to Log debug_print_parse configuration parameter, What to Log debug_print_plan configuration parameter, What to Log debug_print_rewritten configuration parameter, What to Log decimal (see numeric ) DECLARE, DECLARE decode, Binary String Functions and Operators decode_bytea in PL/Perl, Utility Functions in PL/Perl decrypt, Raw Encryption Functions decrypt_iv, Raw Encryption Functions deduplicate_items storage parameter, Index Storage Parameters default value, Default Values changing, Changing a Column's Default Value default-roles, Default Roles Renamed to Predefined Roles default_statistics_target configuration parameter, Other Planner Options default_tablespace configuration parameter, Statement Behavior default_table_access_method configuration parameter, Statement Behavior default_text_search_config configuration parameter, Locale and Formatting default_toast_compression configuration parameter, Statement Behavior default_transaction_deferrable configuration parameter, Statement Behavior default_transaction_isolation configuration parameter, Statement Behavior default_transaction_read_only configuration parameter, Statement Behavior deferrable transaction, Statement Behavior setting, SET TRANSACTION setting default, Statement Behavior defined, hstore Operators and Functions degrees, Mathematical Functions and Operators delay, Delaying Execution DELETE, Deletions , Deleting Data , Returning Data from Modified Rows , DELETE RETURNING, Returning Data from Modified Rows delete, hstore Operators and Functions deleting, Deleting Data dense_rank, Window Functions hypothetical, Aggregate Functions diagonal, Geometric Functions and Operators diameter, Geometric Functions and Operators dict_int, dict_int dict_xsyn, dict_xsyn difference, Soundex digest, digest() dirty read, Transaction Isolation DISCARD, DISCARD disjunction, Logical Operators disk drive, WAL Internals disk space, Recovering Disk Space disk usage, Determining Disk Usage DISTINCT, Querying a Table , GROUPING SETS, CUBE, and ROLLUP , DISTINCT GROUP BY DISTINCT, GROUPING SETS, CUBE, and ROLLUP SELECT DISTINCT, DISTINCT div, Mathematical Functions and Operators dmetaphone, Double Metaphone dmetaphone_alt, Double Metaphone DO, DO document, What Is a Document? text search, What Is a Document? dollar quoting, Dollar-Quoted String Constants domain, Domain Types double precision, Floating-Point Types DROP ACCESS METHOD, DROP ACCESS METHOD DROP AGGREGATE, DROP AGGREGATE DROP CAST, DROP CAST DROP COLLATION, DROP COLLATION DROP CONVERSION, DROP CONVERSION DROP DATABASE, Destroying a Database , DROP DATABASE DROP DOMAIN, DROP DOMAIN DROP EVENT TRIGGER, DROP EVENT TRIGGER DROP EXTENSION, DROP EXTENSION DROP FOREIGN DATA WRAPPER, DROP FOREIGN DATA WRAPPER DROP FOREIGN TABLE, DROP FOREIGN TABLE DROP FUNCTION, DROP FUNCTION DROP GROUP, DROP GROUP DROP INDEX, DROP INDEX DROP LANGUAGE, DROP LANGUAGE DROP MATERIALIZED VIEW, DROP MATERIALIZED VIEW DROP OPERATOR, DROP OPERATOR DROP OPERATOR CLASS, DROP OPERATOR CLASS DROP OPERATOR FAMILY, DROP OPERATOR FAMILY DROP OWNED, DROP OWNED DROP POLICY, DROP POLICY DROP PROCEDURE, DROP PROCEDURE DROP PUBLICATION, DROP PUBLICATION DROP ROLE, Database Roles , DROP ROLE DROP ROUTINE, DROP ROUTINE DROP RULE, DROP RULE DROP SCHEMA, DROP SCHEMA DROP SEQUENCE, DROP SEQUENCE DROP SERVER, DROP SERVER DROP STATISTICS, DROP STATISTICS DROP SUBSCRIPTION, DROP SUBSCRIPTION DROP TABLE, Creating a New Table , DROP TABLE DROP TABLESPACE, DROP TABLESPACE DROP TEXT SEARCH CONFIGURATION, DROP TEXT SEARCH CONFIGURATION DROP TEXT SEARCH DICTIONARY, DROP TEXT SEARCH DICTIONARY DROP TEXT SEARCH PARSER, DROP TEXT SEARCH PARSER DROP TEXT SEARCH TEMPLATE, DROP TEXT SEARCH TEMPLATE DROP TRANSFORM, DROP TRANSFORM DROP TRIGGER, DROP TRIGGER DROP TYPE, DROP TYPE DROP USER, DROP USER DROP USER MAPPING, DROP USER MAPPING DROP VIEW, DROP VIEW dropdb, Destroying a Database , dropdb dropuser, Database Roles , dropuser DROP_REPLICATION_SLOT, Streaming Replication Protocol DTD, Creating XML Values DTrace, Developer Options , Dynamic Tracing duplicate, Querying a Table duplicates, DISTINCT dynamic loading, Other Defaults , Dynamic Loading dynamic_library_path, Dynamic Loading dynamic_library_path configuration parameter, Other Defaults dynamic_shared_memory_type configuration parameter, Memory E each, hstore Operators and Functions earth, Cube-Based Earth Distances earthdistance, earthdistance earth_box, Cube-Based Earth Distances earth_distance, Cube-Based Earth Distances ECPG, ECPG — Embedded SQL in C ecpg, ecpg effective_cache_size configuration parameter, Planner Cost Constants effective_io_concurrency configuration parameter, Asynchronous Behavior elog, Reporting Errors Within the Server in PL/Perl, Utility Functions in PL/Perl in PL/Python, Utility Functions in PL/Tcl, Database Access from PL/Tcl embedded SQL, ECPG — Embedded SQL in C in C, ECPG — Embedded SQL in C enabled role, enabled_roles enable_async_append configuration parameter, Planner Method Configuration enable_bitmapscan configuration parameter, Planner Method Configuration enable_gathermerge configuration parameter, Planner Method Configuration enable_hashagg configuration parameter, Planner Method Configuration enable_hashjoin configuration parameter, Planner Method Configuration enable_incremental_sort configuration parameter, Planner Method Configuration enable_indexonlyscan configuration parameter, Planner Method Configuration enable_indexscan configuration parameter, Planner Method Configuration enable_material configuration parameter, Planner Method Configuration enable_memoize configuration parameter, Planner Method Configuration enable_mergejoin configuration parameter, Planner Method Configuration enable_nestloop configuration parameter, Planner Method Configuration enable_parallel_append configuration parameter, Planner Method Configuration enable_parallel_hash configuration parameter, Planner Method Configuration enable_partitionwise_aggregate configuration parameter, Planner Method Configuration enable_partitionwise_join configuration parameter, Planner Method Configuration enable_partition_pruning configuration parameter, Planner Method Configuration enable_seqscan configuration parameter, Planner Method Configuration enable_sort configuration parameter, Planner Method Configuration enable_tidscan configuration parameter, Planner Method Configuration encode, Binary String Functions and Operators encode_array_constructor in PL/Perl, Utility Functions in PL/Perl encode_array_literal in PL/Perl, Utility Functions in PL/Perl encode_bytea in PL/Perl, Utility Functions in PL/Perl encode_typed_literal in PL/Perl, Utility Functions in PL/Perl encrypt, Raw Encryption Functions encryption, Encryption Options , pgcrypto for specific columns, pgcrypto encrypt_iv, Raw Encryption Functions END, END enumerated types, Enumerated Types enum_first, Enum Support Functions enum_last, Enum Support Functions enum_range, Enum Support Functions environment variable, Environment Variables ephemeral named relation registering with SPI, SPI_register_relation , SPI_register_trigger_data unregistering from SPI, SPI_unregister_relation ereport, Reporting Errors Within the Server error codes, PostgreSQL Error Codes libpq, Main Functions list of, PostgreSQL Error Codes error message, Connection Status Functions escape format, Binary String Functions and Operators escape string syntax, String Constants with C-Style Escapes escape_string_warning configuration parameter, Previous PostgreSQL Versions escaping strings, Escaping Strings for Inclusion in SQL Commands in libpq, Escaping Strings for Inclusion in SQL Commands event log, Registering Event Log on Windows event log, Registering Event Log on Windows event trigger, Event Triggers , Writing Event Trigger Functions in C in C, Writing Event Trigger Functions in C in PL/Tcl, Event Trigger Functions in PL/Tcl event_source configuration parameter, Where to Log event_trigger, Pseudo-Types every, Aggregate Functions EXCEPT, Combining Queries (UNION, INTERSECT, EXCEPT) exceptions in PL/pgSQL, Trapping Errors in PL/Tcl, Error Handling in PL/Tcl exclusion constraint, Exclusion Constraints EXECUTE, EXECUTE exist, hstore Operators and Functions EXISTS, Subquery Expressions EXIT in PL/pgSQL, EXIT exit_on_error configuration parameter, Error Handling exp, Mathematical Functions and Operators EXPLAIN, Using EXPLAIN , EXPLAIN expression, Value Expressions order of evaluation, Expression Evaluation Rules syntax, Value Expressions extending SQL, Extending SQL extension, Packaging Related Objects into an Extension externally maintained, Extensions external_pid_file configuration parameter, File Locations extract, Date/Time Functions and Operators , EXTRACT, date_part extra_float_digits configuration parameter, Locale and Formatting F factorial, Mathematical Functions and Operators failover, High Availability, Load Balancing, and Replication false, Boolean Type family, Network Address Functions and Operators fast path, The Fast-Path Interface fastupdate storage parameter, Index Storage Parameters fdw_handler, Pseudo-Types FETCH, FETCH field computed, Using Composite Types in Queries field selection, Field Selection file system mount points, Use of Secondary File Systems file_fdw, file_fdw fillfactor storage parameter, Index Storage Parameters , Storage Parameters FILTER, Aggregate Expressions first_value, Window Functions flex, Requirements float4 (see real ) float8 (see double precision ) floating point, Floating-Point Types floating-point display, Locale and Formatting floor, Mathematical Functions and Operators force_parallel_mode configuration parameter, Developer Options foreign data, Foreign Data foreign data wrapper, Writing a Foreign Data Wrapper handler for, Writing a Foreign Data Wrapper foreign key, Foreign Keys , Foreign Keys self-referential, Foreign Keys foreign table, Foreign Data format, String Functions and Operators , format use in PL/pgSQL, Executing Dynamic Commands formatting, Data Type Formatting Functions format_type, System Information Functions and Operators Free Space Map, Free Space Map FreeBSD IPC configuration, Shared Memory and Semaphores shared library, Compiling and Linking Dynamically-Loaded Functions start script, Starting the Database Server from_collapse_limit configuration parameter, Other Planner Options FSM (see Free Space Map ) fsm_page_contents, General Functions fsync configuration parameter, Settings full text search, Text Search Types , Text Search Types , Full Text Search data types, Text Search Types functions and operators, Text Search Types full_page_writes configuration parameter, Settings function, Table Functions , Functions and Operators , Statistics Information Functions , Functions , Polymorphic Types , User-Defined Functions , Query Language (SQL) Functions , Internal Functions , C-Language Functions default values for arguments, SQL Functions with Default Values for Arguments in the FROM clause, Table Functions internal, Internal Functions invocation, Function Calls mixed notation, Using Mixed Notation named argument, Arguments for SQL Functions named notation, Using Named Notation output parameter, SQL Functions with Output Parameters polymorphic, Polymorphic Types positional notation, Using Positional Notation RETURNS TABLE, SQL Functions Returning TABLE statistics, Statistics Information Functions type resolution in an invocation, Functions user-defined, User-Defined Functions , Query Language (SQL) Functions , C-Language Functions in C, C-Language Functions in SQL, Query Language (SQL) Functions variadic, SQL Functions with Variable Numbers of Arguments with SETOF, SQL Functions Returning Sets functional dependency, The GROUP BY and HAVING Clauses fuzzystrmatch, fuzzystrmatch G gcd, Mathematical Functions and Operators gc_to_sec, Cube-Based Earth Distances generated column, Generated Columns , Parameters , Parameters in triggers, Overview of Trigger Behavior generate_series, Set Returning Functions generate_subscripts, Set Returning Functions genetic query optimization, Genetic Query Optimizer gen_random_bytes, Random-Data Functions gen_random_uuid, UUID Functions , Random-Data Functions gen_salt, gen_salt() GEQO (see genetic query optimization ) geqo configuration parameter, Genetic Query Optimizer geqo_effort configuration parameter, Genetic Query Optimizer geqo_generations configuration parameter, Genetic Query Optimizer geqo_pool_size configuration parameter, Genetic Query Optimizer geqo_seed configuration parameter, Genetic Query Optimizer geqo_selection_bias configuration parameter, Genetic Query Optimizer geqo_threshold configuration parameter, Genetic Query Optimizer get_bit, Binary String Functions and Operators , Bit String Functions and Operators get_byte, Binary String Functions and Operators get_current_ts_config, Text Search Functions and Operators get_raw_page, General Functions GIN (see index ) gin_clean_pending_list, Index Maintenance Functions gin_fuzzy_search_limit configuration parameter, Other Defaults gin_leafpage_items, GIN Functions gin_metapage_info, GIN Functions gin_page_opaque_info, GIN Functions gin_pending_list_limit configuration parameter, Statement Behavior storage parameter, Index Storage Parameters GiST (see index ) gist_page_items, GiST Functions gist_page_items_bytea, GiST Functions gist_page_opaque_info, GiST Functions global data, Global Data in PL/Tcl in PL/Python, Sharing Data in PL/Tcl, Global Data in PL/Tcl GRANT, Privileges , GRANT GREATEST, GREATEST and LEAST , UNION, CASE, and Related Constructs determination of result type, UNION, CASE, and Related Constructs Gregorian calendar, History of Units GROUP BY, Aggregate Functions , The GROUP BY and HAVING Clauses grouping, The GROUP BY and HAVING Clauses GROUPING, Aggregate Functions GROUPING SETS, GROUPING SETS, CUBE, and ROLLUP gssapi, Secure TCP/IP Connections with GSSAPI Encryption GSSAPI, GSSAPI Authentication with libpq, Parameter Key Words GUID, UUID Type H hash (see index ) hash_bitmap_info, Hash Functions hash_mem_multiplier configuration parameter, Memory hash_metapage_info, Hash Functions hash_page_items, Hash Functions hash_page_stats, Hash Functions hash_page_type, Hash Functions has_any_column_privilege, System Information Functions and Operators has_column_privilege, System Information Functions and Operators has_database_privilege, System Information Functions and Operators has_foreign_data_wrapper_privilege, System Information Functions and Operators has_function_privilege, System Information Functions and Operators has_language_privilege, System Information Functions and Operators has_parameter_privilege, System Information Functions and Operators has_schema_privilege, System Information Functions and Operators has_sequence_privilege, System Information Functions and Operators has_server_privilege, System Information Functions and Operators has_tablespace_privilege, System Information Functions and Operators has_table_privilege, System Information Functions and Operators has_type_privilege, System Information Functions and Operators HAVING, Aggregate Functions , The GROUP BY and HAVING Clauses hba_file configuration parameter, File Locations heap_page_items, Heap Functions heap_page_item_attrs, Heap Functions heap_tuple_infomask_flags, Heap Functions height, Geometric Functions and Operators hex format, Binary String Functions and Operators hierarchical database, Concepts high availability, High Availability, Load Balancing, and Replication history, A Brief History of PostgreSQL of PostgreSQL, A Brief History of PostgreSQL hmac, hmac() host, Network Address Functions and Operators host name, Parameter Key Words hostmask, Network Address Functions and Operators hot standby, High Availability, Load Balancing, and Replication hot_standby configuration parameter, Standby Servers hot_standby_feedback configuration parameter, Standby Servers HP-UX IPC configuration, Shared Memory and Semaphores shared library, Compiling and Linking Dynamically-Loaded Functions hstore, hstore , hstore Operators and Functions hstore_to_array, hstore Operators and Functions hstore_to_json, hstore Operators and Functions hstore_to_jsonb, hstore Operators and Functions hstore_to_jsonb_loose, hstore Operators and Functions hstore_to_json_loose, hstore Operators and Functions hstore_to_matrix, hstore Operators and Functions huge_pages configuration parameter, Memory huge_page_size configuration parameter, Memory hypothetical-set aggregate built-in, Aggregate Functions I icount, intarray Functions and Operators ICU, PostgreSQL Features , Locale Providers , Managing Collations , Parameters , Parameters ident, Ident Authentication identifier, Identifiers and Key Words length, Identifiers and Key Words syntax of, Identifiers and Key Words IDENTIFY_SYSTEM, Streaming Replication Protocol ident_file configuration parameter, File Locations idle_in_transaction_session_timeout configuration parameter, Statement Behavior idle_session_timeout configuration parameter, Statement Behavior idx, intarray Functions and Operators IFNULL, COALESCE ignore_checksum_failure configuration parameter, Developer Options ignore_invalid_pages configuration parameter, Developer Options ignore_system_indexes configuration parameter, Developer Options IMMUTABLE, Function Volatility Categories IMPORT FOREIGN SCHEMA, IMPORT FOREIGN SCHEMA IN, Subquery Expressions , Row and Array Comparisons INCLUDE in index definitions, Index-Only Scans and Covering Indexes include in configuration file, Managing Configuration File Contents include_dir in configuration file, Managing Configuration File Contents include_if_exists in configuration file, Managing Configuration File Contents index, Indexes , Multicolumn Indexes , Indexes and ORDER BY , Combining Multiple Indexes , Unique Indexes , Indexes on Expressions , Partial Indexes , Index-Only Scans and Covering Indexes , Index-Only Scans and Covering Indexes , Examining Index Usage , Preferred Index Types for Text Search , Preferred Index Types for Text Search , Locking and Indexes , Interfacing Extensions to Indexes , Building Indexes Concurrently , Rebuilding Indexes Concurrently , Operators and Functions and ORDER BY, Indexes and ORDER BY B-Tree, B-Tree , B-Tree Indexes BRIN, BRIN , BRIN Indexes building concurrently, Building Indexes Concurrently combining multiple indexes, Combining Multiple Indexes covering, Index-Only Scans and Covering Indexes examining usage, Examining Index Usage on expressions, Indexes on Expressions for user-defined data type, Interfacing Extensions to Indexes GIN, GIN , Preferred Index Types for Text Search , GIN Indexes text search, Preferred Index Types for Text Search GiST, GiST , Preferred Index Types for Text Search , GiST Indexes text search, Preferred Index Types for Text Search hash, Hash Hash, Hash Indexes index-only scans, Index-Only Scans and Covering Indexes locks, Locking and Indexes multicolumn, Multicolumn Indexes partial, Partial Indexes rebuilding concurrently, Rebuilding Indexes Concurrently SP-GiST, SP-GiST , SP-GiST Indexes unique, Unique Indexes Index Access Method, Index Access Method Interface Definition index scan, Planner Method Configuration index-only scan, Index-Only Scans and Covering Indexes indexam Index Access Method, Index Access Method Interface Definition index_am_handler, Pseudo-Types inet (data type), inet inet_client_addr, System Information Functions and Operators inet_client_port, System Information Functions and Operators inet_merge, Network Address Functions and Operators inet_same_family, Network Address Functions and Operators inet_server_addr, System Information Functions and Operators inet_server_port, System Information Functions and Operators infinity floating point, Floating-Point Types numeric (data type), Arbitrary Precision Numbers information schema, The Information Schema inheritance, Inheritance , Inheritance initcap, String Functions and Operators initdb, Creating a Database Cluster , initdb Initialization Fork, The Initialization Fork input function, User-Defined Types INSERT, Populating a Table With Rows , Inserting Data , Returning Data from Modified Rows , INSERT RETURNING, Returning Data from Modified Rows inserting, Inserting Data installation, Installation from Source Code binaries, Installation from Binaries on Windows, Installation from Source Code on Windows instr function, Appendix int2 (see smallint ) int4 (see integer ) int8 (see bigint ) intagg, intagg intarray, intarray integer, Numeric Constants , Integer Types integer_datetimes configuration parameter, Preset Options interfaces externally maintained, Client Interfaces internal, Pseudo-Types INTERSECT, Combining Queries (UNION, INTERSECT, EXCEPT) interval, Date/Time Types , Interval Input output format, Interval Output (see also formatting ) IntervalStyle configuration parameter, Locale and Formatting intset, intarray Functions and Operators int_array_aggregate, Functions int_array_enum, Functions inverse distribution, Aggregate Functions in_hot_standby configuration parameter, Preset Options in_range support functions, B-Tree Support Functions IS DISTINCT FROM, Comparison Functions and Operators , Row and Array Comparisons IS DOCUMENT, IS DOCUMENT IS FALSE, Comparison Functions and Operators IS NOT DISTINCT FROM, Comparison Functions and Operators , Row and Array Comparisons IS NOT DOCUMENT, IS NOT DOCUMENT IS NOT FALSE, Comparison Functions and Operators IS NOT NULL, Comparison Functions and Operators IS NOT TRUE, Comparison Functions and Operators IS NOT UNKNOWN, Comparison Functions and Operators IS NULL, Comparison Functions and Operators , Platform and Client Compatibility IS TRUE, Comparison Functions and Operators IS UNKNOWN, Comparison Functions and Operators isclosed, Geometric Functions and Operators isempty, Range/Multirange Functions and Operators isfinite, Date/Time Functions and Operators isn, isn ISNULL, Comparison Functions and Operators isn_weak, Functions and Operators isopen, Geometric Functions and Operators is_array_ref in PL/Perl, Utility Functions in PL/Perl is_valid, Functions and Operators J JIT, Just-in-Time Compilation (JIT) jit configuration parameter, Other Planner Options jit_above_cost configuration parameter, Planner Cost Constants jit_debugging_support configuration parameter, Developer Options jit_dump_bitcode configuration parameter, Developer Options jit_expressions configuration parameter, Developer Options jit_inline_above_cost configuration parameter, Planner Cost Constants jit_optimize_above_cost configuration parameter, Planner Cost Constants jit_profiling_support configuration parameter, Developer Options jit_provider configuration parameter, Shared Library Preloading jit_tuple_deforming configuration parameter, Developer Options join, Joins Between Tables , Joined Tables , Controlling the Planner with Explicit JOIN Clauses controlling the order, Controlling the Planner with Explicit JOIN Clauses cross, Joined Tables left, Joined Tables natural, Joined Tables outer, Joins Between Tables , Joined Tables right, Joined Tables self, Joins Between Tables join_collapse_limit configuration parameter, Other Planner Options JSON, JSON Types , JSON Functions and Operators functions and operators, JSON Functions and Operators JSONB, JSON Types jsonb containment, jsonb Containment and Existence existence, jsonb Containment and Existence indexes on, jsonb Indexing jsonb_agg, Aggregate Functions jsonb_array_elements, Processing and Creating JSON Data jsonb_array_elements_text, Processing and Creating JSON Data jsonb_array_length, Processing and Creating JSON Data jsonb_build_array, Processing and Creating JSON Data jsonb_build_object, Processing and Creating JSON Data jsonb_each, Processing and Creating JSON Data jsonb_each_text, Processing and Creating JSON Data jsonb_extract_path, Processing and Creating JSON Data jsonb_extract_path_text, Processing and Creating JSON Data jsonb_insert, Processing and Creating JSON Data jsonb_object, Processing and Creating JSON Data jsonb_object_agg, Aggregate Functions jsonb_object_keys, Processing and Creating JSON Data jsonb_path_exists, Processing and Creating JSON Data jsonb_path_exists_tz, Processing and Creating JSON Data jsonb_path_match, Processing and Creating JSON Data jsonb_path_match_tz, Processing and Creating JSON Data jsonb_path_query, Processing and Creating JSON Data jsonb_path_query_array, Processing and Creating JSON Data jsonb_path_query_array_tz, Processing and Creating JSON Data jsonb_path_query_first, Processing and Creating JSON Data jsonb_path_query_first_tz, Processing and Creating JSON Data jsonb_path_query_tz, Processing and Creating JSON Data jsonb_populate_record, Processing and Creating JSON Data jsonb_populate_recordset, Processing and Creating JSON Data jsonb_pretty, Processing and Creating JSON Data jsonb_set, Processing and Creating JSON Data jsonb_set_lax, Processing and Creating JSON Data jsonb_strip_nulls, Processing and Creating JSON Data jsonb_to_record, Processing and Creating JSON Data jsonb_to_recordset, Processing and Creating JSON Data jsonb_to_tsvector, Text Search Functions and Operators jsonb_typeof, Processing and Creating JSON Data jsonpath, jsonpath Type json_agg, Aggregate Functions json_array_elements, Processing and Creating JSON Data json_array_elements_text, Processing and Creating JSON Data json_array_length, Processing and Creating JSON Data json_build_array, Processing and Creating JSON Data json_build_object, Processing and Creating JSON Data json_each, Processing and Creating JSON Data json_each_text, Processing and Creating JSON Data json_extract_path, Processing and Creating JSON Data json_extract_path_text, Processing and Creating JSON Data json_object, Processing and Creating JSON Data json_object_agg, Aggregate Functions json_object_keys, Processing and Creating JSON Data json_populate_record, Processing and Creating JSON Data json_populate_recordset, Processing and Creating JSON Data json_strip_nulls, Processing and Creating JSON Data json_to_record, Processing and Creating JSON Data json_to_recordset, Processing and Creating JSON Data json_to_tsvector, Text Search Functions and Operators json_typeof, Processing and Creating JSON Data Julian date, Julian Dates Just-In-Time compilation (see JIT ) justify_days, Date/Time Functions and Operators justify_hours, Date/Time Functions and Operators justify_interval, Date/Time Functions and Operators K key word, Identifiers and Key Words , SQL Key Words list of, SQL Key Words syntax of, Identifiers and Key Words krb_caseins_users configuration parameter, Authentication krb_server_keyfile configuration parameter, Authentication L label (see alias ) lag, Window Functions language_handler, Pseudo-Types large object, Large Objects lastval, Sequence Manipulation Functions last_value, Window Functions LATERAL, LATERAL Subqueries in the FROM clause, LATERAL Subqueries latitude, Cube-Based Earth Distances lca, Operators and Functions lcm, Mathematical Functions and Operators lc_collate configuration parameter, Preset Options lc_ctype configuration parameter, Preset Options lc_messages configuration parameter, Locale and Formatting lc_monetary configuration parameter, Locale and Formatting lc_numeric configuration parameter, Locale and Formatting lc_time configuration parameter, Locale and Formatting LDAP, PostgreSQL Features , LDAP Authentication LDAP connection parameter lookup, LDAP Lookup of Connection Parameters ldconfig, Shared Libraries lead, Window Functions LEAST, GREATEST and LEAST , UNION, CASE, and Related Constructs determination of result type, UNION, CASE, and Related Constructs left, String Functions and Operators left join, Joined Tables length, String Functions and Operators , Binary String Functions and Operators , Bit String Functions and Operators , Geometric Functions and Operators , Text Search Functions and Operators of a binary string (see binary strings, length) of a character string (see character string, length ) length(tsvector), Manipulating Documents levenshtein, Levenshtein levenshtein_less_equal, Levenshtein lex, Requirements libedit, Requirements in psql, Command-Line Editing libperl, Requirements libpq, libpq — C Library , Pipeline Mode , Retrieving Query Results Row-by-Row pipeline mode, Pipeline Mode single-row mode, Retrieving Query Results Row-by-Row libpq-fe.h, libpq — C Library , Connection Status Functions libpq-int.h, Connection Status Functions libpython, Requirements library initialization function, Dynamic Loading LIKE, LIKE and locales, Behavior LIKE_REGEX, Differences from SQL Standard and XQuery , SQL/JSON Regular Expressions in SQL/JSON, SQL/JSON Regular Expressions LIMIT, LIMIT and OFFSET line, Lines , Geometric Functions and Operators line segment, Line Segments linear regression, Aggregate Functions Linux IPC configuration, Shared Memory and Semaphores shared library, Compiling and Linking Dynamically-Loaded Functions start script, Starting the Database Server LISTEN, LISTEN listen_addresses configuration parameter, Connection Settings llvm-config, PostgreSQL Features ll_to_earth, Cube-Based Earth Distances ln, Mathematical Functions and Operators lo, lo LOAD, LOAD load balancing, High Availability, Load Balancing, and Replication locale, Creating a Database Cluster , Locale Support localtime, Date/Time Functions and Operators localtimestamp, Date/Time Functions and Operators local_preload_libraries configuration parameter, Shared Library Preloading lock, Explicit Locking , Advisory Locks , Viewing Locks advisory, Advisory Locks monitoring, Viewing Locks LOCK, Table-Level Locks , LOCK lock_timeout configuration parameter, Statement Behavior log, Mathematical Functions and Operators log shipping, High Availability, Load Balancing, and Replication log10, Mathematical Functions and Operators Logging current_logfiles file and the pg_current_logfile function, System Information Functions and Operators pg_current_logfile function, System Information Functions and Operators logging_collector configuration parameter, Where to Log Logical Decoding, Logical Decoding , Logical Decoding logical_decoding_work_mem configuration parameter, Memory login privilege, Role Attributes log_autovacuum_min_duration configuration parameter, What to Log storage parameter, Storage Parameters log_btree_build_stats configuration parameter, Developer Options log_checkpoints configuration parameter, What to Log log_connections configuration parameter, What to Log log_destination configuration parameter, Where to Log log_directory configuration parameter, Where to Log log_disconnections configuration parameter, What to Log log_duration configuration parameter, What to Log log_error_verbosity configuration parameter, What to Log log_executor_stats configuration parameter, Statistics Monitoring log_filename configuration parameter, Where to Log log_file_mode configuration parameter, Where to Log log_hostname configuration parameter, What to Log log_line_prefix configuration parameter, What to Log log_lock_waits configuration parameter, What to Log log_min_duration_sample configuration parameter, When to Log log_min_duration_statement configuration parameter, When to Log log_min_error_statement configuration parameter, When to Log log_min_messages configuration parameter, When to Log log_parameter_max_length configuration parameter, What to Log log_parameter_max_length_on_error configuration parameter, What to Log log_parser_stats configuration parameter, Statistics Monitoring log_planner_stats configuration parameter, Statistics Monitoring log_recovery_conflict_waits configuration parameter, What to Log log_replication_commands configuration parameter, What to Log log_rotation_age configuration parameter, Where to Log log_rotation_size configuration parameter, Where to Log log_startup_progress_interval configuration parameter, When to Log log_statement configuration parameter, What to Log log_statement_sample_rate configuration parameter, When to Log log_statement_stats configuration parameter, Statistics Monitoring log_temp_files configuration parameter, What to Log log_timezone configuration parameter, What to Log log_transaction_sample_rate configuration parameter, When to Log log_truncate_on_rotation configuration parameter, Where to Log longitude, Cube-Based Earth Distances looks_like_number in PL/Perl, Utility Functions in PL/Perl loop, Simple Loops in PL/pgSQL, Simple Loops lower, String Functions and Operators , Range/Multirange Functions and Operators and locales, Behavior lower_inc, Range/Multirange Functions and Operators lower_inf, Range/Multirange Functions and Operators lo_close, Closing a Large Object Descriptor lo_compat_privileges configuration parameter, Previous PostgreSQL Versions lo_creat, Creating a Large Object , Server-Side Functions lo_create, Creating a Large Object lo_export, Exporting a Large Object , Server-Side Functions lo_from_bytea, Server-Side Functions lo_get, Server-Side Functions lo_import, Importing a Large Object , Server-Side Functions lo_import_with_oid, Importing a Large Object lo_lseek, Seeking in a Large Object lo_lseek64, Seeking in a Large Object lo_open, Opening an Existing Large Object lo_put, Server-Side Functions lo_read, Reading Data from a Large Object lo_tell, Obtaining the Seek Position of a Large Object lo_tell64, Obtaining the Seek Position of a Large Object lo_truncate, Truncating a Large Object lo_truncate64, Truncating a Large Object lo_unlink, Removing a Large Object , Server-Side Functions lo_write, Writing Data to a Large Object lpad, String Functions and Operators lseg, Line Segments , Geometric Functions and Operators LSN, WAL Internals ltree, ltree ltree2text, Operators and Functions ltrim, String Functions and Operators , Binary String Functions and Operators M MAC address (see macaddr) MAC address (EUI-64 format) (see macaddr) macaddr (data type), macaddr macaddr8 (data type), macaddr8 macaddr8_set7bit, Network Address Functions and Operators macOS, macOS installation on, macOS IPC configuration, Shared Memory and Semaphores shared library, Compiling and Linking Dynamically-Loaded Functions magic block, Dynamic Loading maintenance, Routine Database Maintenance Tasks maintenance_io_concurrency configuration parameter, Asynchronous Behavior maintenance_work_mem configuration parameter, Memory make, Requirements makeaclitem, System Information Functions and Operators make_date, Date/Time Functions and Operators make_interval, Date/Time Functions and Operators make_time, Date/Time Functions and Operators make_timestamp, Date/Time Functions and Operators make_timestamptz, Date/Time Functions and Operators make_valid, Functions and Operators MANPATH, Environment Variables masklen, Network Address Functions and Operators materialized view, Materialized Views implementation through rules, Materialized Views materialized views, pg_matviews max, Aggregate Functions max_connections configuration parameter, Connection Settings max_files_per_process configuration parameter, Kernel Resource Usage max_function_args configuration parameter, Preset Options max_identifier_length configuration parameter, Preset Options max_index_keys configuration parameter, Preset Options max_locks_per_transaction configuration parameter, Lock Management max_logical_replication_workers configuration parameter, Subscribers max_parallel_maintenance_workers configuration parameter, Asynchronous Behavior max_parallel_workers configuration parameter, Asynchronous Behavior max_parallel_workers_per_gather configuration parameter, Asynchronous Behavior max_pred_locks_per_page configuration parameter, Lock Management max_pred_locks_per_relation configuration parameter, Lock Management max_pred_locks_per_transaction configuration parameter, Lock Management max_prepared_transactions configuration parameter, Memory max_replication_slots configuration parameter, Sending Servers max_slot_wal_keep_size configuration parameter, Sending Servers max_stack_depth configuration parameter, Memory max_standby_archive_delay configuration parameter, Standby Servers max_standby_streaming_delay configuration parameter, Standby Servers max_sync_workers_per_subscription configuration parameter, Subscribers max_wal_senders configuration parameter, Sending Servers max_wal_size configuration parameter, Checkpoints max_worker_processes configuration parameter, Asynchronous Behavior md5, String Functions and Operators , Binary String Functions and Operators MD5, Password Authentication median, Aggregate Expressions (see also percentile ) memory context in SPI, Memory Management memory overcommit, Linux Memory Overcommit MERGE, MERGE metaphone, Metaphone min, Aggregate Functions MinGW, MinGW/Native Windows installation on, MinGW/Native Windows min_dynamic_shared_memory configuration parameter, Memory min_parallel_index_scan_size configuration parameter, Planner Cost Constants min_parallel_table_scan_size configuration parameter, Planner Cost Constants min_scale, Mathematical Functions and Operators min_wal_size configuration parameter, Checkpoints mod, Mathematical Functions and Operators mode statistical, Aggregate Functions monitoring, Monitoring Database Activity database activity, Monitoring Database Activity MOVE, MOVE moving-aggregate mode, Moving-Aggregate Mode multirange (function), Range/Multirange Functions and Operators multirange type, Range Types Multiversion Concurrency Control, Introduction MultiXactId, Multixacts and Wraparound MVCC, Introduction mxid_age, System Information Functions and Operators N name, Identifiers and Key Words qualified, Creating a Schema syntax of, Identifiers and Key Words unqualified, The Schema Search Path NaN (see not a number ) natural join, Joined Tables negation, Logical Operators NetBSD IPC configuration, Shared Memory and Semaphores shared library, Compiling and Linking Dynamically-Loaded Functions start script, Starting the Database Server netmask, Network Address Functions and Operators network, Network Address Types , Network Address Functions and Operators data types, Network Address Types nextval, Sequence Manipulation Functions NFS, NFS nlevel, Operators and Functions non-durable, Non-Durable Settings nonblocking connection, Database Connection Control Functions , Asynchronous Command Processing nonrepeatable read, Transaction Isolation normalize, String Functions and Operators normalized, String Functions and Operators normal_rand, normal_rand NOT (operator), Logical Operators not a number floating point, Floating-Point Types numeric (data type), Arbitrary Precision Numbers NOT IN, Subquery Expressions , Row and Array Comparisons not-null constraint, Not-Null Constraints notation, Calling Functions functions, Calling Functions notice processing, Notice Processing in libpq, Notice Processing notice processor, Notice Processing notice receiver, Notice Processing NOTIFY, Asynchronous Notification , NOTIFY in libpq, Asynchronous Notification NOTNULL, Comparison Functions and Operators now, Date/Time Functions and Operators npoints, Geometric Functions and Operators nth_value, Window Functions ntile, Window Functions null value with check constraints, Check Constraints comparing, Comparison Functions and Operators default value, Default Values in DISTINCT, DISTINCT in libpq, Retrieving Query Result Information in PL/Perl, PL/Perl Functions and Arguments in PL/Python, Null, None with unique constraints, Unique Constraints NULLIF, NULLIF number constant, Numeric Constants numeric, Numeric Constants numeric (data type), Arbitrary Precision Numbers numnode, Text Search Functions and Operators , Manipulating Queries num_nonnulls, Comparison Functions and Operators num_nulls, Comparison Functions and Operators NVL, COALESCE O object identifier, Object Identifier Types data type, Object Identifier Types object-oriented database, Concepts obj_description, System Information Functions and Operators OCCURRENCES_REGEX, Differences from SQL Standard and XQuery octet_length, String Functions and Operators , Binary String Functions and Operators , Bit String Functions and Operators OFFSET, LIMIT and OFFSET oid, Object Identifier Types OID in libpq, Retrieving Other Result Information oid2name, oid2name old_snapshot, old_snapshot old_snapshot_threshold configuration parameter, Asynchronous Behavior ON CONFLICT, INSERT ONLY, The FROM Clause OOM, Linux Memory Overcommit OpenBSD IPC configuration, Shared Memory and Semaphores shared library, Compiling and Linking Dynamically-Loaded Functions start script, Starting the Database Server OpenSSL, PostgreSQL Features (see also SSL ) operator, Operators , Operator Precedence , Functions and Operators , Logical Operators , Operators , User-Defined Operators invocation, Operator Invocations logical, Logical Operators precedence, Operator Precedence syntax, Operators type resolution in an invocation, Operators user-defined, User-Defined Operators operator class, Operator Classes and Operator Families , Index Methods and Operator Classes operator family, Operator Classes and Operator Families , Operator Classes and Operator Families optimization information, Function Optimization Information , Operator Optimization Information for functions, Function Optimization Information for operators, Operator Optimization Information OR (operator), Logical Operators Oracle, Porting from Oracle PL/SQL porting from PL/SQL to PL/pgSQL, Porting from Oracle PL/SQL ORDER BY, Querying a Table , Sorting Rows (ORDER BY) and locales, Behavior ordered-set aggregate, Aggregate Expressions built-in, Aggregate Functions ordering operator, System Dependencies on Operator Classes ordinality, Set Returning Functions outer join, Joined Tables output function, User-Defined Types OVER clause, Window Function Calls overcommit, Linux Memory Overcommit OVERLAPS, Date/Time Functions and Operators overlay, String Functions and Operators , Binary String Functions and Operators , Bit String Functions and Operators overloading, Function Overloading functions, Function Overloading operators, User-Defined Operators owner, Privileges P pageinspect, pageinspect pages_per_range storage parameter, Index Storage Parameters page_checksum, General Functions page_header, General Functions palloc, Writing Code PAM, PostgreSQL Features , PAM Authentication parallel query, Parallel Query parallel_leader_participation configuration parameter, Asynchronous Behavior parallel_setup_cost configuration parameter, Planner Cost Constants parallel_tuple_cost configuration parameter, Planner Cost Constants parallel_workers storage parameter, Storage Parameters parameter syntax, Positional Parameters parenthesis, Value Expressions parse_ident, String Functions and Operators partition pruning, Partition Pruning partitioned table, Table Partitioning partitioning, Table Partitioning password, Role Attributes authentication, Password Authentication of the superuser, Creating a Database Cluster password file, The Password File passwordcheck, passwordcheck password_encryption configuration parameter, Authentication path, Geometric Functions and Operators for schemas, Statement Behavior PATH, Environment Variables path (data type), Paths pattern matching, Pattern Matching patterns in psql and pg_dump, Patterns pclose, Geometric Functions and Operators peer, Peer Authentication percentile continuous, Aggregate Functions discrete, Aggregate Functions percent_rank, Window Functions hypothetical, Aggregate Functions performance, Performance Tips perl, Requirements Perl, PL/Perl — Perl Procedural Language permission (see privilege ) pfree, Writing Code PGAPPNAME, Environment Variables pgbench, pgbench PGcancel, Canceling Queries in Progress PGCHANNELBINDING, Environment Variables PGCLIENTENCODING, Environment Variables PGconn, Database Connection Control Functions PGCONNECT_TIMEOUT, Environment Variables pgcrypto, pgcrypto PGDATA, Creating a Database Cluster PGDATABASE, Environment Variables PGDATESTYLE, Environment Variables PGEventProc, Event Callback Procedure PGGEQO, Environment Variables PGGSSENCMODE, Environment Variables PGGSSLIB, Environment Variables PGHOST, Environment Variables PGHOSTADDR, Environment Variables PGKRBSRVNAME, Environment Variables PGLOCALEDIR, Environment Variables PGOPTIONS, Environment Variables PGPASSFILE, Environment Variables PGPASSWORD, Environment Variables PGPORT, Environment Variables pgp_armor_headers, pgp_armor_headers pgp_key_id, pgp_key_id() pgp_pub_decrypt, pgp_pub_decrypt() pgp_pub_decrypt_bytea, pgp_pub_decrypt() pgp_pub_encrypt, pgp_pub_encrypt() pgp_pub_encrypt_bytea, pgp_pub_encrypt() pgp_sym_decrypt, pgp_sym_decrypt() pgp_sym_decrypt_bytea, pgp_sym_decrypt() pgp_sym_encrypt, pgp_sym_encrypt() pgp_sym_encrypt_bytea, pgp_sym_encrypt() PGREQUIREPEER, Environment Variables PGREQUIRESSL, Environment Variables PGresult, Main Functions pgrowlocks, pgrowlocks , Overview PGSERVICE, Environment Variables PGSERVICEFILE, Environment Variables PGSSLCERT, Environment Variables PGSSLCOMPRESSION, Environment Variables PGSSLCRL, Environment Variables PGSSLCRLDIR, Environment Variables PGSSLKEY, Environment Variables PGSSLMAXPROTOCOLVERSION, Environment Variables PGSSLMINPROTOCOLVERSION, Environment Variables PGSSLMODE, Environment Variables PGSSLROOTCERT, Environment Variables PGSSLSNI, Environment Variables pgstatginindex, Functions pgstathashindex, Functions pgstatindex, Functions pgstattuple, pgstattuple , Functions pgstattuple_approx, Functions PGSYSCONFDIR, Environment Variables PGTARGETSESSIONATTRS, Environment Variables PGTZ, Environment Variables PGUSER, Environment Variables pgxs, Extension Building Infrastructure pg_advisory_lock, Advisory Lock Functions pg_advisory_lock_shared, Advisory Lock Functions pg_advisory_unlock, Advisory Lock Functions pg_advisory_unlock_all, Advisory Lock Functions pg_advisory_unlock_shared, Advisory Lock Functions pg_advisory_xact_lock, Advisory Lock Functions pg_advisory_xact_lock_shared, Advisory Lock Functions pg_aggregate, pg_aggregate pg_am, pg_am pg_amcheck, pg_amcheck pg_amop, pg_amop pg_amproc, pg_amproc pg_archivecleanup, pg_archivecleanup pg_attrdef, pg_attrdef pg_attribute, pg_attribute pg_authid, pg_authid pg_auth_members, pg_auth_members pg_available_extensions, pg_available_extensions pg_available_extension_versions, pg_available_extension_versions pg_backend_memory_contexts, pg_backend_memory_contexts pg_backend_pid, System Information Functions and Operators pg_backup_start, Backup Control Functions pg_backup_stop, Backup Control Functions pg_basebackup, pg_basebackup pg_blocking_pids, System Information Functions and Operators pg_buffercache, pg_buffercache pg_buffercache_pages, pg_buffercache pg_cancel_backend, Server Signaling Functions pg_cast, pg_cast pg_char_to_encoding, System Information Functions and Operators pg_checksums, pg_checksums pg_class, pg_class pg_client_encoding, String Functions and Operators pg_collation, pg_collation pg_collation_actual_version, Database Object Management Functions pg_collation_is_visible, System Information Functions and Operators PG_COLOR, When Color is Used PG_COLORS, Configuring the Colors pg_column_compression, Database Object Management Functions pg_column_size, Database Object Management Functions pg_config, pg_config , pg_config with ecpg, Processing Embedded SQL Programs with libpq, Building libpq Programs with user-defined C functions, Writing Code pg_conf_load_time, System Information Functions and Operators pg_constraint, pg_constraint pg_controldata, pg_controldata pg_control_checkpoint, System Information Functions and Operators pg_control_init, System Information Functions and Operators pg_control_recovery, System Information Functions and Operators pg_control_system, System Information Functions and Operators pg_conversion, pg_conversion pg_conversion_is_visible, System Information Functions and Operators pg_copy_logical_replication_slot, Replication Management Functions pg_copy_physical_replication_slot, Replication Management Functions pg_create_logical_replication_slot, Replication Management Functions pg_create_physical_replication_slot, Replication Management Functions pg_create_restore_point, Backup Control Functions pg_ctl, Creating a Database Cluster , Starting the Database Server , pg_ctl pg_current_logfile, System Information Functions and Operators pg_current_snapshot, System Information Functions and Operators pg_current_wal_flush_lsn, Backup Control Functions pg_current_wal_insert_lsn, Backup Control Functions pg_current_wal_lsn, Backup Control Functions pg_current_xact_id, System Information Functions and Operators pg_current_xact_id_if_assigned, System Information Functions and Operators pg_cursors, pg_cursors pg_database, Template Databases , pg_database pg_database_collation_actual_version, Database Object Management Functions pg_database_size, Database Object Management Functions pg_db_role_setting, pg_db_role_setting pg_ddl_command, Pseudo-Types pg_default_acl, pg_default_acl pg_depend, pg_depend pg_describe_object, System Information Functions and Operators pg_description, pg_description pg_drop_replication_slot, Replication Management Functions pg_dump, pg_dump pg_dumpall, pg_dumpall use during upgrade, Upgrading Data via pg_dumpall pg_encoding_to_char, System Information Functions and Operators pg_enum, pg_enum pg_event_trigger, pg_event_trigger pg_event_trigger_ddl_commands, Capturing Changes at Command End pg_event_trigger_dropped_objects, Processing Objects Dropped by a DDL Command pg_event_trigger_table_rewrite_oid, Handling a Table Rewrite Event pg_event_trigger_table_rewrite_reason, Handling a Table Rewrite Event pg_export_snapshot, Snapshot Synchronization Functions pg_extension, pg_extension pg_extension_config_dump, Extension Configuration Tables pg_filenode_relation, Database Object Management Functions pg_file_rename, adminpack pg_file_settings, pg_file_settings pg_file_sync, adminpack pg_file_unlink, adminpack pg_file_write, adminpack pg_foreign_data_wrapper, pg_foreign_data_wrapper pg_foreign_server, pg_foreign_server pg_foreign_table, pg_foreign_table pg_freespace, Functions pg_freespacemap, pg_freespacemap pg_function_is_visible, System Information Functions and Operators pg_get_catalog_foreign_keys, System Information Functions and Operators pg_get_constraintdef, System Information Functions and Operators pg_get_expr, System Information Functions and Operators pg_get_functiondef, System Information Functions and Operators pg_get_function_arguments, System Information Functions and Operators pg_get_function_identity_arguments, System Information Functions and Operators pg_get_function_result, System Information Functions and Operators pg_get_indexdef, System Information Functions and Operators pg_get_keywords, System Information Functions and Operators pg_get_multixact_members, System Information Functions and Operators pg_get_object_address, System Information Functions and Operators pg_get_ruledef, System Information Functions and Operators pg_get_serial_sequence, System Information Functions and Operators pg_get_statisticsobjdef, System Information Functions and Operators pg_get_triggerdef, System Information Functions and Operators pg_get_userbyid, System Information Functions and Operators pg_get_viewdef, System Information Functions and Operators pg_get_wal_replay_pause_state, Recovery Control Functions pg_get_wal_resource_managers, Recovery Control Functions pg_group, pg_group pg_has_role, System Information Functions and Operators pg_hba.conf, The pg_hba.conf File pg_hba_file_rules, pg_hba_file_rules pg_ident.conf, User Name Maps pg_identify_object, System Information Functions and Operators pg_identify_object_as_address, System Information Functions and Operators pg_ident_file_mappings, pg_ident_file_mappings pg_import_system_collations, Database Object Management Functions pg_index, pg_index pg_indexam_has_property, System Information Functions and Operators pg_indexes, pg_indexes pg_indexes_size, Database Object Management Functions pg_index_column_has_property, System Information Functions and Operators pg_index_has_property, System Information Functions and Operators pg_inherits, pg_inherits pg_init_privs, pg_init_privs pg_isready, pg_isready pg_is_in_recovery, Recovery Control Functions pg_is_other_temp_schema, System Information Functions and Operators pg_is_wal_replay_paused, Recovery Control Functions pg_jit_available, System Information Functions and Operators pg_language, pg_language pg_largeobject, pg_largeobject pg_largeobject_metadata, pg_largeobject_metadata pg_last_committed_xact, System Information Functions and Operators pg_last_wal_receive_lsn, Recovery Control Functions pg_last_wal_replay_lsn, Recovery Control Functions pg_last_xact_replay_timestamp, Recovery Control Functions pg_listening_channels, System Information Functions and Operators pg_locks, pg_locks pg_logdir_ls, adminpack pg_logical_emit_message, Replication Management Functions pg_logical_slot_get_binary_changes, Replication Management Functions pg_logical_slot_get_changes, Replication Management Functions pg_logical_slot_peek_binary_changes, Replication Management Functions pg_logical_slot_peek_changes, Replication Management Functions pg_log_backend_memory_contexts, Server Signaling Functions pg_lsn, pg_lsn Type pg_ls_archive_statusdir, Generic File Access Functions pg_ls_dir, Generic File Access Functions pg_ls_logdir, Generic File Access Functions pg_ls_logicalmapdir, Generic File Access Functions pg_ls_logicalsnapdir, Generic File Access Functions pg_ls_replslotdir, Generic File Access Functions pg_ls_tmpdir, Generic File Access Functions pg_ls_waldir, Generic File Access Functions pg_matviews, pg_matviews pg_mcv_list_items, Inspecting MCV Lists pg_my_temp_schema, System Information Functions and Operators pg_namespace, pg_namespace pg_notification_queue_usage, System Information Functions and Operators pg_notify, pg_notify pg_opclass, pg_opclass pg_opclass_is_visible, System Information Functions and Operators pg_operator, pg_operator pg_operator_is_visible, System Information Functions and Operators pg_opfamily, pg_opfamily pg_opfamily_is_visible, System Information Functions and Operators pg_options_to_table, System Information Functions and Operators pg_parameter_acl, pg_parameter_acl pg_partitioned_table, pg_partitioned_table pg_partition_ancestors, Database Object Management Functions pg_partition_root, Database Object Management Functions pg_partition_tree, Database Object Management Functions pg_policies, pg_policies pg_policy, pg_policy pg_postmaster_start_time, System Information Functions and Operators pg_prepared_statements, pg_prepared_statements pg_prepared_xacts, pg_prepared_xacts pg_prewarm, pg_prewarm pg_prewarm.autoprewarm configuration parameter, Configuration Parameters pg_prewarm.autoprewarm_interval configuration parameter, Configuration Parameters pg_proc, pg_proc pg_promote, Recovery Control Functions pg_publication, pg_publication pg_publication_namespace, pg_publication_namespace pg_publication_rel, pg_publication_rel pg_publication_tables, pg_publication_tables pg_range, pg_range pg_read_binary_file, Generic File Access Functions pg_read_file, Generic File Access Functions pg_receivewal, pg_receivewal pg_receivexlog, pg_receivexlog renamed to pg_receivewal (see pg_receivewal ) pg_recvlogical, pg_recvlogical pg_relation_filenode, Database Object Management Functions pg_relation_filepath, Database Object Management Functions pg_relation_size, Database Object Management Functions pg_reload_conf, Server Signaling Functions pg_relpages, Functions pg_replication_origin, pg_replication_origin pg_replication_origin_advance, Replication Management Functions pg_replication_origin_create, Replication Management Functions pg_replication_origin_drop, Replication Management Functions pg_replication_origin_oid, Replication Management Functions pg_replication_origin_progress, Replication Management Functions pg_replication_origin_session_is_setup, Replication Management Functions pg_replication_origin_session_progress, Replication Management Functions pg_replication_origin_session_reset, Replication Management Functions pg_replication_origin_session_setup, Replication Management Functions pg_replication_origin_status, pg_replication_origin_status pg_replication_origin_xact_reset, Replication Management Functions pg_replication_origin_xact_setup, Replication Management Functions pg_replication_slots, pg_replication_slots pg_replication_slot_advance, Replication Management Functions pg_resetwal, pg_resetwal pg_resetxlog, pg_resetxlog renamed to pg_resetwal (see pg_resetwal ) pg_restore, pg_restore pg_rewind, pg_rewind pg_rewrite, pg_rewrite pg_roles, pg_roles pg_rotate_logfile, Server Signaling Functions pg_rules, pg_rules pg_safe_snapshot_blocking_pids, System Information Functions and Operators pg_seclabel, pg_seclabel pg_seclabels, pg_seclabels pg_sequence, pg_sequence pg_sequences, pg_sequences pg_service.conf, The Connection Service File pg_settings, pg_settings pg_settings_get_flags, System Information Functions and Operators pg_shadow, pg_shadow pg_shdepend, pg_shdepend pg_shdescription, pg_shdescription pg_shmem_allocations, pg_shmem_allocations pg_shseclabel, pg_shseclabel pg_size_bytes, Database Object Management Functions pg_size_pretty, Database Object Management Functions pg_sleep, Delaying Execution pg_sleep_for, Delaying Execution pg_sleep_until, Delaying Execution pg_snapshot_xip, System Information Functions and Operators pg_snapshot_xmax, System Information Functions and Operators pg_snapshot_xmin, System Information Functions and Operators pg_statio_all_indexes, Viewing Statistics , pg_statio_all_indexes pg_statio_all_sequences, Viewing Statistics , pg_statio_all_sequences pg_statio_all_tables, Viewing Statistics , pg_statio_all_tables pg_statio_sys_indexes, Viewing Statistics pg_statio_sys_sequences, Viewing Statistics pg_statio_sys_tables, Viewing Statistics pg_statio_user_indexes, Viewing Statistics pg_statio_user_sequences, Viewing Statistics pg_statio_user_tables, Viewing Statistics pg_statistic, Single-Column Statistics , pg_statistic pg_statistics_obj_is_visible, System Information Functions and Operators pg_statistic_ext, Extended Statistics , pg_statistic_ext pg_statistic_ext_data, Extended Statistics , pg_statistic_ext pg_stats, Single-Column Statistics , pg_stats pg_stats_ext, pg_stats_ext pg_stats_ext_exprs, pg_stats_ext_exprs pg_stat_activity, Viewing Statistics , pg_stat_activity pg_stat_all_indexes, Viewing Statistics , pg_stat_all_indexes pg_stat_all_tables, Viewing Statistics , pg_stat_all_tables pg_stat_archiver, Viewing Statistics , pg_stat_archiver pg_stat_bgwriter, Viewing Statistics , pg_stat_bgwriter pg_stat_clear_snapshot, Statistics Functions pg_stat_database, Viewing Statistics , pg_stat_database pg_stat_database_conflicts, Viewing Statistics , pg_stat_database_conflicts pg_stat_file, Generic File Access Functions pg_stat_get_activity, Statistics Functions pg_stat_get_backend_activity, Statistics Functions pg_stat_get_backend_activity_start, Statistics Functions pg_stat_get_backend_client_addr, Statistics Functions pg_stat_get_backend_client_port, Statistics Functions pg_stat_get_backend_dbid, Statistics Functions pg_stat_get_backend_idset, Statistics Functions pg_stat_get_backend_pid, Statistics Functions pg_stat_get_backend_start, Statistics Functions pg_stat_get_backend_userid, Statistics Functions pg_stat_get_backend_wait_event, Statistics Functions pg_stat_get_backend_wait_event_type, Statistics Functions pg_stat_get_backend_xact_start, Statistics Functions pg_stat_get_snapshot_timestamp, Statistics Functions pg_stat_get_xact_blocks_fetched, Statistics Functions pg_stat_get_xact_blocks_hit, Statistics Functions pg_stat_gssapi, Viewing Statistics , pg_stat_gssapi pg_stat_progress_analyze, Viewing Statistics , ANALYZE Progress Reporting pg_stat_progress_basebackup, Viewing Statistics , Base Backup Progress Reporting pg_stat_progress_cluster, Viewing Statistics , CLUSTER Progress Reporting pg_stat_progress_copy, Viewing Statistics , COPY Progress Reporting pg_stat_progress_create_index, Viewing Statistics , CREATE INDEX Progress Reporting pg_stat_progress_vacuum, Viewing Statistics , VACUUM Progress Reporting pg_stat_recovery_prefetch, Viewing Statistics , pg_stat_recovery_prefetch pg_stat_replication, Viewing Statistics , pg_stat_replication pg_stat_replication_slots, Viewing Statistics , pg_stat_replication_slots pg_stat_reset, Statistics Functions pg_stat_reset_replication_slot, Statistics Functions pg_stat_reset_shared, Statistics Functions pg_stat_reset_single_function_counters, Statistics Functions pg_stat_reset_single_table_counters, Statistics Functions pg_stat_reset_slru, Statistics Functions pg_stat_reset_subscription_stats, Statistics Functions pg_stat_slru, Viewing Statistics , pg_stat_slru pg_stat_ssl, Viewing Statistics , pg_stat_ssl pg_stat_statements, pg_stat_statements function, Functions pg_stat_statements.max configuration parameter, Configuration Parameters pg_stat_statements.save configuration parameter, Configuration Parameters pg_stat_statements.track configuration parameter, Configuration Parameters pg_stat_statements.track_planning configuration parameter, Configuration Parameters pg_stat_statements.track_utility configuration parameter, Configuration Parameters pg_stat_statements_info, The pg_stat_statements_info View pg_stat_statements_reset, Functions pg_stat_subscription, Viewing Statistics , pg_stat_subscription pg_stat_subscription_stats, Viewing Statistics , pg_stat_subscription_stats pg_stat_sys_indexes, Viewing Statistics pg_stat_sys_tables, Viewing Statistics pg_stat_user_functions, Viewing Statistics , pg_stat_user_functions pg_stat_user_indexes, Viewing Statistics pg_stat_user_tables, Viewing Statistics pg_stat_wal, Viewing Statistics , pg_stat_wal pg_stat_wal_receiver, Viewing Statistics , pg_stat_wal_receiver pg_stat_xact_all_tables, Viewing Statistics pg_stat_xact_sys_tables, Viewing Statistics pg_stat_xact_user_functions, Viewing Statistics pg_stat_xact_user_tables, Viewing Statistics pg_subscription, pg_subscription pg_subscription_rel, pg_subscription_rel pg_surgery, pg_surgery pg_switch_wal, Backup Control Functions pg_tables, pg_tables pg_tablespace, pg_tablespace pg_tablespace_databases, System Information Functions and Operators pg_tablespace_location, System Information Functions and Operators pg_tablespace_size, Database Object Management Functions pg_table_is_visible, System Information Functions and Operators pg_table_size, Database Object Management Functions pg_temp, Statement Behavior securing functions, Writing SECURITY DEFINER Functions Safely pg_terminate_backend, Server Signaling Functions pg_test_fsync, pg_test_fsync pg_test_timing, pg_test_timing pg_timezone_abbrevs, pg_timezone_abbrevs pg_timezone_names, pg_timezone_names pg_total_relation_size, Database Object Management Functions pg_transform, pg_transform pg_trgm, pg_trgm pg_trgm.similarity_threshold configuration parameter, GUC Parameters pg_trgm.strict_word_similarity_threshold configuration parameter, GUC Parameters pg_trgm.word_similarity_threshold configuration parameter, GUC Parameters pg_trigger, pg_trigger pg_trigger_depth, System Information Functions and Operators pg_try_advisory_lock, Advisory Lock Functions pg_try_advisory_lock_shared, Advisory Lock Functions pg_try_advisory_xact_lock, Advisory Lock Functions pg_try_advisory_xact_lock_shared, Advisory Lock Functions pg_ts_config, pg_ts_config pg_ts_config_is_visible, System Information Functions and Operators pg_ts_config_map, pg_ts_config_map pg_ts_dict, pg_ts_dict pg_ts_dict_is_visible, System Information Functions and Operators pg_ts_parser, pg_ts_parser pg_ts_parser_is_visible, System Information Functions and Operators pg_ts_template, pg_ts_template pg_ts_template_is_visible, System Information Functions and Operators pg_type, pg_type pg_typeof, System Information Functions and Operators pg_type_is_visible, System Information Functions and Operators pg_upgrade, pg_upgrade pg_user, pg_user pg_user_mapping, pg_user_mapping pg_user_mappings, pg_user_mappings pg_verifybackup, pg_verifybackup pg_views, pg_views pg_visibility, pg_visibility pg_visible_in_snapshot, System Information Functions and Operators pg_waldump, pg_waldump pg_walfile_name, Backup Control Functions pg_walfile_name_offset, Backup Control Functions pg_walinspect, pg_walinspect pg_wal_lsn_diff, Backup Control Functions pg_wal_replay_pause, Recovery Control Functions pg_wal_replay_resume, Recovery Control Functions pg_xact_commit_timestamp, System Information Functions and Operators pg_xact_commit_timestamp_origin, System Information Functions and Operators pg_xact_status, System Information Functions and Operators pg_xlogdump, pg_xlogdump renamed to pg_waldump (see pg_waldump ) phantom read, Transaction Isolation phraseto_tsquery, Text Search Functions and Operators , Parsing Queries pi, Mathematical Functions and Operators PIC, Compiling and Linking Dynamically-Loaded Functions PID determining PID of server process in libpq, Connection Status Functions pipelining, Pipeline Mode , Pipelining in libpq, Pipeline Mode protocol specification, Pipelining PITR, Backup and Restore PITR standby, High Availability, Load Balancing, and Replication pkg-config, PostgreSQL Features with ecpg, Processing Embedded SQL Programs with libpq, Building libpq Programs PL/Perl, PL/Perl — Perl Procedural Language PL/PerlU, Trusted and Untrusted PL/Perl PL/pgSQL, PL/pgSQL — SQL Procedural Language PL/Python, PL/Python — Python Procedural Language PL/SQL (Oracle), Porting from Oracle PL/SQL porting to PL/pgSQL, Porting from Oracle PL/SQL PL/Tcl, PL/Tcl — Tcl Procedural Language plainto_tsquery, Text Search Functions and Operators , Parsing Queries plan_cache_mode configuration parameter, Other Planner Options plperl.on_init configuration parameter, Configuration plperl.on_plperlu_init configuration parameter, Configuration plperl.on_plperl_init configuration parameter, Configuration plperl.use_strict configuration parameter, Configuration plpgsql.check_asserts configuration parameter, Checking Assertions plpgsql.variable_conflict configuration parameter, Variable Substitution pltcl.start_proc configuration parameter, PL/Tcl Configuration pltclu.start_proc configuration parameter, PL/Tcl Configuration point, Points , Geometric Functions and Operators point-in-time recovery, Backup and Restore policy, Row Security Policies polygon, Polygons , Geometric Functions and Operators polymorphic function, Polymorphic Types polymorphic type, Polymorphic Types popcount (see bit_count ) popen, Geometric Functions and Operators populate_record, hstore Operators and Functions port, Parameter Key Words port configuration parameter, Connection Settings position, String Functions and Operators , Binary String Functions and Operators , Bit String Functions and Operators POSITION_REGEX, Differences from SQL Standard and XQuery POSTGRES, The Berkeley POSTGRES Project postgres, Architectural Fundamentals , Starting the Database Server , Creating a Database , postgres postgres user, The PostgreSQL User Account Postgres95, Postgres95 postgresql.auto.conf, Parameter Interaction via the Configuration File postgresql.conf, Parameter Interaction via the Configuration File postgres_fdw, postgres_fdw postgres_fdw.application_name configuration parameter, Configuration Parameters postmaster, postmaster post_auth_delay configuration parameter, Developer Options power, Mathematical Functions and Operators PQbackendPID, Connection Status Functions PQbinaryTuples, Retrieving Query Result Information with COPY, Functions Associated with the COPY Command PQcancel, Canceling Queries in Progress PQclear, Main Functions PQclientEncoding, Control Functions PQcmdStatus, Retrieving Other Result Information PQcmdTuples, Retrieving Other Result Information PQconndefaults, Database Connection Control Functions PQconnectdb, Database Connection Control Functions PQconnectdbParams, Database Connection Control Functions PQconnectionNeedsPassword, Connection Status Functions PQconnectionUsedPassword, Connection Status Functions PQconnectPoll, Database Connection Control Functions PQconnectStart, Database Connection Control Functions PQconnectStartParams, Database Connection Control Functions PQconninfo, Database Connection Control Functions PQconninfoFree, Miscellaneous Functions PQconninfoParse, Database Connection Control Functions PQconsumeInput, Asynchronous Command Processing PQcopyResult, Miscellaneous Functions PQdb, Connection Status Functions PQdescribePortal, Main Functions PQdescribePrepared, Main Functions PQencryptPassword, Miscellaneous Functions PQencryptPasswordConn, Miscellaneous Functions PQendcopy, Obsolete Functions for COPY PQenterPipelineMode, Functions Associated with Pipeline Mode PQerrorMessage, Connection Status Functions PQescapeBytea, Escaping Strings for Inclusion in SQL Commands PQescapeByteaConn, Escaping Strings for Inclusion in SQL Commands PQescapeIdentifier, Escaping Strings for Inclusion in SQL Commands PQescapeLiteral, Escaping Strings for Inclusion in SQL Commands PQescapeString, Escaping Strings for Inclusion in SQL Commands PQescapeStringConn, Escaping Strings for Inclusion in SQL Commands PQexec, Main Functions PQexecParams, Main Functions PQexecPrepared, Main Functions PQexitPipelineMode, Functions Associated with Pipeline Mode PQfformat, Retrieving Query Result Information with COPY, Functions Associated with the COPY Command PQfinish, Database Connection Control Functions PQfireResultCreateEvents, Miscellaneous Functions PQflush, Asynchronous Command Processing PQfmod, Retrieving Query Result Information PQfn, The Fast-Path Interface PQfname, Retrieving Query Result Information PQfnumber, Retrieving Query Result Information PQfreeCancel, Canceling Queries in Progress PQfreemem, Miscellaneous Functions PQfsize, Retrieving Query Result Information PQftable, Retrieving Query Result Information PQftablecol, Retrieving Query Result Information PQftype, Retrieving Query Result Information PQgetCancel, Canceling Queries in Progress PQgetCopyData, Functions for Receiving COPY Data PQgetisnull, Retrieving Query Result Information PQgetlength, Retrieving Query Result Information PQgetline, Obsolete Functions for COPY PQgetlineAsync, Obsolete Functions for COPY PQgetResult, Asynchronous Command Processing PQgetssl, Connection Status Functions PQgetSSLKeyPassHook_OpenSSL, Database Connection Control Functions PQgetvalue, Retrieving Query Result Information PQhost, Connection Status Functions PQhostaddr, Connection Status Functions PQinitOpenSSL, SSL Library Initialization PQinitSSL, SSL Library Initialization PQinstanceData, Event Support Functions PQisBusy, Asynchronous Command Processing PQisnonblocking, Asynchronous Command Processing PQisthreadsafe, Behavior in Threaded Programs PQlibVersion, Miscellaneous Functions (see also PQserverVersion ) PQmakeEmptyPGresult, Miscellaneous Functions PQnfields, Retrieving Query Result Information with COPY, Functions Associated with the COPY Command PQnotifies, Asynchronous Notification PQnparams, Retrieving Query Result Information PQntuples, Retrieving Query Result Information PQoidStatus, Retrieving Other Result Information PQoidValue, Retrieving Other Result Information PQoptions, Connection Status Functions PQparameterStatus, Connection Status Functions PQparamtype, Retrieving Query Result Information PQpass, Connection Status Functions PQping, Database Connection Control Functions PQpingParams, Database Connection Control Functions PQpipelineStatus, Functions Associated with Pipeline Mode PQpipelineSync, Functions Associated with Pipeline Mode PQport, Connection Status Functions PQprepare, Main Functions PQprint, Retrieving Query Result Information PQprotocolVersion, Connection Status Functions PQputCopyData, Functions for Sending COPY Data PQputCopyEnd, Functions for Sending COPY Data PQputline, Obsolete Functions for COPY PQputnbytes, Obsolete Functions for COPY PQregisterEventProc, Event Support Functions PQrequestCancel, Canceling Queries in Progress PQreset, Database Connection Control Functions PQresetPoll, Database Connection Control Functions PQresetStart, Database Connection Control Functions PQresStatus, Main Functions PQresultAlloc, Miscellaneous Functions PQresultErrorField, Main Functions PQresultErrorMessage, Main Functions PQresultInstanceData, Event Support Functions PQresultMemorySize, Miscellaneous Functions PQresultSetInstanceData, Event Support Functions PQresultStatus, Main Functions PQresultVerboseErrorMessage, Main Functions PQsendDescribePortal, Asynchronous Command Processing PQsendDescribePrepared, Asynchronous Command Processing PQsendFlushRequest, Functions Associated with Pipeline Mode PQsendPrepare, Asynchronous Command Processing PQsendQuery, Asynchronous Command Processing PQsendQueryParams, Asynchronous Command Processing PQsendQueryPrepared, Asynchronous Command Processing PQserverVersion, Connection Status Functions PQsetClientEncoding, Control Functions PQsetdb, Database Connection Control Functions PQsetdbLogin, Database Connection Control Functions PQsetErrorContextVisibility, Control Functions PQsetErrorVerbosity, Control Functions PQsetInstanceData, Event Support Functions PQsetnonblocking, Asynchronous Command Processing PQsetNoticeProcessor, Notice Processing PQsetNoticeReceiver, Notice Processing PQsetResultAttrs, Miscellaneous Functions PQsetSingleRowMode, Retrieving Query Results Row-by-Row PQsetSSLKeyPassHook_OpenSSL, Database Connection Control Functions PQsetTraceFlags, Control Functions PQsetvalue, Miscellaneous Functions PQsocket, Connection Status Functions PQsslAttribute, Connection Status Functions PQsslAttributeNames, Connection Status Functions PQsslInUse, Connection Status Functions PQsslStruct, Connection Status Functions PQstatus, Connection Status Functions PQtrace, Control Functions PQtransactionStatus, Connection Status Functions PQtty, Connection Status Functions PQunescapeBytea, Escaping Strings for Inclusion in SQL Commands PQuntrace, Control Functions PQuser, Connection Status Functions predicate locking, Serializable Isolation Level PREPARE, PREPARE PREPARE TRANSACTION, PREPARE TRANSACTION prepared statements, DEALLOCATE , EXECUTE , EXPLAIN , PREPARE creating, PREPARE executing, EXECUTE removing, DEALLOCATE showing the query plan, EXPLAIN preparing a query in PL/pgSQL, Plan Caching in PL/Python, Database Access Functions in PL/Tcl, Database Access from PL/Tcl pre_auth_delay configuration parameter, Developer Options primary key, Primary Keys primary_conninfo configuration parameter, Standby Servers primary_slot_name configuration parameter, Standby Servers privilege, Privileges , Schemas and Privileges , Rules and Privileges , Rules and Privileges querying, System Information Functions and Operators with rules, Rules and Privileges for schemas, Schemas and Privileges with views, Rules and Privileges procedural language, Procedural Languages , Writing a Procedural Language Handler externally maintained, Procedural Languages handler for, Writing a Procedural Language Handler procedure, User-Defined Procedures user-defined, User-Defined Procedures procedures output parameter, SQL Procedures with Output Parameters promote_trigger_file configuration parameter, Standby Servers protocol, Frontend/Backend Protocol frontend-backend, Frontend/Backend Protocol ps, Standard Unix Tools to monitor activity, Standard Unix Tools psql, Accessing a Database , psql Python, PL/Python — Python Procedural Language Q qualified name, Creating a Schema query, Querying a Table , Queries query plan, Using EXPLAIN query tree, The Query Tree querytree, Text Search Functions and Operators , Manipulating Queries quotation marks and identifiers, Identifiers and Key Words escaping, String Constants quote_all_identifiers configuration parameter, Previous PostgreSQL Versions quote_ident, String Functions and Operators in PL/Perl, Utility Functions in PL/Perl use in PL/pgSQL, Executing Dynamic Commands quote_literal, String Functions and Operators in PL/Perl, Utility Functions in PL/Perl use in PL/pgSQL, Executing Dynamic Commands quote_nullable, String Functions and Operators in PL/Perl, Utility Functions in PL/Perl use in PL/pgSQL, Executing Dynamic Commands R radians, Mathematical Functions and Operators radius, Geometric Functions and Operators RADIUS, RADIUS Authentication RAISE in PL/pgSQL, Reporting Errors and Messages random, Mathematical Functions and Operators random_page_cost configuration parameter, Planner Cost Constants range table, The Query Tree range type, Range Types exclude, Constraints on Ranges indexes on, Indexing range_agg, Aggregate Functions range_intersect_agg, Aggregate Functions range_merge, Range/Multirange Functions and Operators rank, Window Functions hypothetical, Aggregate Functions read committed, Read Committed Isolation Level read-only transaction, Statement Behavior setting, SET TRANSACTION setting default, Statement Behavior readline, Requirements Readline in psql, Command-Line Editing READ_REPLICATION_SLOT, Streaming Replication Protocol real, Floating-Point Types REASSIGN OWNED, REASSIGN OWNED record, Pseudo-Types recovery.conf, recovery.conf file merged into postgresql.conf recovery.signal, Archive Recovery recovery_end_command configuration parameter, Archive Recovery recovery_init_sync_method configuration parameter, Error Handling recovery_min_apply_delay configuration parameter, Standby Servers recovery_prefetch configuration parameter, Recovery recovery_target configuration parameter, Recovery Target recovery_target_action configuration parameter, Recovery Target recovery_target_inclusive configuration parameter, Recovery Target recovery_target_lsn configuration parameter, Recovery Target recovery_target_name configuration parameter, Recovery Target recovery_target_time configuration parameter, Recovery Target recovery_target_timeline configuration parameter, Recovery Target recovery_target_xid configuration parameter, Recovery Target rectangle, Boxes RECURSIVE, CREATE VIEW in common table expressions, Recursive Queries in views, CREATE VIEW recursive_worktable_factor configuration parameter, Other Planner Options referential integrity, Foreign Keys , Foreign Keys REFRESH MATERIALIZED VIEW, REFRESH MATERIALIZED VIEW regclass, Object Identifier Types regcollation, Object Identifier Types regconfig, Object Identifier Types regdictionary, Object Identifier Types regexp_count, String Functions and Operators , POSIX Regular Expressions regexp_instr, String Functions and Operators , POSIX Regular Expressions regexp_like, String Functions and Operators , POSIX Regular Expressions regexp_match, String Functions and Operators , POSIX Regular Expressions regexp_matches, String Functions and Operators , POSIX Regular Expressions regexp_replace, String Functions and Operators , POSIX Regular Expressions regexp_split_to_array, String Functions and Operators , POSIX Regular Expressions regexp_split_to_table, String Functions and Operators , POSIX Regular Expressions regexp_substr, String Functions and Operators , POSIX Regular Expressions regnamespace, Object Identifier Types regoper, Object Identifier Types regoperator, Object Identifier Types regproc, Object Identifier Types regprocedure, Object Identifier Types regression intercept, Aggregate Functions regression slope, Aggregate Functions regression test, Installation Procedure regression tests, Regression Tests regrole, Object Identifier Types regr_avgx, Aggregate Functions regr_avgy, Aggregate Functions regr_count, Aggregate Functions regr_intercept, Aggregate Functions regr_r2, Aggregate Functions regr_slope, Aggregate Functions regr_sxx, Aggregate Functions regr_sxy, Aggregate Functions regr_syy, Aggregate Functions regtype, Object Identifier Types regular expression, SIMILAR TO Regular Expressions , POSIX Regular Expressions (see also pattern matching ) regular expressions and locales, Behavior reindex, Routine Reindexing REINDEX, REINDEX reindexdb, reindexdb relation, Concepts relational database, Concepts RELEASE SAVEPOINT, RELEASE SAVEPOINT remove_temp_files_after_crash configuration parameter, Developer Options repeat, String Functions and Operators repeatable read, Repeatable Read Isolation Level replace, String Functions and Operators replication, High Availability, Load Balancing, and Replication Replication Origins, Replication Progress Tracking Replication Progress Tracking, Replication Progress Tracking replication slot logical replication, Replication Slots streaming replication, Replication Slots reporting errors in PL/pgSQL, Reporting Errors and Messages RESET, RESET restartpoint, WAL Configuration restart_after_crash configuration parameter, Error Handling restore_command configuration parameter, Archive Recovery RESTRICT, Dependency Tracking with DROP, Dependency Tracking foreign key action, Foreign Keys restrict_nonsystem_relation_kind configuration parameter, Statement Behavior retryable error, Serialization Failure Handling RETURN NEXT in PL/pgSQL, RETURN NEXT and RETURN QUERY RETURN QUERY in PL/pgSQL, RETURN NEXT and RETURN QUERY RETURNING, Returning Data from Modified Rows RETURNING INTO, Executing a Command with a Single-Row Result in PL/pgSQL, Executing a Command with a Single-Row Result reverse, String Functions and Operators REVOKE, Privileges , REVOKE right, String Functions and Operators right join, Joined Tables role, Database Roles , Role Membership , Predefined Roles applicable, applicable_roles enabled, enabled_roles membership in, Role Membership privilege to bypass, Role Attributes privilege to create, Role Attributes privilege to inherit, Role Attributes privilege to initiate replication, Role Attributes privilege to limit connection, Role Attributes ROLLBACK, ROLLBACK rollback psql, Variables ROLLBACK PREPARED, ROLLBACK PREPARED ROLLBACK TO SAVEPOINT, ROLLBACK TO SAVEPOINT ROLLUP, GROUPING SETS, CUBE, and ROLLUP round, Mathematical Functions and Operators routine, User-Defined Procedures routine maintenance, Routine Database Maintenance Tasks row, Concepts , Table Basics ROW, Row Constructors row estimation, Row Estimation Examples multivariate, Multivariate Statistics Examples planner, Row Estimation Examples row type, Composite Types constructor, Row Constructors row-level security, Row Security Policies row-wise comparison, Row and Array Comparisons row_number, Window Functions row_security configuration parameter, Statement Behavior row_security_active, System Information Functions and Operators row_to_json, Processing and Creating JSON Data rpad, String Functions and Operators rtrim, String Functions and Operators , Binary String Functions and Operators rule, The Rule System , Views and the Rule System , How SELECT Rules Work , Materialized Views , Rules on INSERT, UPDATE, and DELETE , Rules on INSERT, UPDATE, and DELETE , Rules on INSERT, UPDATE, and DELETE , Rules Versus Triggers and materialized views, Materialized Views and views, Views and the Rule System for DELETE, Rules on INSERT, UPDATE, and DELETE for INSERT, Rules on INSERT, UPDATE, and DELETE for SELECT, How SELECT Rules Work compared with triggers, Rules Versus Triggers for UPDATE, Rules on INSERT, UPDATE, and DELETE S SAVEPOINT, SAVEPOINT savepoints, RELEASE SAVEPOINT , ROLLBACK TO SAVEPOINT , SAVEPOINT defining, SAVEPOINT releasing, RELEASE SAVEPOINT rolling back, ROLLBACK TO SAVEPOINT scalar (see expression ) scale, Mathematical Functions and Operators schema, Schemas , Creating a Schema , The Public Schema , Overview creating, Creating a Schema current, The Schema Search Path , System Information Functions and Operators public, The Public Schema removing, Creating a Schema SCRAM, Password Authentication search path, The Schema Search Path current, System Information Functions and Operators object visibility, System Information Functions and Operators search_path configuration parameter, The Schema Search Path , Statement Behavior use in securing functions, Writing SECURITY DEFINER Functions Safely SECURITY LABEL, SECURITY LABEL sec_to_gc, Cube-Based Earth Distances seg, seg segment_size configuration parameter, Preset Options SELECT, Querying a Table , Queries , SELECT Output Columns , SELECT determination of result type, SELECT Output Columns select list, Select Lists SELECT INTO, Executing a Command with a Single-Row Result , SELECT INTO in PL/pgSQL, Executing a Command with a Single-Row Result semaphores, Shared Memory and Semaphores sepgsql, sepgsql sepgsql.debug_audit configuration parameter, GUC Parameters sepgsql.permissive configuration parameter, GUC Parameters sequence, Sequence Manipulation Functions and serial type, Serial Types sequential scan, Planner Method Configuration seq_page_cost configuration parameter, Planner Cost Constants serial, Serial Types serial2, Serial Types serial4, Serial Types serial8, Serial Types serializable, Serializable Isolation Level Serializable Snapshot Isolation, Introduction serialization anomaly, Transaction Isolation , Serializable Isolation Level serialization failure, Serialization Failure Handling server log, Error Reporting and Logging , Log File Maintenance log file maintenance, Log File Maintenance Server Name Indication, Parameter Key Words server spoofing, Preventing Server Spoofing server_encoding configuration parameter, Preset Options server_version configuration parameter, Preset Options server_version_num configuration parameter, Preset Options session_preload_libraries configuration parameter, Shared Library Preloading session_replication_role configuration parameter, Statement Behavior session_user, System Information Functions and Operators SET, Configuration Settings Functions , SET SET CONSTRAINTS, SET CONSTRAINTS set difference, Combining Queries (UNION, INTERSECT, EXCEPT) set intersection, Combining Queries (UNION, INTERSECT, EXCEPT) set operation, Combining Queries (UNION, INTERSECT, EXCEPT) set returning functions, Set Returning Functions functions, Set Returning Functions SET ROLE, SET ROLE SET SESSION AUTHORIZATION, SET SESSION AUTHORIZATION SET TRANSACTION, SET TRANSACTION set union, Combining Queries (UNION, INTERSECT, EXCEPT) SET XML OPTION, Statement Behavior setseed, Mathematical Functions and Operators setval, Sequence Manipulation Functions setweight, Text Search Functions and Operators , Manipulating Documents setweight for specific lexeme(s), Text Search Functions and Operators set_bit, Binary String Functions and Operators , Bit String Functions and Operators set_byte, Binary String Functions and Operators set_config, Configuration Settings Functions set_limit, Functions and Operators set_masklen, Network Address Functions and Operators sha224, Binary String Functions and Operators sha256, Binary String Functions and Operators sha384, Binary String Functions and Operators sha512, Binary String Functions and Operators shared library, Shared Libraries , Compiling and Linking Dynamically-Loaded Functions shared memory, Shared Memory and Semaphores shared_buffers configuration parameter, Memory shared_memory_size configuration parameter, Preset Options shared_memory_size_in_huge_pages configuration parameter, Preset Options shared_memory_type configuration parameter, Memory shared_preload_libraries, Shared Memory and LWLocks shared_preload_libraries configuration parameter, Shared Library Preloading shobj_description, System Information Functions and Operators SHOW, Configuration Settings Functions , SHOW , Streaming Replication Protocol show_limit, Functions and Operators show_trgm, Functions and Operators shutdown, Shutting Down the Server SIGHUP, Parameter Interaction via the Configuration File , The pg_hba.conf File , User Name Maps SIGINT, Shutting Down the Server sign, Mathematical Functions and Operators signal backend processes, Server Signaling Functions significant digits, Locale and Formatting SIGQUIT, Shutting Down the Server SIGTERM, Shutting Down the Server SIMILAR TO, SIMILAR TO Regular Expressions similarity, Functions and Operators sin, Mathematical Functions and Operators sind, Mathematical Functions and Operators single-user mode, Options for Single-User Mode sinh, Mathematical Functions and Operators skeys, hstore Operators and Functions sleep, Delaying Execution slice, hstore Operators and Functions sliced bread (see TOAST ) slope, Geometric Functions and Operators SLRU, pg_stat_slru smallint, Integer Types smallserial, Serial Types Solaris, Solaris installation on, Solaris shared library, Compiling and Linking Dynamically-Loaded Functions start script, Starting the Database Server SOME, Aggregate Functions , Subquery Expressions , Row and Array Comparisons sort, intarray Functions and Operators sorting, Sorting Rows (ORDER BY) sort_asc, intarray Functions and Operators sort_desc, intarray Functions and Operators soundex, Soundex SP-GiST (see index ) SPI, Server Programming Interface , spi examples, spi spi_commit in PL/Perl, Database Access from PL/Perl SPI_commit, SPI_commit SPI_commit_and_chain, SPI_commit SPI_connect, SPI_connect SPI_connect_ext, SPI_connect SPI_copytuple, SPI_copytuple spi_cursor_close in PL/Perl, Database Access from PL/Perl SPI_cursor_close, SPI_cursor_close SPI_cursor_fetch, SPI_cursor_fetch SPI_cursor_find, SPI_cursor_find SPI_cursor_move, SPI_cursor_move SPI_cursor_open, SPI_cursor_open SPI_cursor_open_with_args, SPI_cursor_open_with_args SPI_cursor_open_with_paramlist, SPI_cursor_open_with_paramlist SPI_cursor_parse_open, SPI_cursor_parse_open SPI_exec, SPI_exec SPI_execp, SPI_execp SPI_execute, SPI_execute SPI_execute_extended, SPI_execute_extended SPI_execute_plan, SPI_execute_plan SPI_execute_plan_extended, SPI_execute_plan_extended SPI_execute_plan_with_paramlist, SPI_execute_plan_with_paramlist SPI_execute_with_args, SPI_execute_with_args spi_exec_prepared in PL/Perl, Database Access from PL/Perl spi_exec_query in PL/Perl, Database Access from PL/Perl spi_fetchrow in PL/Perl, Database Access from PL/Perl SPI_finish, SPI_finish SPI_fname, SPI_fname SPI_fnumber, SPI_fnumber spi_freeplan in PL/Perl, Database Access from PL/Perl SPI_freeplan, SPI_freeplan SPI_freetuple, SPI_freetuple SPI_freetuptable, SPI_freetuptable SPI_getargcount, SPI_getargcount SPI_getargtypeid, SPI_getargtypeid SPI_getbinval, SPI_getbinval SPI_getnspname, SPI_getnspname SPI_getrelname, SPI_getrelname SPI_gettype, SPI_gettype SPI_gettypeid, SPI_gettypeid SPI_getvalue, SPI_getvalue SPI_is_cursor_plan, SPI_is_cursor_plan SPI_keepplan, SPI_keepplan SPI_modifytuple, SPI_modifytuple SPI_palloc, SPI_palloc SPI_pfree, SPI_pfree spi_prepare in PL/Perl, Database Access from PL/Perl SPI_prepare, SPI_prepare SPI_prepare_cursor, SPI_prepare_cursor SPI_prepare_extended, SPI_prepare_extended SPI_prepare_params, SPI_prepare_params spi_query in PL/Perl, Database Access from PL/Perl spi_query_prepared in PL/Perl, Database Access from PL/Perl SPI_register_relation, SPI_register_relation SPI_register_trigger_data, SPI_register_trigger_data SPI_repalloc, SPI_repalloc SPI_result_code_string, SPI_result_code_string SPI_returntuple, SPI_returntuple spi_rollback in PL/Perl, Database Access from PL/Perl SPI_rollback, SPI_rollback SPI_rollback_and_chain, SPI_rollback SPI_saveplan, SPI_saveplan SPI_scroll_cursor_fetch, SPI_scroll_cursor_fetch SPI_scroll_cursor_move, SPI_scroll_cursor_move SPI_start_transaction, SPI_start_transaction SPI_unregister_relation, SPI_unregister_relation split_part, String Functions and Operators SQL/CLI, SQL Conformance SQL/Foundation, SQL Conformance SQL/Framework, SQL Conformance SQL/JRT, SQL Conformance SQL/JSON path language, The SQL/JSON Path Language SQL/MDA, SQL Conformance SQL/MED, SQL Conformance SQL/OLB, SQL Conformance SQL/PSM, SQL Conformance SQL/Schemata, SQL Conformance SQL/XML, SQL Conformance limits and conformance, XML Limits and Conformance to SQL/XML sqrt, Mathematical Functions and Operators ssh, Secure TCP/IP Connections with SSH Tunnels SSI, Introduction SSL, Secure TCP/IP Connections with SSL , SSL Support in libpq, Connection Status Functions with libpq, Parameter Key Words TLS, Secure TCP/IP Connections with SSL , SSL Support ssl configuration parameter, SSL sslinfo, sslinfo ssl_ca_file configuration parameter, SSL ssl_cert_file configuration parameter, SSL ssl_cipher, Functions Provided ssl_ciphers configuration parameter, SSL ssl_client_cert_present, Functions Provided ssl_client_dn, Functions Provided ssl_client_dn_field, Functions Provided ssl_client_serial, Functions Provided ssl_crl_dir configuration parameter, SSL ssl_crl_file configuration parameter, SSL ssl_dh_params_file configuration parameter, SSL ssl_ecdh_curve configuration parameter, SSL ssl_extension_info, Functions Provided ssl_issuer_dn, Functions Provided ssl_issuer_field, Functions Provided ssl_is_used, Functions Provided ssl_key_file configuration parameter, SSL ssl_library configuration parameter, Preset Options ssl_max_protocol_version configuration parameter, SSL ssl_min_protocol_version configuration parameter, SSL ssl_passphrase_command configuration parameter, SSL ssl_passphrase_command_supports_reload configuration parameter, SSL ssl_prefer_server_ciphers configuration parameter, SSL ssl_version, Functions Provided SSPI, SSPI Authentication STABLE, Function Volatility Categories standard deviation, Aggregate Functions population, Aggregate Functions sample, Aggregate Functions standard_conforming_strings configuration parameter, Previous PostgreSQL Versions standby server, High Availability, Load Balancing, and Replication standby.signal, Archive Recovery , Standby Server Operation , Setting Up a Standby Server for hot standby, Administrator's Overview pg_basebackup --write-recovery-conf, Options standby_mode (see standby.signal ) START TRANSACTION, START TRANSACTION starts_with, String Functions and Operators START_REPLICATION, Streaming Replication Protocol statement_timeout configuration parameter, Statement Behavior statement_timestamp, Date/Time Functions and Operators statistics, Aggregate Functions , Statistics Used by the Planner , Extended Statistics , Updating Planner Statistics , The Cumulative Statistics System of the planner, Statistics Used by the Planner , Extended Statistics , Updating Planner Statistics stats_fetch_consistency configuration parameter, Cumulative Query and Index Statistics stddev, Aggregate Functions stddev_pop, Aggregate Functions stddev_samp, Aggregate Functions STONITH, High Availability, Load Balancing, and Replication storage parameters, Storage Parameters Streaming Replication, High Availability, Load Balancing, and Replication strict_word_similarity, Functions and Operators string (see character string ) strings backslash quotes, Previous PostgreSQL Versions escape warning, Previous PostgreSQL Versions standard conforming, Previous PostgreSQL Versions string_agg, Aggregate Functions string_to_array, String Functions and Operators string_to_table, String Functions and Operators strip, Text Search Functions and Operators , Manipulating Documents strpos, String Functions and Operators subarray, intarray Functions and Operators subltree, Operators and Functions subpath, Operators and Functions subquery, Aggregate Functions , Scalar Subqueries , Subqueries , Subquery Expressions subscript, Subscripts substr, String Functions and Operators , Binary String Functions and Operators substring, String Functions and Operators , Binary String Functions and Operators , Bit String Functions and Operators , SIMILAR TO Regular Expressions , POSIX Regular Expressions SUBSTRING_REGEX, Differences from SQL Standard and XQuery subtransactions in PL/Tcl, Explicit Subtransactions in PL/Tcl sum, Aggregate Functions superuser, Accessing a Database , Role Attributes superuser_reserved_connections configuration parameter, Connection Settings support functions in_range, B-Tree Support Functions suppress_redundant_updates_trigger, Trigger Functions svals, hstore Operators and Functions synchronize_seqscans configuration parameter, Previous PostgreSQL Versions synchronous commit, Asynchronous Commit Synchronous Replication, High Availability, Load Balancing, and Replication synchronous_commit configuration parameter, Settings synchronous_standby_names configuration parameter, Primary Server syntax, SQL Syntax SQL, SQL Syntax syslog_facility configuration parameter, Where to Log syslog_ident configuration parameter, Where to Log syslog_sequence_numbers configuration parameter, Where to Log syslog_split_messages configuration parameter, Where to Log system catalog, The System Catalog Schema schema, The System Catalog Schema systemd, PostgreSQL Features , Starting the Database Server RemoveIPC, systemd RemoveIPC T table, Concepts , Table Basics , Modifying Tables creating, Table Basics inheritance, Inheritance modifying, Modifying Tables partitioning, Table Partitioning removing, Table Basics renaming, Renaming a Table Table Access Method, Table Access Method Interface Definition TABLE command, SELECT table expression, Table Expressions table function, Table Functions , xmltable XMLTABLE, xmltable table sampling method, Writing a Table Sampling Method tableam Table Access Method, Table Access Method Interface Definition tablefunc, tablefunc tableoid, System Columns TABLESAMPLE method, Writing a Table Sampling Method tablespace, Tablespaces default, Statement Behavior temporary, Statement Behavior table_am_handler, Pseudo-Types tan, Mathematical Functions and Operators tand, Mathematical Functions and Operators tanh, Mathematical Functions and Operators target list, The Query Tree Tcl, PL/Tcl — Tcl Procedural Language tcn, tcn tcp_keepalives_count configuration parameter, Connection Settings tcp_keepalives_idle configuration parameter, Connection Settings tcp_keepalives_interval configuration parameter, Connection Settings tcp_user_timeout configuration parameter, Connection Settings template0, Creating a Database , Template Databases template1, Creating a Database , Template Databases temp_buffers configuration parameter, Memory temp_file_limit configuration parameter, Disk temp_tablespaces configuration parameter, Statement Behavior test, Regression Tests test_decoding, test_decoding text, Character Types , Network Address Functions and Operators text search, Text Search Types , Text Search Types , Full Text Search , Preferred Index Types for Text Search data types, Text Search Types functions and operators, Text Search Types indexes, Preferred Index Types for Text Search text2ltree, Operators and Functions threads, Behavior in Threaded Programs with libpq, Behavior in Threaded Programs tid, Object Identifier Types time, Date/Time Types , Times constants, Special Values current, Current Date/Time output format, Date/Time Output (see also formatting ) time span, Date/Time Types time with time zone, Date/Time Types , Times time without time zone, Date/Time Types , Times time zone, Time Zones , Locale and Formatting , POSIX Time Zone Specifications conversion, AT TIME ZONE input abbreviations, Date/Time Configuration Files POSIX-style specification, POSIX Time Zone Specifications time zone data, Build Process Details time zone names, Locale and Formatting timelines, Backup and Restore TIMELINE_HISTORY, Streaming Replication Protocol timeofday, Date/Time Functions and Operators timeout client authentication, Authentication deadlock, Lock Management timestamp, Date/Time Types , Time Stamps timestamp with time zone, Date/Time Types , Time Stamps timestamp without time zone, Date/Time Types , Time Stamps timestamptz, Date/Time Types TimeZone configuration parameter, Locale and Formatting timezone_abbreviations configuration parameter, Locale and Formatting TOAST, TOAST and user-defined types, TOAST Considerations per-column storage settings, Description per-type storage settings, Description versus large objects, Introduction toast_tuple_target storage parameter, Storage Parameters token, Lexical Structure to_ascii, String Functions and Operators to_char, Data Type Formatting Functions and locales, Behavior to_date, Data Type Formatting Functions to_hex, String Functions and Operators to_json, Processing and Creating JSON Data to_jsonb, Processing and Creating JSON Data to_number, Data Type Formatting Functions to_regclass, System Information Functions and Operators to_regcollation, System Information Functions and Operators to_regnamespace, System Information Functions and Operators to_regoper, System Information Functions and Operators to_regoperator, System Information Functions and Operators to_regproc, System Information Functions and Operators to_regprocedure, System Information Functions and Operators to_regrole, System Information Functions and Operators to_regtype, System Information Functions and Operators to_timestamp, Data Type Formatting Functions , Date/Time Functions and Operators to_tsquery, Text Search Functions and Operators , Parsing Queries to_tsvector, Text Search Functions and Operators , Parsing Documents trace_locks configuration parameter, Developer Options trace_lock_oidmin configuration parameter, Developer Options trace_lock_table configuration parameter, Developer Options trace_lwlocks configuration parameter, Developer Options trace_notify configuration parameter, Developer Options trace_recovery_messages configuration parameter, Developer Options trace_sort configuration parameter, Developer Options trace_userlocks configuration parameter, Developer Options track_activities configuration parameter, Cumulative Query and Index Statistics track_activity_query_size configuration parameter, Cumulative Query and Index Statistics track_commit_timestamp configuration parameter, Sending Servers track_counts configuration parameter, Cumulative Query and Index Statistics track_functions configuration parameter, Cumulative Query and Index Statistics track_io_timing configuration parameter, Cumulative Query and Index Statistics track_wal_io_timing configuration parameter, Cumulative Query and Index Statistics transaction, Transactions transaction ID, Preventing Transaction ID Wraparound Failures wraparound, Preventing Transaction ID Wraparound Failures transaction isolation, Transaction Isolation transaction isolation level, Transaction Isolation , Statement Behavior read committed, Read Committed Isolation Level repeatable read, Repeatable Read Isolation Level serializable, Serializable Isolation Level setting, SET TRANSACTION setting default, Statement Behavior transaction log (see WAL ) transaction_deferrable configuration parameter, Statement Behavior transaction_isolation configuration parameter, Statement Behavior transaction_read_only configuration parameter, Statement Behavior transaction_timestamp, Date/Time Functions and Operators transform_null_equals configuration parameter, Platform and Client Compatibility transition tables, CREATE TRIGGER (see also ephemeral named relation ) implementation in PLs, SPI_register_trigger_data referencing from C trigger, Writing Trigger Functions in C translate, String Functions and Operators TRANSLATE_REGEX, Differences from SQL Standard and XQuery transparent huge pages, Memory trigger, Pseudo-Types , Triggers , Writing Trigger Functions in C , Rules Versus Triggers , Trigger Functions , Trigger Functions arguments for trigger functions, Overview of Trigger Behavior constraint trigger, Description for updating a derived tsvector column, Triggers for Automatic Updates in C, Writing Trigger Functions in C in PL/pgSQL, Trigger Functions in PL/Python, Trigger Functions in PL/Tcl, Trigger Functions in PL/Tcl compared with rules, Rules Versus Triggers triggered_change_notification, tcn trigger_file (see promote_trigger_file) trim, String Functions and Operators , Binary String Functions and Operators trim_array, Array Functions and Operators trim_scale, Mathematical Functions and Operators true, Boolean Type trunc, Mathematical Functions and Operators , Network Address Functions and Operators TRUNCATE, TRUNCATE trusted, Trusted and Untrusted PL/Perl PL/Perl, Trusted and Untrusted PL/Perl tsm_handler, Pseudo-Types tsm_system_rows, tsm_system_rows tsm_system_time, tsm_system_time tsquery (data type), tsquery tsquery_phrase, Text Search Functions and Operators , Manipulating Queries tsvector (data type), tsvector tsvector concatenation, Manipulating Documents tsvector_to_array, Text Search Functions and Operators tsvector_update_trigger, Trigger Functions tsvector_update_trigger_column, Trigger Functions ts_debug, Text Search Functions and Operators , Configuration Testing ts_delete, Text Search Functions and Operators ts_filter, Text Search Functions and Operators ts_headline, Text Search Functions and Operators , Highlighting Results ts_lexize, Text Search Functions and Operators , Dictionary Testing ts_parse, Text Search Functions and Operators , Parser Testing ts_rank, Text Search Functions and Operators , Ranking Search Results ts_rank_cd, Text Search Functions and Operators , Ranking Search Results ts_rewrite, Text Search Functions and Operators , Query Rewriting ts_stat, Text Search Functions and Operators , Gathering Document Statistics ts_token_type, Text Search Functions and Operators , Parser Testing tuple_data_split, Heap Functions txid_current, System Information Functions and Operators txid_current_if_assigned, System Information Functions and Operators txid_current_snapshot, System Information Functions and Operators txid_snapshot_xip, System Information Functions and Operators txid_snapshot_xmax, System Information Functions and Operators txid_snapshot_xmin, System Information Functions and Operators txid_status, System Information Functions and Operators txid_visible_in_snapshot, System Information Functions and Operators type (see data type ) type cast, Numeric Constants , Type Casts U UESCAPE, Identifiers and Key Words , String Constants with Unicode Escapes unaccent, unaccent , Functions Unicode escape, String Constants with Unicode Escapes in identifiers, Identifiers and Key Words in string constants, String Constants with Unicode Escapes Unicode normalization, String Functions and Operators UNION, Combining Queries (UNION, INTERSECT, EXCEPT) , UNION, CASE, and Related Constructs determination of result type, UNION, CASE, and Related Constructs uniq, intarray Functions and Operators unique constraint, Unique Constraints unistr, String Functions and Operators Unix domain socket, Parameter Key Words unix_socket_directories configuration parameter, Connection Settings unix_socket_group configuration parameter, Connection Settings unix_socket_permissions configuration parameter, Connection Settings unknown, Pseudo-Types UNLISTEN, UNLISTEN unnest, Array Functions and Operators for multirange, Range/Multirange Functions and Operators for tsvector, Text Search Functions and Operators unqualified name, The Schema Search Path updatable views, Updatable Views UPDATE, Updates , Updating Data , Returning Data from Modified Rows , UPDATE RETURNING, Returning Data from Modified Rows update_process_title configuration parameter, Process Title updating, Updating Data upgrading, Upgrading a PostgreSQL Cluster upper, String Functions and Operators , Range/Multirange Functions and Operators and locales, Behavior upper_inc, Range/Multirange Functions and Operators upper_inf, Range/Multirange Functions and Operators UPSERT, INSERT URI, Connection Strings user, System Information Functions and Operators , Database Roles current, System Information Functions and Operators user mapping, Foreign Data User name maps, User Name Maps user_catalog_table storage parameter, Storage Parameters UUID, UUID Type , UUID Functions , PostgreSQL Features generating, UUID Functions uuid-ossp, uuid-ossp uuid_generate_v1, uuid-ossp Functions uuid_generate_v1mc, uuid-ossp Functions uuid_generate_v3, uuid-ossp Functions V vacuum, Routine Vacuuming VACUUM, VACUUM vacuumdb, vacuumdb vacuumlo, vacuumlo vacuum_cost_delay configuration parameter, Cost-based Vacuum Delay vacuum_cost_limit configuration parameter, Cost-based Vacuum Delay vacuum_cost_page_dirty configuration parameter, Cost-based Vacuum Delay vacuum_cost_page_hit configuration parameter, Cost-based Vacuum Delay vacuum_cost_page_miss configuration parameter, Cost-based Vacuum Delay vacuum_defer_cleanup_age configuration parameter, Primary Server vacuum_failsafe_age configuration parameter, Statement Behavior vacuum_freeze_min_age configuration parameter, Statement Behavior vacuum_freeze_table_age configuration parameter, Statement Behavior vacuum_index_cleanup storage parameter, Storage Parameters vacuum_multixact_failsafe_age configuration parameter, Statement Behavior vacuum_multixact_freeze_min_age configuration parameter, Statement Behavior vacuum_multixact_freeze_table_age configuration parameter, Statement Behavior vacuum_truncate storage parameter, Storage Parameters value expression, Value Expressions VALUES, VALUES Lists , UNION, CASE, and Related Constructs , VALUES determination of result type, UNION, CASE, and Related Constructs varchar, Character Types variadic function, SQL Functions with Variable Numbers of Arguments variance, Aggregate Functions population, Aggregate Functions sample, Aggregate Functions var_pop, Aggregate Functions var_samp, Aggregate Functions version, Accessing a Database , System Information Functions and Operators , Upgrading a PostgreSQL Cluster compatibility, Upgrading a PostgreSQL Cluster view, Views , Views and the Rule System , Materialized Views , Cooperation with Views implementation through rules, Views and the Rule System materialized, Materialized Views updating, Cooperation with Views Visibility Map, Visibility Map VM (see Visibility Map ) void, Pseudo-Types VOLATILE, Function Volatility Categories volatility, Function Volatility Categories functions, Function Volatility Categories VPATH, Installation Procedure , Extension Building Infrastructure W WAL, Reliability and the Write-Ahead Log wal_block_size configuration parameter, Preset Options wal_buffers configuration parameter, Settings wal_compression configuration parameter, Settings wal_consistency_checking configuration parameter, Developer Options wal_debug configuration parameter, Developer Options wal_decode_buffer_size configuration parameter, Recovery wal_init_zero configuration parameter, Settings wal_keep_size configuration parameter, Sending Servers wal_level configuration parameter, Settings wal_log_hints configuration parameter, Settings wal_receiver_create_temp_slot configuration parameter, Standby Servers wal_receiver_status_interval configuration parameter, Standby Servers wal_receiver_timeout configuration parameter, Standby Servers wal_recycle configuration parameter, Settings wal_retrieve_retry_interval configuration parameter, Standby Servers wal_segment_size configuration parameter, Preset Options wal_sender_timeout configuration parameter, Sending Servers wal_skip_threshold configuration parameter, Settings wal_sync_method configuration parameter, Settings wal_writer_delay configuration parameter, Settings wal_writer_flush_after configuration parameter, Settings warm standby, High Availability, Load Balancing, and Replication websearch_to_tsquery, Text Search Functions and Operators WHERE, The WHERE Clause where to log, Where to Log WHILE in PL/pgSQL, WHILE width, Geometric Functions and Operators width_bucket, Mathematical Functions and Operators window function, Window Functions , Window Function Calls , Window Function Processing , Window Functions built-in, Window Functions invocation, Window Function Calls order of execution, Window Function Processing WITH, WITH Queries (Common Table Expressions) , SELECT in SELECT, WITH Queries (Common Table Expressions) , SELECT WITH CHECK OPTION, CREATE VIEW WITHIN GROUP, Aggregate Expressions witness server, High Availability, Load Balancing, and Replication word_similarity, Functions and Operators work_mem configuration parameter, Memory wraparound of multixact IDs, Multixacts and Wraparound of transaction IDs, Preventing Transaction ID Wraparound Failures X xid, Object Identifier Types xid8, Object Identifier Types xmax, System Columns xmin, System Columns XML, XML Type XML export, Mapping Tables to XML XML Functions, XML Functions XML option, Creating XML Values , Statement Behavior xml2, xml2 xmlagg, xmlagg , Aggregate Functions xmlbinary configuration parameter, Statement Behavior xmlcomment, xmlcomment xmlconcat, xmlconcat xmlelement, xmlelement XMLEXISTS, XMLEXISTS xmlforest, xmlforest xmloption configuration parameter, Statement Behavior xmlparse, Creating XML Values xmlpi, xmlpi xmlroot, xmlroot xmlserialize, Creating XML Values xmltable, xmltable xml_is_well_formed, xml_is_well_formed xml_is_well_formed_content, xml_is_well_formed xml_is_well_formed_document, xml_is_well_formed XPath, xpath xpath_exists, xpath_exists xpath_table, xpath_table XQuery regular expressions, Differences from SQL Standard and XQuery xslt_process, xslt_process Y yacc, Requirements Z zero_damaged_pages configuration parameter, Developer Options zlib, Requirements , Anti-Features"
https://www.postgresql.org/docs/15/contrib.html,Appendix F. Additional Supplied Modules,"This appendix and the next one contain information regarding the modules that can be found in the contrib directory of the PostgreSQL distribution. These include porting tools, analysis utilities, and plug-in features that are not part of the core PostgreSQL system, mainly because they address a limited audience or are too experimental to be part of the main source tree. This does not preclude their usefulness. This appendix covers extensions and other server plug-in modules found in contrib . Appendix G covers utility programs. When building from the source distribution, these components are not built automatically, unless you build the ""world"" target (see Step 2 ). You can build and install all of them by running: make make install in the contrib directory of a configured source tree; or to build and install just one selected module, do the same in that module's subdirectory. Many of the modules have regression tests, which can be executed by running: make check before installation or make installcheck once you have a PostgreSQL server running. If you are using a pre-packaged version of PostgreSQL , these modules are typically made available as a separate subpackage, such as postgresql-contrib . Many modules supply new user-defined functions, operators, or types. To make use of one of these modules, after you have installed the code you need to register the new SQL objects in the database system. This is done by executing a CREATE EXTENSION command. In a fresh database, you can simply do CREATE EXTENSION module_name ; This command registers the new SQL objects in the current database only, so you need to run it in each database that you want the module's facilities to be available in. Alternatively, run it in database template1 so that the extension will be copied into subsequently-created databases by default. For all these modules, CREATE EXTENSION must be run by a database superuser, unless the module is considered “ trusted ” , in which case it can be run by any user who has CREATE privilege on the current database. Modules that are trusted are identified as such in the sections that follow. Generally, trusted modules are ones that cannot provide access to outside-the-database functionality. Many modules allow you to install their objects in a schema of your choice. To do that, add SCHEMA schema_name to the CREATE EXTENSION command. By default, the objects will be placed in your current creation target schema, which in turn defaults to public . Note, however, that some of these modules are not “ extensions ” in this sense, but are loaded into the server in some other way, for instance by way of shared_preload_libraries . See the documentation of each module for details."
https://www.postgresql.org/docs/15/install-windows.html,Chapter 18. Installation from Source Code onWindows,"It is recommended that most users download the binary distribution for Windows, available as a graphical installer package from the PostgreSQL website at https://www.postgresql.org/download/ . Building from source is only intended for people developing PostgreSQL or extensions. There are several different ways of building PostgreSQL on Windows . The simplest way to build with Microsoft tools is to install Visual Studio 2022 and use the included compiler. It is also possible to build with the full Microsoft Visual C++ 2013 to 2022 . In some cases that requires the installation of the Windows SDK in addition to the compiler. It is also possible to build PostgreSQL using the GNU compiler tools provided by MinGW , or using Cygwin for older versions of Windows . Building using MinGW or Cygwin uses the normal build system, see Chapter 17 and the specific notes in Section 17.7.4 and Section 17.7.2 . To produce native 64 bit binaries in these environments, use the tools from MinGW-w64 . These tools can also be used to cross-compile for 32 bit and 64 bit Windows targets on other hosts, such as Linux and macOS . Cygwin is not recommended for running a production server, and it should only be used for running on older versions of Windows where the native build does not work. The official binaries are built using Visual Studio . Native builds of psql don't support command line editing. The Cygwin build does support command line editing, so it should be used where psql is needed for interactive use on Windows ."
https://www.postgresql.org/docs/15/errcodes-appendix.html,Appendix A.PostgreSQLError Codes,"All messages emitted by the PostgreSQL server are assigned five-character error codes that follow the SQL standard's conventions for “ SQLSTATE ” codes. Applications that need to know which error condition has occurred should usually test the error code, rather than looking at the textual error message. The error codes are less likely to change across PostgreSQL releases, and also are not subject to change due to localization of error messages. Note that some, but not all, of the error codes produced by PostgreSQL are defined by the SQL standard; some additional error codes for conditions not defined by the standard have been invented or borrowed from other databases. According to the standard, the first two characters of an error code denote a class of errors, while the last three characters indicate a specific condition within that class. Thus, an application that does not recognize the specific error code might still be able to infer what to do from the error class. Table A.1 lists all the error codes defined in PostgreSQL 15.14. (Some are not actually used at present, but are defined by the SQL standard.) The error classes are also shown. For each error class there is a “ standard ” error code having the last three characters 000 . This code is used only for error conditions that fall within the class but do not have any more-specific code assigned. The symbol shown in the column “ Condition Name ” is the condition name to use in PL/pgSQL . Condition names can be written in either upper or lower case. (Note that PL/pgSQL does not recognize warning, as opposed to error, condition names; those are classes 00, 01, and 02.) For some types of errors, the server reports the name of a database object (a table, table column, data type, or constraint) associated with the error; for example, the name of the unique constraint that caused a unique_violation error. Such names are supplied in separate fields of the error report message so that applications need not try to extract them from the possibly-localized human-readable text of the message. As of PostgreSQL 9.3, complete coverage for this feature exists only for errors in SQLSTATE class 23 (integrity constraint violation), but this is likely to be expanded in future. Table A.1. PostgreSQL Error Codes Error Code Condition Name Class 00 — Successful Completion 00000 successful_completion Class 01 — Warning 01000 warning 0100C dynamic_result_sets_returned 01008 implicit_zero_bit_padding 01003 null_value_eliminated_in_set_function 01007 privilege_not_granted 01006 privilege_not_revoked 01004 string_data_right_truncation 01P01 deprecated_feature Class 02 — No Data (this is also a warning class per the SQL standard) 02000 no_data 02001 no_additional_dynamic_result_sets_returned Class 03 — SQL Statement Not Yet Complete 03000 sql_statement_not_yet_complete Class 08 — Connection Exception 08000 connection_exception 08003 connection_does_not_exist 08006 connection_failure 08001 sqlclient_unable_to_establish_sqlconnection 08004 sqlserver_rejected_establishment_of_sqlconnection 08007 transaction_resolution_unknown 08P01 protocol_violation Class 09 — Triggered Action Exception 09000 triggered_action_exception Class 0A — Feature Not Supported 0A000 feature_not_supported Class 0B — Invalid Transaction Initiation 0B000 invalid_transaction_initiation Class 0F — Locator Exception 0F000 locator_exception 0F001 invalid_locator_specification Class 0L — Invalid Grantor 0L000 invalid_grantor 0LP01 invalid_grant_operation Class 0P — Invalid Role Specification 0P000 invalid_role_specification Class 0Z — Diagnostics Exception 0Z000 diagnostics_exception 0Z002 stacked_diagnostics_accessed_without_active_handler Class 20 — Case Not Found 20000 case_not_found Class 21 — Cardinality Violation 21000 cardinality_violation Class 22 — Data Exception 22000 data_exception 2202E array_subscript_error 22021 character_not_in_repertoire 22008 datetime_field_overflow 22012 division_by_zero 22005 error_in_assignment 2200B escape_character_conflict 22022 indicator_overflow 22015 interval_field_overflow 2201E invalid_argument_for_logarithm 22014 invalid_argument_for_ntile_function 22016 invalid_argument_for_nth_value_function 2201F invalid_argument_for_power_function 2201G invalid_argument_for_width_bucket_function 22018 invalid_character_value_for_cast 22007 invalid_datetime_format 22019 invalid_escape_character 2200D invalid_escape_octet 22025 invalid_escape_sequence 22P06 nonstandard_use_of_escape_character 22010 invalid_indicator_parameter_value 22023 invalid_parameter_value 22013 invalid_preceding_or_following_size 2201B invalid_regular_expression 2201W invalid_row_count_in_limit_clause 2201X invalid_row_count_in_result_offset_clause 2202H invalid_tablesample_argument 2202G invalid_tablesample_repeat 22009 invalid_time_zone_displacement_value 2200C invalid_use_of_escape_character 2200G most_specific_type_mismatch 22004 null_value_not_allowed 22002 null_value_no_indicator_parameter 22003 numeric_value_out_of_range 2200H sequence_generator_limit_exceeded 22026 string_data_length_mismatch 22001 string_data_right_truncation 22011 substring_error 22027 trim_error 22024 unterminated_c_string 2200F zero_length_character_string 22P01 floating_point_exception 22P02 invalid_text_representation 22P03 invalid_binary_representation 22P04 bad_copy_file_format 22P05 untranslatable_character 2200L not_an_xml_document 2200M invalid_xml_document 2200N invalid_xml_content 2200S invalid_xml_comment 2200T invalid_xml_processing_instruction 22030 duplicate_json_object_key_value 22031 invalid_argument_for_sql_json_datetime_function 22032 invalid_json_text 22033 invalid_sql_json_subscript 22034 more_than_one_sql_json_item 22035 no_sql_json_item 22036 non_numeric_sql_json_item 22037 non_unique_keys_in_a_json_object 22038 singleton_sql_json_item_required 22039 sql_json_array_not_found 2203A sql_json_member_not_found 2203B sql_json_number_not_found 2203C sql_json_object_not_found 2203D too_many_json_array_elements 2203E too_many_json_object_members 2203F sql_json_scalar_required 2203G sql_json_item_cannot_be_cast_to_target_type Class 23 — Integrity Constraint Violation 23000 integrity_constraint_violation 23001 restrict_violation 23502 not_null_violation 23503 foreign_key_violation 23505 unique_violation 23514 check_violation 23P01 exclusion_violation Class 24 — Invalid Cursor State 24000 invalid_cursor_state Class 25 — Invalid Transaction State 25000 invalid_transaction_state 25001 active_sql_transaction 25002 branch_transaction_already_active 25008 held_cursor_requires_same_isolation_level 25003 inappropriate_access_mode_for_branch_transaction 25004 inappropriate_isolation_level_for_branch_transaction 25005 no_active_sql_transaction_for_branch_transaction 25006 read_only_sql_transaction 25007 schema_and_data_statement_mixing_not_supported 25P01 no_active_sql_transaction 25P02 in_failed_sql_transaction 25P03 idle_in_transaction_session_timeout Class 26 — Invalid SQL Statement Name 26000 invalid_sql_statement_name Class 27 — Triggered Data Change Violation 27000 triggered_data_change_violation Class 28 — Invalid Authorization Specification 28000 invalid_authorization_specification 28P01 invalid_password Class 2B — Dependent Privilege Descriptors Still Exist 2B000 dependent_privilege_descriptors_still_exist 2BP01 dependent_objects_still_exist Class 2D — Invalid Transaction Termination 2D000 invalid_transaction_termination Class 2F — SQL Routine Exception 2F000 sql_routine_exception 2F005 function_executed_no_return_statement 2F002 modifying_sql_data_not_permitted 2F003 prohibited_sql_statement_attempted 2F004 reading_sql_data_not_permitted Class 34 — Invalid Cursor Name 34000 invalid_cursor_name Class 38 — External Routine Exception 38000 external_routine_exception 38001 containing_sql_not_permitted 38002 modifying_sql_data_not_permitted 38003 prohibited_sql_statement_attempted 38004 reading_sql_data_not_permitted Class 39 — External Routine Invocation Exception 39000 external_routine_invocation_exception 39001 invalid_sqlstate_returned 39004 null_value_not_allowed 39P01 trigger_protocol_violated 39P02 srf_protocol_violated 39P03 event_trigger_protocol_violated Class 3B — Savepoint Exception 3B000 savepoint_exception 3B001 invalid_savepoint_specification Class 3D — Invalid Catalog Name 3D000 invalid_catalog_name Class 3F — Invalid Schema Name 3F000 invalid_schema_name Class 40 — Transaction Rollback 40000 transaction_rollback 40002 transaction_integrity_constraint_violation 40001 serialization_failure 40003 statement_completion_unknown 40P01 deadlock_detected Class 42 — Syntax Error or Access Rule Violation 42000 syntax_error_or_access_rule_violation 42601 syntax_error 42501 insufficient_privilege 42846 cannot_coerce 42803 grouping_error 42P20 windowing_error 42P19 invalid_recursion 42830 invalid_foreign_key 42602 invalid_name 42622 name_too_long 42939 reserved_name 42804 datatype_mismatch 42P18 indeterminate_datatype 42P21 collation_mismatch 42P22 indeterminate_collation 42809 wrong_object_type 428C9 generated_always 42703 undefined_column 42883 undefined_function 42P01 undefined_table 42P02 undefined_parameter 42704 undefined_object 42701 duplicate_column 42P03 duplicate_cursor 42P04 duplicate_database 42723 duplicate_function 42P05 duplicate_prepared_statement 42P06 duplicate_schema 42P07 duplicate_table 42712 duplicate_alias 42710 duplicate_object 42702 ambiguous_column 42725 ambiguous_function 42P08 ambiguous_parameter 42P09 ambiguous_alias 42P10 invalid_column_reference 42611 invalid_column_definition 42P11 invalid_cursor_definition 42P12 invalid_database_definition 42P13 invalid_function_definition 42P14 invalid_prepared_statement_definition 42P15 invalid_schema_definition 42P16 invalid_table_definition 42P17 invalid_object_definition Class 44 — WITH CHECK OPTION Violation 44000 with_check_option_violation Class 53 — Insufficient Resources 53000 insufficient_resources 53100 disk_full 53200 out_of_memory 53300 too_many_connections 53400 configuration_limit_exceeded Class 54 — Program Limit Exceeded 54000 program_limit_exceeded 54001 statement_too_complex 54011 too_many_columns 54023 too_many_arguments Class 55 — Object Not In Prerequisite State 55000 object_not_in_prerequisite_state 55006 object_in_use 55P02 cant_change_runtime_param 55P03 lock_not_available 55P04 unsafe_new_enum_value_usage Class 57 — Operator Intervention 57000 operator_intervention 57014 query_canceled 57P01 admin_shutdown 57P02 crash_shutdown 57P03 cannot_connect_now 57P04 database_dropped 57P05 idle_session_timeout Class 58 — System Error (errors external to PostgreSQL itself) 58000 system_error 58030 io_error 58P01 undefined_file 58P02 duplicate_file Class 72 — Snapshot Failure 72000 snapshot_too_old Class F0 — Configuration File Error F0000 config_file_error F0001 lock_file_exists Class HV — Foreign Data Wrapper Error (SQL/MED) HV000 fdw_error HV005 fdw_column_name_not_found HV002 fdw_dynamic_parameter_value_needed HV010 fdw_function_sequence_error HV021 fdw_inconsistent_descriptor_information HV024 fdw_invalid_attribute_value HV007 fdw_invalid_column_name HV008 fdw_invalid_column_number HV004 fdw_invalid_data_type HV006 fdw_invalid_data_type_descriptors HV091 fdw_invalid_descriptor_field_identifier HV00B fdw_invalid_handle HV00C fdw_invalid_option_index HV00D fdw_invalid_option_name HV090 fdw_invalid_string_length_or_buffer_length HV00A fdw_invalid_string_format HV009 fdw_invalid_use_of_null_pointer HV014 fdw_too_many_handles HV001 fdw_out_of_memory HV00P fdw_no_schemas HV00J fdw_option_name_not_found HV00K fdw_reply_handle HV00Q fdw_schema_not_found HV00R fdw_table_not_found HV00L fdw_unable_to_create_execution HV00M fdw_unable_to_create_reply HV00N fdw_unable_to_establish_connection Class P0 — PL/pgSQL Error P0000 plpgsql_error P0001 raise_exception P0002 no_data_found P0003 too_many_rows P0004 assert_failure Class XX — Internal Error XX000 internal_error XX001 data_corrupted XX002 index_corrupted"
https://www.postgresql.org/docs/15/notation.html,3. Conventions,"The following conventions are used in the synopsis of a command: brackets ( [ and ] ) indicate optional parts. Braces ( { and } ) and vertical lines ( | ) indicate that you must choose one alternative. Dots ( ... ) mean that the preceding element can be repeated. All other symbols, including parentheses, should be taken literally. Where it enhances the clarity, SQL commands are preceded by the prompt => , and shell commands are preceded by the prompt $ . Normally, prompts are not shown, though. An administrator is generally a person who is in charge of installing and running the server. A user could be anyone who is using, or wants to use, any part of the PostgreSQL system. These terms should not be interpreted too narrowly; this book does not have fixed presumptions about system administration procedures."
https://www.postgresql.org/docs/15/functions.html,Chapter 9. Functions and Operators,"PostgreSQL provides a large number of functions and operators for the built-in data types. This chapter describes most of them, although additional special-purpose functions appear in relevant sections of the manual. Users can also define their own functions and operators, as described in Part V . The psql commands \df and \do can be used to list all available functions and operators, respectively. The notation used throughout this chapter to describe the argument and result data types of a function or operator is like this: repeat ( text , integer ) → text which says that the function repeat takes one text and one integer argument and returns a result of type text. The right arrow is also used to indicate the result of an example, thus: repeat('Pg', 4) → PgPgPgPg If you are concerned about portability then note that most of the functions and operators described in this chapter, with the exception of the most trivial arithmetic and comparison operators and some explicitly marked functions, are not specified by the SQL standard. Some of this extended functionality is present in other SQL database management systems, and in many cases this functionality is compatible and consistent between the various implementations."
https://www.postgresql.org/docs/15/overview.html,Chapter 52. Overview of PostgreSQL Internals,"Author This chapter originated as part of [sim98] Stefan Simkovics' Master's Thesis prepared at Vienna University of Technology under the direction of O.Univ.Prof.Dr. Georg Gottlob and Univ.Ass. Mag. Katrin Seyr. This chapter gives an overview of the internal structure of the backend of PostgreSQL . After having read the following sections you should have an idea of how a query is processed. This chapter is intended to help the reader understand the general sequence of operations that occur within the backend from the point at which a query is received, to the point at which the results are returned to the client."
https://www.postgresql.org/docs/15/color.html,Appendix N. Color Support,Most programs in the PostgreSQL package can produce colorized console output. This appendix describes how that is configured.
https://www.postgresql.org/docs/15/dml.html,Chapter 6. Data Manipulation,"The previous chapter discussed how to create tables and other structures to hold your data. Now it is time to fill the tables with data. This chapter covers how to insert, update, and delete table data. The chapter after this will finally explain how to extract your long-lost data from the database."
https://www.postgresql.org/docs/15/client-authentication.html,Chapter 21. Client Authentication,"When a client application connects to the database server, it specifies which PostgreSQL database user name it wants to connect as, much the same way one logs into a Unix computer as a particular user. Within the SQL environment the active database user name determines access privileges to database objects — see Chapter 22 for more information. Therefore, it is essential to restrict which database users can connect. Note As explained in Chapter 22 , PostgreSQL actually does privilege management in terms of “ roles ” . In this chapter, we consistently use database user to mean “ role with the LOGIN privilege ” . Authentication is the process by which the database server establishes the identity of the client, and by extension determines whether the client application (or the user who runs the client application) is permitted to connect with the database user name that was requested. PostgreSQL offers a number of different client authentication methods. The method used to authenticate a particular client connection can be selected on the basis of (client) host address, database, and user. PostgreSQL database user names are logically separate from user names of the operating system in which the server runs. If all the users of a particular server also have accounts on the server's machine, it makes sense to assign database user names that match their operating system user names. However, a server that accepts remote connections might have many database users who have no local operating system account, and in such cases there need be no connection between database user names and OS user names."
https://www.postgresql.org/docs/15/reference-client.html,No Title,"PostgreSQL Client Applications This part contains reference information for PostgreSQL client applications and utilities. Not all of these commands are of general utility; some might require special privileges. The common feature of these applications is that they can be run on any host, independent of where the database server resides. When specified on the command line, user and database names have their case preserved — the presence of spaces or special characters might require quoting. Table names and other identifiers do not have their case preserved, except where documented, and might require quoting."
https://www.postgresql.org/docs/15/rules.html,Chapter 41. The Rule System,"This chapter discusses the rule system in PostgreSQL . Production rule systems are conceptually simple, but there are many subtle points involved in actually using them. Some other database systems define active database rules, which are usually stored procedures and triggers. In PostgreSQL , these can be implemented using functions and triggers as well. The rule system (more precisely speaking, the query rewrite rule system) is totally different from stored procedures and triggers. It modifies queries to take rules into consideration, and then passes the modified query to the query planner for planning and execution. It is very powerful, and can be used for many things such as query language procedures, views, and versions. The theoretical foundations and the power of this rule system are also discussed in [ston90b] and [ong90] ."
https://www.postgresql.org/docs/15/ddl.html,Chapter 5. Data Definition,"This chapter covers how one creates the database structures that will hold one's data. In a relational database, the raw data is stored in tables, so the majority of this chapter is devoted to explaining how tables are created and modified and what features are available to control what data is stored in the tables. Subsequently, we discuss how tables can be organized into schemas, and how privileges can be assigned to tables. Finally, we will briefly look at other features that affect the data storage, such as inheritance, table partitioning, views, functions, and triggers."
https://www.postgresql.org/docs/15/performance-tips.html,Chapter 14. Performance Tips,"Query performance can be affected by many things. Some of these can be controlled by the user, while others are fundamental to the underlying design of the system. This chapter provides some hints about understanding and tuning PostgreSQL performance."
https://www.postgresql.org/docs/15/catalogs.html,Chapter 53. System Catalogs,"The system catalogs are the place where a relational database management system stores schema metadata, such as information about tables and columns, and internal bookkeeping information. PostgreSQL 's system catalogs are regular tables. You can drop and recreate the tables, add columns, insert and update values, and severely mess up your system that way. Normally, one should not change the system catalogs by hand, there are normally SQL commands to do that. (For example, CREATE DATABASE inserts a row into the pg_database catalog — and actually creates the database on disk.) There are some exceptions for particularly esoteric operations, but many of those have been made available as SQL commands over time, and so the need for direct manipulation of the system catalogs is ever decreasing."
https://www.postgresql.org/docs/15/high-availability.html,"Chapter 27. High Availability, Load Balancing, and Replication","Database servers can work together to allow a second server to take over quickly if the primary server fails (high availability), or to allow several computers to serve the same data (load balancing). Ideally, database servers could work together seamlessly. Web servers serving static web pages can be combined quite easily by merely load-balancing web requests to multiple machines. In fact, read-only database servers can be combined relatively easily too. Unfortunately, most database servers have a read/write mix of requests, and read/write servers are much harder to combine. This is because though read-only data needs to be placed on each server only once, a write to any server has to be propagated to all servers so that future read requests to those servers return consistent results. This synchronization problem is the fundamental difficulty for servers working together. Because there is no single solution that eliminates the impact of the sync problem for all use cases, there are multiple solutions. Each solution addresses this problem in a different way, and minimizes its impact for a specific workload. Some solutions deal with synchronization by allowing only one server to modify the data. Servers that can modify data are called read/write, master or primary servers. Servers that track changes in the primary are called standby or secondary servers. A standby server that cannot be connected to until it is promoted to a primary server is called a warm standby server, and one that can accept connections and serves read-only queries is called a hot standby server. Some solutions are synchronous, meaning that a data-modifying transaction is not considered committed until all servers have committed the transaction. This guarantees that a failover will not lose any data and that all load-balanced servers will return consistent results no matter which server is queried. In contrast, asynchronous solutions allow some delay between the time of a commit and its propagation to the other servers, opening the possibility that some transactions might be lost in the switch to a backup server, and that load balanced servers might return slightly stale results. Asynchronous communication is used when synchronous would be too slow. Solutions can also be categorized by their granularity. Some solutions can deal only with an entire database server, while others allow control at the per-table or per-database level. Performance must be considered in any choice. There is usually a trade-off between functionality and performance. For example, a fully synchronous solution over a slow network might cut performance by more than half, while an asynchronous one might have a minimal performance impact. The remainder of this section outlines various failover, replication, and load balancing solutions."
https://www.postgresql.org/docs/15/user-manag.html,Chapter 22. Database Roles,"PostgreSQL manages database access permissions using the concept of roles . A role can be thought of as either a database user, or a group of database users, depending on how the role is set up. Roles can own database objects (for example, tables and functions) and can assign privileges on those objects to other roles to control who has access to which objects. Furthermore, it is possible to grant membership in a role to another role, thus allowing the member role to use privileges assigned to another role. The concept of roles subsumes the concepts of “ users ” and “ groups ” . In PostgreSQL versions before 8.1, users and groups were distinct kinds of entities, but now there are only roles. Any role can act as a user, a group, or both. This chapter describes how to create and manage roles. More information about the effects of role privileges on various database objects can be found in Section 5.7 ."
https://www.postgresql.org/docs/15/xplang.html,Chapter 42. Procedural Languages,"PostgreSQL allows user-defined functions to be written in other languages besides SQL and C. These other languages are generically called procedural languages ( PL s). For a function written in a procedural language, the database server has no built-in knowledge about how to interpret the function's source text. Instead, the task is passed to a special handler that knows the details of the language. The handler could either do all the work of parsing, syntax analysis, execution, etc. itself, or it could serve as “ glue ” between PostgreSQL and an existing implementation of a programming language. The handler itself is a C language function compiled into a shared object and loaded on demand, just like any other C function. There are currently four procedural languages available in the standard PostgreSQL distribution: PL/pgSQL ( Chapter 43 ), PL/Tcl ( Chapter 44 ), PL/Perl ( Chapter 45 ), and PL/Python ( Chapter 46 ). There are additional procedural languages available that are not included in the core distribution. Appendix H has information about finding them. In addition other languages can be defined by users; the basics of developing a new procedural language are covered in Chapter 58 ."
https://www.postgresql.org/docs/15/event-triggers.html,Chapter 40. Event Triggers,"To supplement the trigger mechanism discussed in Chapter 39 , PostgreSQL also provides event triggers. Unlike regular triggers, which are attached to a single table and capture only DML events, event triggers are global to a particular database and are capable of capturing DDL events. Like regular triggers, event triggers can be written in any procedural language that includes event trigger support, or in C, but not in plain SQL."
https://www.postgresql.org/docs/15/triggers.html,Chapter 39. Triggers,"This chapter provides general information about writing trigger functions. Trigger functions can be written in most of the available procedural languages, including PL/pgSQL ( Chapter 43 ), PL/Tcl ( Chapter 44 ), PL/Perl ( Chapter 45 ), and PL/Python ( Chapter 46 ). After reading this chapter, you should consult the chapter for your favorite procedural language to find out the language-specific details of writing a trigger in it. It is also possible to write a trigger function in C, although most people find it easier to use one of the procedural languages. It is not currently possible to write a trigger function in the plain SQL function language."
https://www.postgresql.org/docs/15/backup.html,Chapter 26. Backup and Restore,"As with everything that contains valuable data, PostgreSQL databases should be backed up regularly. While the procedure is essentially simple, it is important to have a clear understanding of the underlying techniques and assumptions. There are three fundamentally different approaches to backing up PostgreSQL data: SQL dump File system level backup Continuous archiving Each has its own strengths and weaknesses; each is discussed in turn in the following sections."
https://www.postgresql.org/docs/15/typeconv.html,Chapter 10. Type Conversion,"SQL statements can, intentionally or not, require the mixing of different data types in the same expression. PostgreSQL has extensive facilities for evaluating mixed-type expressions. In many cases a user does not need to understand the details of the type conversion mechanism. However, implicit conversions done by PostgreSQL can affect the results of a query. When necessary, these results can be tailored by using explicit type conversion. This chapter introduces the PostgreSQL type conversion mechanisms and conventions. Refer to the relevant sections in Chapter 8 and Chapter 9 for more information on specific data types and allowed functions and operators."
https://www.postgresql.org/docs/15/regress.html,Chapter 33. Regression Tests,The regression tests are a comprehensive set of tests for the SQL implementation in PostgreSQL . They test standard SQL operations as well as the extended capabilities of PostgreSQL .
https://www.postgresql.org/docs/15/history.html,2. A Brief History ofPostgreSQL,"The object-relational database management system now known as PostgreSQL is derived from the POSTGRES package written at the University of California at Berkeley. With decades of development behind it, PostgreSQL is now the most advanced open-source database available anywhere. 2.1. The Berkeley POSTGRES Project The POSTGRES project, led by Professor Michael Stonebraker, was sponsored by the Defense Advanced Research Projects Agency ( DARPA ), the Army Research Office ( ARO ), the National Science Foundation ( NSF ), and ESL, Inc. The implementation of POSTGRES began in 1986. The initial concepts for the system were presented in [ston86] , and the definition of the initial data model appeared in [rowe87] . The design of the rule system at that time was described in [ston87a] . The rationale and architecture of the storage manager were detailed in [ston87b] . POSTGRES has undergone several major releases since then. The first “ demoware ” system became operational in 1987 and was shown at the 1988 ACM-SIGMOD Conference. Version 1, described in [ston90a] , was released to a few external users in June 1989. In response to a critique of the first rule system ( [ston89] ), the rule system was redesigned ( [ston90b] ), and Version 2 was released in June 1990 with the new rule system. Version 3 appeared in 1991 and added support for multiple storage managers, an improved query executor, and a rewritten rule system. For the most part, subsequent releases until Postgres95 (see below) focused on portability and reliability. POSTGRES has been used to implement many different research and production applications. These include: a financial data analysis system, a jet engine performance monitoring package, an asteroid tracking database, a medical information database, and several geographic information systems. POSTGRES has also been used as an educational tool at several universities. Finally, Illustra Information Technologies (later merged into Informix , which is now owned by IBM ) picked up the code and commercialized it. In late 1992, POSTGRES became the primary data manager for the Sequoia 2000 scientific computing project described in [ston92] . The size of the external user community nearly doubled during 1993. It became increasingly obvious that maintenance of the prototype code and support was taking up large amounts of time that should have been devoted to database research. In an effort to reduce this support burden, the Berkeley POSTGRES project officially ended with Version 4.2. 2.2. Postgres95 In 1994, Andrew Yu and Jolly Chen added an SQL language interpreter to POSTGRES . Under a new name, Postgres95 was subsequently released to the web to find its own way in the world as an open-source descendant of the original POSTGRES Berkeley code. Postgres95 code was completely ANSI C and trimmed in size by 25%. Many internal changes improved performance and maintainability. Postgres95 release 1.0.x ran about 30–50% faster on the Wisconsin Benchmark compared to POSTGRES , Version 4.2. Apart from bug fixes, the following were the major enhancements: The query language PostQUEL was replaced with SQL (implemented in the server). (Interface library libpq was named after PostQUEL.) Subqueries were not supported until PostgreSQL (see below), but they could be imitated in Postgres95 with user-defined SQL functions. Aggregate functions were re-implemented. Support for the GROUP BY query clause was also added. A new program ( psql ) was provided for interactive SQL queries, which used GNU Readline . This largely superseded the old monitor program. A new front-end library, libpgtcl , supported Tcl -based clients. A sample shell, pgtclsh , provided new Tcl commands to interface Tcl programs with the Postgres95 server. The large-object interface was overhauled. The inversion large objects were the only mechanism for storing large objects. (The inversion file system was removed.) The instance-level rule system was removed. Rules were still available as rewrite rules. A short tutorial introducing regular SQL features as well as those of Postgres95 was distributed with the source code GNU make (instead of BSD make) was used for the build. Also, Postgres95 could be compiled with an unpatched GCC (data alignment of doubles was fixed). 2.3. PostgreSQL By 1996, it became clear that the name “ Postgres95 ” would not stand the test of time. We chose a new name, PostgreSQL , to reflect the relationship between the original POSTGRES and the more recent versions with SQL capability. At the same time, we set the version numbering to start at 6.0, putting the numbers back into the sequence originally begun by the Berkeley POSTGRES project. Postgres is still considered an official project name, both because of tradition and because people find it easier to pronounce Postgres than PostgreSQL . The emphasis during development of Postgres95 was on identifying and understanding existing problems in the server code. With PostgreSQL , the emphasis has shifted to augmenting features and capabilities, although work continues in all areas. Details about what has happened in PostgreSQL since then can be found in Appendix E ."
https://www.postgresql.org/docs/15/ecpg.html,Chapter 36.ECPG— EmbeddedSQLin C,"This chapter describes the embedded SQL package for PostgreSQL . It was written by Linus Tolke ( < linus@epact.se > ) and Michael Meskes ( < meskes@postgresql.org > ). Originally it was written to work with C . It also works with C++ , but it does not recognize all C++ constructs yet. This documentation is quite incomplete. But since this interface is standardized, additional information can be found in many resources about SQL."
https://www.postgresql.org/docs/15/maintenance.html,Chapter 25. Routine Database Maintenance Tasks,"PostgreSQL , like any database software, requires that certain tasks be performed regularly to achieve optimum performance. The tasks discussed here are required , but they are repetitive in nature and can easily be automated using standard tools such as cron scripts or Windows' Task Scheduler . It is the database administrator's responsibility to set up appropriate scripts, and to check that they execute successfully. One obvious maintenance task is the creation of backup copies of the data on a regular schedule. Without a recent backup, you have no chance of recovery after a catastrophe (disk failure, fire, mistakenly dropping a critical table, etc.). The backup and recovery mechanisms available in PostgreSQL are discussed at length in Chapter 26 . The other main category of maintenance task is periodic “ vacuuming ” of the database. This activity is discussed in Section 25.1 . Closely related to this is updating the statistics that will be used by the query planner, as discussed in Section 25.1.3 . Another task that might need periodic attention is log file management. This is discussed in Section 25.3 . check_postgres is available for monitoring database health and reporting unusual conditions. check_postgres integrates with Nagios and MRTG, but can be run standalone too. PostgreSQL is low-maintenance compared to some other database management systems. Nonetheless, appropriate attention to these tasks will go far towards ensuring a pleasant and productive experience with the system."
https://www.postgresql.org/docs/15/appendix-obsolete.html,Appendix O. Obsolete or Renamed Features,"Functionality is sometimes removed from PostgreSQL, feature, setting and file names sometimes change, or documentation moves to different places. This section directs users coming from old versions of the documentation or from external links to the appropriate new location for the information they need."
https://www.postgresql.org/docs/15/fdwhandler.html,Chapter 59. Writing a Foreign Data Wrapper,"All operations on a foreign table are handled through its foreign data wrapper, which consists of a set of functions that the core server calls. The foreign data wrapper is responsible for fetching data from the remote data source and returning it to the PostgreSQL executor. If updating foreign tables is to be supported, the wrapper must handle that, too. This chapter outlines how to write a new foreign data wrapper. The foreign data wrappers included in the standard distribution are good references when trying to write your own. Look into the contrib subdirectory of the source tree. The CREATE FOREIGN DATA WRAPPER reference page also has some useful details. Note The SQL standard specifies an interface for writing foreign data wrappers. However, PostgreSQL does not implement that API, because the effort to accommodate it into PostgreSQL would be large, and the standard API hasn't gained wide adoption anyway."
https://www.postgresql.org/docs/15/custom-rmgr.html,Chapter 66. Custom WAL Resource Managers,"This chapter explains the interface between the core PostgreSQL system and custom WAL resource managers, which enable extensions to integrate directly with the WAL . An extension, especially a Table Access Method or Index Access Method , may need to use WAL for recovery, replication, and/or Logical Decoding . Custom resource managers are a more flexible alternative to Generic WAL (which does not support logical decoding), but more complex for an extension to implement. To create a new custom WAL resource manager, first define an RmgrData structure with implementations for the resource manager methods. Refer to src/backend/access/transam/README and src/include/access/xlog_internal.h in the PostgreSQL source. /* * Method table for resource managers. * * This struct must be kept in sync with the PG_RMGR definition in * rmgr.c. * * rm_identify must return a name for the record based on xl_info (without * reference to the rmid). For example, XLOG_BTREE_VACUUM would be named * ""VACUUM"". rm_desc can then be called to obtain additional detail for the * record, if available (e.g. the last block). * * rm_mask takes as input a page modified by the resource manager and masks * out bits that shouldn't be flagged by wal_consistency_checking. * * RmgrTable[] is indexed by RmgrId values (see rmgrlist.h). If rm_name is * NULL, the corresponding RmgrTable entry is considered invalid. */ typedef struct RmgrData { const char *rm_name; void (*rm_redo) (XLogReaderState *record); void (*rm_desc) (StringInfo buf, XLogReaderState *record); const char *(*rm_identify) (uint8 info); void (*rm_startup) (void); void (*rm_cleanup) (void); void (*rm_mask) (char *pagedata, BlockNumber blkno); void (*rm_decode) (struct LogicalDecodingContext *ctx, struct XLogRecordBuffer *buf); } RmgrData; Then, register your new resource manager. /* * Register a new custom WAL resource manager. * * Resource manager IDs must be globally unique across all extensions. Refer * to https://wiki.postgresql.org/wiki/CustomWALResourceManagers to reserve a * unique RmgrId for your extension, to avoid conflicts with other extension * developers. During development, use RM_EXPERIMENTAL_ID to avoid needlessly * reserving a new ID. */ extern void RegisterCustomRmgr(RmgrId rmid, RmgrData *rmgr); RegisterCustomRmgr must be called from the extension module's _PG_init function. While developing a new extension, use RM_EXPERIMENTAL_ID for rmid . When you are ready to release the extension to users, reserve a new resource manager ID at the Custom WAL Resource Manager page. Place the extension module implementing the custom resource manager in shared_preload_libraries so that it will be loaded early during PostgreSQL startup. Note The extension must remain in shared_preload_libraries as long as any custom WAL records may exist in the system. Otherwise PostgreSQL will not be able to apply or decode the custom WAL records, which may prevent the server from starting."
https://www.postgresql.org/docs/15/pltcl.html,Chapter 44. PL/Tcl — Tcl Procedural Language,PL/Tcl is a loadable procedural language for the PostgreSQL database system that enables the Tcl language to be used to write PostgreSQL functions and procedures.
https://www.postgresql.org/docs/15/tableam.html,Chapter 63. Table Access Method Interface Definition,"This chapter explains the interface between the core PostgreSQL system and table access methods , which manage the storage for tables. The core system knows little about these access methods beyond what is specified here, so it is possible to develop entirely new access method types by writing add-on code. Each table access method is described by a row in the pg_am system catalog. The pg_am entry specifies a name and a handler function for the table access method. These entries can be created and deleted using the CREATE ACCESS METHOD and DROP ACCESS METHOD SQL commands. A table access method handler function must be declared to accept a single argument of type internal and to return the pseudo-type table_am_handler . The argument is a dummy value that simply serves to prevent handler functions from being called directly from SQL commands. The result of the function must be a pointer to a struct of type TableAmRoutine , which contains everything that the core code needs to know to make use of the table access method. The return value needs to be of server lifetime, which is typically achieved by defining it as a static const variable in global scope. The TableAmRoutine struct, also called the access method's API struct , defines the behavior of the access method using callbacks. These callbacks are pointers to plain C functions and are not visible or callable at the SQL level. All the callbacks and their behavior is defined in the TableAmRoutine structure (with comments inside the struct defining the requirements for callbacks). Most callbacks have wrapper functions, which are documented from the point of view of a user (rather than an implementor) of the table access method. For details, please refer to the src/include/access/tableam.h file. To implement an access method, an implementor will typically need to implement an AM-specific type of tuple table slot (see src/include/executor/tuptable.h ), which allows code outside the access method to hold references to tuples of the AM, and to access the columns of the tuple. Currently, the way an AM actually stores data is fairly unconstrained. For example, it's possible, but not required, to use postgres' shared buffer cache. In case it is used, it likely makes sense to use PostgreSQL 's standard page layout as described in Section 73.6 . One fairly large constraint of the table access method API is that, currently, if the AM wants to support modifications and/or indexes, it is necessary for each tuple to have a tuple identifier ( TID ) consisting of a block number and an item number (see also Section 73.6 ). It is not strictly necessary that the sub-parts of TIDs have the same meaning they e.g., have for heap , but if bitmap scan support is desired (it is optional), the block number needs to provide locality. For crash safety, an AM can use postgres' WAL , or a custom implementation. If WAL is chosen, either Generic WAL Records can be used, or a Custom WAL Resource Manager can be implemented. To implement transactional support in a manner that allows different table access methods be accessed within a single transaction, it likely is necessary to closely integrate with the machinery in src/backend/access/transam/xlog.c . Any developer of a new table access method can refer to the existing heap implementation present in src/backend/access/heap/heapam_handler.c for details of its implementation."
https://www.postgresql.org/docs/15/protocol.html,Chapter 55. Frontend/Backend Protocol,"PostgreSQL uses a message-based protocol for communication between frontends and backends (clients and servers). The protocol is supported over TCP/IP and also over Unix-domain sockets. Port number 5432 has been registered with IANA as the customary TCP port number for servers supporting this protocol, but in practice any non-privileged port number can be used. This document describes version 3.0 of the protocol, implemented in PostgreSQL 7.4 and later. For descriptions of the earlier protocol versions, see previous releases of the PostgreSQL documentation. A single server can support multiple protocol versions. The initial startup-request message tells the server which protocol version the client is attempting to use. If the major version requested by the client is not supported by the server, the connection will be rejected (for example, this would occur if the client requested protocol version 4.0, which does not exist as of this writing). If the minor version requested by the client is not supported by the server (e.g., the client requests version 3.1, but the server supports only 3.0), the server may either reject the connection or may respond with a NegotiateProtocolVersion message containing the highest minor protocol version which it supports. The client may then choose either to continue with the connection using the specified protocol version or to abort the connection. In order to serve multiple clients efficiently, the server launches a new “ backend ” process for each client. In the current implementation, a new child process is created immediately after an incoming connection is detected. This is transparent to the protocol, however. For purposes of the protocol, the terms “ backend ” and “ server ” are interchangeable; likewise “ frontend ” and “ client ” are interchangeable."
https://www.postgresql.org/docs/15/install-binaries.html,Chapter 16. Installation from Binaries,"PostgreSQL is available in the form of binary packages for most common operating systems today. When available, this is the recommended way to install PostgreSQL for users of the system. Building from source (see Chapter 17 ) is only recommended for people developing PostgreSQL or extensions. For an updated list of platforms providing binary packages, please visit the download section on the PostgreSQL website at https://www.postgresql.org/download/ and follow the instructions for the specific platform."
https://www.postgresql.org/docs/15/largeobjects.html,Chapter 35. Large Objects,"PostgreSQL has a large object facility, which provides stream-style access to user data that is stored in a special large-object structure. Streaming access is useful when working with data values that are too large to manipulate conveniently as a whole. This chapter describes the implementation and the programming and query language interfaces to PostgreSQL large object data. We use the libpq C library for the examples in this chapter, but most programming interfaces native to PostgreSQL support equivalent functionality. Other interfaces might use the large object interface internally to provide generic support for large values. This is not described here."
https://www.postgresql.org/docs/15/spi.html,Chapter 47. Server Programming Interface,"The Server Programming Interface ( SPI ) gives writers of user-defined C functions the ability to run SQL commands inside their functions or procedures. SPI is a set of interface functions to simplify access to the parser, planner, and executor. SPI also does some memory management. Note The available procedural languages provide various means to execute SQL commands from functions. Most of these facilities are based on SPI, so this documentation might be of use for users of those languages as well. Note that if a command invoked via SPI fails, then control will not be returned to your C function. Rather, the transaction or subtransaction in which your C function executes will be rolled back. (This might seem surprising given that the SPI functions mostly have documented error-return conventions. Those conventions only apply for errors detected within the SPI functions themselves, however.) It is possible to recover control after an error by establishing your own subtransaction surrounding SPI calls that might fail. SPI functions return a nonnegative result on success (either via a returned integer value or in the global variable SPI_result , as described below). On error, a negative result or NULL will be returned. Source code files that use SPI must include the header file executor/spi.h ."
https://www.postgresql.org/docs/15/internals.html,No Title,Part VII. Internals This part contains assorted information that might be of use to PostgreSQL developers.
https://www.postgresql.org/docs/15/glossary.html,Appendix M. Glossary,"This is a list of terms and their meaning in the context of PostgreSQL and relational database systems in general. ACID Atomicity , Consistency , Isolation , and Durability . This set of properties of database transactions is intended to guarantee validity in concurrent operation and even in event of errors, power failures, etc. Aggregate function (routine) A function that combines ( aggregates ) multiple input values, for example by counting, averaging or adding, yielding a single output value. For more information, see Section 9.21 . See Also Window function (routine) . Analytic function See Window function (routine) . Analyze (operation) The act of collecting statistics from data in tables and other relations to help the query planner to make decisions about how to execute queries . (Don't confuse this term with the ANALYZE option to the EXPLAIN command.) For more information, see ANALYZE . Atomic In reference to a datum : the fact that its value cannot be broken down into smaller components. In reference to a database transaction : see atomicity . Atomicity The property of a transaction that either all its operations complete as a single unit or none do. In addition, if a system failure occurs during the execution of a transaction, no partial results are visible after recovery. This is one of the ACID properties. Attribute An element with a certain name and data type found within a tuple . Autovacuum (process) A set of background processes that routinely perform vacuum and analyze operations. The auxiliary process that coordinates the work and is always present (unless autovacuum is disabled) is known as the autovacuum launcher , and the processes that carry out the tasks are known as the autovacuum workers . For more information, see Section 25.1.6 . Auxiliary process A process within an instance that is in charge of some specific background task for the instance. The auxiliary processes consist of the autovacuum launcher (but not the autovacuum workers), the background writer , the checkpointer , the logger , the startup process , the WAL archiver , the WAL receiver (but not the WAL senders ), and the WAL writer . Backend (process) Process of an instance which acts on behalf of a client session and handles its requests. (Don't confuse this term with the similar terms Background Worker or Background Writer ). Background worker (process) Process within an instance , which runs system- or user-supplied code. Serves as infrastructure for several features in PostgreSQL , such as logical replication and parallel queries . In addition, Extensions can add custom background worker processes. For more information, see Chapter 48 . Background writer (process) An auxiliary process that writes dirty data pages from shared memory to the file system. It wakes up periodically, but works only for a short period in order to distribute its expensive I/O activity over time to avoid generating larger I/O peaks which could block other processes. For more information, see Section 20.4.5 . Base Backup A binary copy of all database cluster files. It is generated by the tool pg_basebackup . In combination with WAL files it can be used as the starting point for recovery, log shipping, or streaming replication. Bloat Space in data pages which does not contain current row versions, such as unused (free) space or outdated row versions. Cast A conversion of a datum from its current data type to another data type. For more information, see CREATE CAST . Catalog The SQL standard uses this term to indicate what is called a database in PostgreSQL 's terminology. (Don't confuse this term with system catalog ). For more information, see Section 23.1 . Check constraint A type of constraint defined on a relation which restricts the values allowed in one or more attributes . The check constraint can make reference to any attribute of the same row in the relation, but cannot reference other rows of the same relation or other relations. For more information, see Section 5.4 . Checkpoint A point in the WAL sequence at which it is guaranteed that the heap and index data files have been updated with all information from shared memory modified before that checkpoint; a checkpoint record is written and flushed to WAL to mark that point. A checkpoint is also the act of carrying out all the actions that are necessary to reach a checkpoint as defined above. This process is initiated when predefined conditions are met, such as a specified amount of time has passed, or a certain volume of records has been written; or it can be invoked by the user with the command CHECKPOINT . For more information, see Section 30.5 . Checkpointer (process) An auxiliary process that is responsible for executing checkpoints . Class (archaic) See Relation . Client (process) Any process, possibly remote, that establishes a session by connecting to an instance to interact with a database . Column An attribute found in a table or view . Commit The act of finalizing a transaction within the database , which makes it visible to other transactions and assures its durability . For more information, see COMMIT . Concurrency The concept that multiple independent operations happen within the database at the same time. In PostgreSQL , concurrency is controlled by the multiversion concurrency control mechanism. Connection An established line of communication between a client process and a backend process, usually over a network, supporting a session . This term is sometimes used as a synonym for session. For more information, see Section 20.3 . Consistency The property that the data in the database is always in compliance with integrity constraints . Transactions may be allowed to violate some of the constraints transiently before it commits, but if such violations are not resolved by the time it commits, such a transaction is automatically rolled back . This is one of the ACID properties. Constraint A restriction on the values of data allowed within a table , or in attributes of a domain . For more information, see Section 5.4 . Cumulative Statistics System A system which, if enabled, accumulates statistical information about the instance 's activities. For more information, see Section 28.2 . Data area See Data directory . Database A named collection of local SQL objects . For more information, see Section 23.1 . Database cluster A collection of databases and global SQL objects, and their common static and dynamic metadata. Sometimes referred to as a cluster . In PostgreSQL , the term cluster is also sometimes used to refer to an instance. (Don't confuse this term with the SQL command CLUSTER .) Database server See Instance . Data directory The base directory on the file system of a server that contains all data files and subdirectories associated with a database cluster (with the exception of tablespaces , and optionally WAL ). The environment variable PGDATA is commonly used to refer to the data directory. A cluster 's storage space comprises the data directory plus any additional tablespaces. For more information, see Section 73.1 . Data page The basic structure used to store relation data. All pages are of the same size. Data pages are typically stored on disk, each in a specific file, and can be read to shared buffers where they can be modified, becoming dirty . They become clean when written to disk. New pages, which initially exist in memory only, are also dirty until written. Datum The internal representation of one value of an SQL data type. Delete An SQL command which removes rows from a given table or relation . For more information, see DELETE . Domain A user-defined data type that is based on another underlying data type. It acts the same as the underlying type except for possibly restricting the set of allowed values. For more information, see Section 8.18 . Durability The assurance that once a transaction has been committed , the changes remain even after a system failure or crash. This is one of the ACID properties. Epoch See Transaction ID . Extension A software add-on package that can be installed on an instance to get extra features. For more information, see Section 38.17 . File segment A physical file which stores data for a given relation . File segments are limited in size by a configuration value (typically 1 gigabyte), so if a relation exceeds that size, it is split into multiple segments. For more information, see Section 73.1 . (Don't confuse this term with the similar term WAL segment ). Foreign data wrapper A means of representing data that is not contained in the local database so that it appears as if were in local table(s) . With a foreign data wrapper it is possible to define a foreign server and foreign tables . For more information, see CREATE FOREIGN DATA WRAPPER . Foreign key A type of constraint defined on one or more columns in a table which requires the value(s) in those columns to identify zero or one row in another (or, infrequently, the same) table . Foreign server A named collection of foreign tables which all use the same foreign data wrapper and have other configuration values in common. For more information, see CREATE SERVER . Foreign table (relation) A relation which appears to have rows and columns similar to a regular table , but will forward requests for data through its foreign data wrapper , which will return result sets structured according to the definition of the foreign table . For more information, see CREATE FOREIGN TABLE . Fork Each of the separate segmented file sets in which a relation is stored. The main fork is where the actual data resides. There also exist two secondary forks for metadata: the free space map and the visibility map . Unlogged relations also have an init fork . Free space map (fork) A storage structure that keeps metadata about each data page of a table's main fork. The free space map entry for each page stores the amount of free space that's available for future tuples, and is structured to be efficiently searched for available space for a new tuple of a given size. For more information, see Section 73.3 . Function (routine) A type of routine that receives zero or more arguments, returns zero or more output values, and is constrained to run within one transaction. Functions are invoked as part of a query, for example via SELECT . Certain functions can return sets ; those are called set-returning functions . Functions can also be used for triggers to invoke. For more information, see CREATE FUNCTION . GMT See UTC . Grant An SQL command that is used to allow a user or role to access specific objects within the database . For more information, see GRANT . Heap Contains the values of row attributes (i.e., the data) for a relation . The heap is realized within one or more file segments in the relation's main fork . Host A computer that communicates with other computers over a network. This is sometimes used as a synonym for server . It is also used to refer to a computer where client processes run. Index (relation) A relation that contains data derived from a table or materialized view . Its internal structure supports fast retrieval of and access to the original data. For more information, see CREATE INDEX . Insert An SQL command used to add new data into a table . For more information, see INSERT . Instance A group of backend and auxiliary processes that communicate using a common shared memory area. One postmaster process manages the instance; one instance manages exactly one database cluster with all its databases. Many instances can run on the same server as long as their TCP ports do not conflict. The instance handles all key features of a DBMS : read and write access to files and shared memory, assurance of the ACID properties, connections to client processes , privilege verification, crash recovery, replication, etc. Isolation The property that the effects of a transaction are not visible to concurrent transactions before it commits. This is one of the ACID properties. For more information, see Section 13.2 . Join An operation and SQL keyword used in queries for combining data from multiple relations . Key A means of identifying a row within a table or other relation by values contained within one or more attributes in that relation. Lock A mechanism that allows a process to limit or prevent simultaneous access to a resource. Log file Log files contain human-readable text lines about events. Examples include login failures, long-running queries, etc. For more information, see Section 25.3 . Logged A table is considered logged if changes to it are sent to the WAL . By default, all regular tables are logged. A table can be specified as unlogged either at creation time or via the ALTER TABLE command. Logger (process) An auxiliary process which, if enabled, writes information about database events into the current log file . When reaching certain time- or volume-dependent criteria, a new log file is created. Also called syslogger . For more information, see Section 20.8 . Log record Archaic term for a WAL record . Master (server) See Primary (server) . Materialized The property that some information has been pre-computed and stored for later use, rather than computing it on-the-fly. This term is used in materialized view , to mean that the data derived from the view's query is stored on disk separately from the sources of that data. This term is also used to refer to some multi-step queries to mean that the data resulting from executing a given step is stored in memory (with the possibility of spilling to disk), so that it can be read multiple times by another step. Materialized view (relation) A relation that is defined by a SELECT statement (just like a view ), but stores data in the same way that a table does. It cannot be modified via INSERT , UPDATE , DELETE , or MERGE operations. For more information, see CREATE MATERIALIZED VIEW . Merge An SQL command used to conditionally add, modify, or remove rows in a given table , using data from a source relation . For more information, see MERGE . Multi-version concurrency control (MVCC) A mechanism designed to allow several transactions to be reading and writing the same rows without one process causing other processes to stall. In PostgreSQL , MVCC is implemented by creating copies ( versions ) of tuples as they are modified; after transactions that can see the old versions terminate, those old versions need to be removed. Null A concept of non-existence that is a central tenet of relational database theory. It represents the absence of a definite value. Optimizer See Query planner . Parallel query The ability to handle parts of executing a query to take advantage of parallel processes on servers with multiple CPU s. Partition One of several disjoint (not overlapping) subsets of a larger set. In reference to a partitioned table : One of the tables that each contain part of the data of the partitioned table, which is said to be the parent . The partition is itself a table, so it can also be queried directly; at the same time, a partition can sometimes be a partitioned table, allowing hierarchies to be created. In reference to a window function in a query , a partition is a user-defined criterion that identifies which neighboring rows of the query's result set can be considered by the function. Partitioned table (relation) A relation that is in semantic terms the same as a table , but whose storage is distributed across several partitions . Postmaster (process) The very first process of an instance . It starts and manages the auxiliary processes and creates backend processes on demand. For more information, see Section 19.3 . Primary key A special case of a unique constraint defined on a table or other relation that also guarantees that all of the attributes within the primary key do not have null values. As the name implies, there can be only one primary key per table, though it is possible to have multiple unique constraints that also have no null-capable attributes. Primary (server) When two or more databases are linked via replication , the server that is considered the authoritative source of information is called the primary , also known as a master . Procedure (routine) A type of routine. Their distinctive qualities are that they do not return values, and that they are allowed to make transactional statements such as COMMIT and ROLLBACK . They are invoked via the CALL command. For more information, see CREATE PROCEDURE . Query A request sent by a client to a backend , usually to return results or to modify data on the database. Query planner The part of PostgreSQL that is devoted to determining ( planning ) the most efficient way to execute queries . Also known as query optimizer , optimizer , or simply planner . Record See Tuple . Recycling See WAL file . Referential integrity A means of restricting data in one relation by a foreign key so that it must have matching data in another relation . Relation The generic term for all objects in a database that have a name and a list of attributes defined in a specific order. Tables , sequences , views , foreign tables , materialized views , composite types, and indexes are all relations. More generically, a relation is a set of tuples; for example, the result of a query is also a relation. In PostgreSQL , Class is an archaic synonym for relation . Replica (server) A database that is paired with a primary database and is maintaining a copy of some or all of the primary database's data. The foremost reasons for doing this are to allow for greater access to that data, and to maintain availability of the data in the event that the primary becomes unavailable. Replication The act of reproducing data on one server onto another server called a replica . This can take the form of physical replication , where all file changes from one server are copied verbatim, or logical replication where a defined subset of data changes are conveyed using a higher-level representation. Result set A relation transmitted from a backend process to a client upon the completion of an SQL command, usually a SELECT but it can be an INSERT , UPDATE , or DELETE command if the RETURNING clause is specified. The fact that a result set is a relation means that a query can be used in the definition of another query, becoming a subquery . Revoke A command to prevent access to a named set of database objects for a named list of roles . For more information, see REVOKE . Role A collection of access privileges to the instance . Roles are themselves a privilege that can be granted to other roles. This is often done for convenience or to ensure completeness when multiple users need the same privileges. For more information, see CREATE ROLE . Rollback A command to undo all of the operations performed since the beginning of a transaction . For more information, see ROLLBACK . Routine A defined set of instructions stored in the database system that can be invoked for execution. A routine can be written in a variety of programming languages. Routines can be functions (including set-returning functions and trigger functions ), aggregate functions , and procedures . Many routines are already defined within PostgreSQL itself, but user-defined ones can also be added. Row See Tuple . Savepoint A special mark in the sequence of steps in a transaction . Data modifications after this point in time may be reverted to the time of the savepoint. For more information, see SAVEPOINT . Schema A schema is a namespace for SQL objects , which all reside in the same database . Each SQL object must reside in exactly one schema. All system-defined SQL objects reside in schema pg_catalog . More generically, the term schema is used to mean all data descriptions ( table definitions, constraints , comments, etc.) for a given database or subset thereof. For more information, see Section 5.9 . Segment See File segment . Select The SQL command used to request data from a database . Normally, SELECT commands are not expected to modify the database in any way, but it is possible that functions invoked within the query could have side effects that do modify data. For more information, see SELECT . Sequence (relation) A type of relation that is used to generate values. Typically the generated values are sequential non-repeating numbers. They are commonly used to generate surrogate primary key values. Server A computer on which PostgreSQL instances run. The term server denotes real hardware, a container, or a virtual machine . This term is sometimes used to refer to an instance or to a host. Session A state that allows a client and a backend to interact, communicating over a connection . Shared memory RAM which is used by the processes common to an instance . It mirrors parts of database files, provides a transient area for WAL records , and stores additional common information. Note that shared memory belongs to the complete instance, not to a single database. The largest part of shared memory is known as shared buffers and is used to mirror part of data files, organized into pages. When a page is modified, it is called a dirty page until it is written back to the file system. For more information, see Section 20.4.1 . SQL object Any object that can be created with a CREATE command. Most objects are specific to one database, and are commonly known as local objects . Most local objects reside in a specific schema in their containing database, such as relations (all types), routines (all types), data types, etc. The names of such objects of the same type in the same schema are enforced to be unique. There also exist local objects that do not reside in schemas; some examples are extensions , data type casts , and foreign data wrappers . The names of such objects of the same type are enforced to be unique within the database. Other object types, such as roles , tablespaces , replication origins, subscriptions for logical replication, and databases themselves are not local SQL objects since they exist entirely outside of any specific database; they are called global objects . The names of such objects are enforced to be unique within the whole database cluster. For more information, see Section 23.1 . SQL standard A series of documents that define the SQL language. Standby (server) See Replica (server) . Startup process An auxiliary process that replays WAL during crash recovery and in a physical replica . (The name is historical: the startup process was named before replication was implemented; the name refers to its task as it relates to the server startup following a crash.) System catalog A collection of tables which describe the structure of all SQL objects of the instance. The system catalog resides in the schema pg_catalog . These tables contain data in internal representation and are not typically considered useful for user examination; a number of user-friendlier views , also in schema pg_catalog , offer more convenient access to some of that information, while additional tables and views exist in schema information_schema (see Chapter 37 ) that expose some of the same and additional information as mandated by the SQL standard . For more information, see Section 5.9 . Table A collection of tuples having a common data structure (the same number of attributes , in the same order, having the same name and type per position). A table is the most common form of relation in PostgreSQL . For more information, see CREATE TABLE . Tablespace A named location on the server file system. All SQL objects which require storage beyond their definition in the system catalog must belong to a single tablespace. Initially, a database cluster contains a single usable tablespace which is used as the default for all SQL objects, called pg_default . For more information, see Section 23.6 . Temporary table Tables that exist either for the lifetime of a session or a transaction , as specified at the time of creation. The data in them is not visible to other sessions, and is not logged . Temporary tables are often used to store intermediate data for a multi-step operation. For more information, see CREATE TABLE . TOAST A mechanism by which large attributes of table rows are split and stored in a secondary table, called the TOAST table . Each relation with large attributes has its own TOAST table. For more information, see Section 73.2 . Transaction A combination of commands that must act as a single atomic command: they all succeed or all fail as a single unit, and their effects are not visible to other sessions until the transaction is complete, and possibly even later, depending on the isolation level. For more information, see Section 13.2 . Transaction ID The numerical, unique, sequentially-assigned identifier that each transaction receives when it first causes a database modification. Frequently abbreviated as xid . When stored on disk, xids are only 32-bits wide, so only approximately four billion write transaction IDs can be generated; to permit the system to run for longer than that, epochs are used, also 32 bits wide. When the counter reaches the maximum xid value, it starts over at 3 (values under that are reserved) and the epoch value is incremented by one. In some contexts, the epoch and xid values are considered together as a single 64-bit value. For more information, see Section 8.19 . Transactions per second (TPS) Average number of transactions that are executed per second, totaled across all sessions active for a measured run. This is used as a measure of the performance characteristics of an instance. Trigger A function which can be defined to execute whenever a certain operation ( INSERT , UPDATE , DELETE , TRUNCATE ) is applied to a relation . A trigger executes within the same transaction as the statement which invoked it, and if the function fails, then the invoking statement also fails. For more information, see CREATE TRIGGER . Tuple A collection of attributes in a fixed order. That order may be defined by the table (or other relation ) where the tuple is contained, in which case the tuple is often called a row . It may also be defined by the structure of a result set, in which case it is sometimes called a record . Unique constraint A type of constraint defined on a relation which restricts the values allowed in one or a combination of columns so that each value or combination of values can only appear once in the relation — that is, no other row in the relation contains values that are equal to those. Because null values are not considered equal to each other, multiple rows with null values are allowed to exist without violating the unique constraint. Unlogged The property of certain relations that the changes to them are not reflected in the WAL . This disables replication and crash recovery for these relations. The primary use of unlogged tables is for storing transient work data that must be shared across processes. Temporary tables are always unlogged. Update An SQL command used to modify rows that may already exist in a specified table . It cannot create or remove rows. For more information, see UPDATE . User A role that has the LOGIN privilege. User mapping The translation of login credentials in the local database to credentials in a remote data system defined by a foreign data wrapper . For more information, see CREATE USER MAPPING . UTC Universal Coordinated Time, the primary global time reference, approximately the time prevailing at the zero meridian of longitude. Often but inaccurately referred to as GMT (Greenwich Mean Time). Vacuum The process of removing outdated tuple versions from tables or materialized views, and other closely related processing required by PostgreSQL 's implementation of MVCC . This can be initiated through the use of the VACUUM command, but can also be handled automatically via autovacuum processes. For more information, see Section 25.1 . View A relation that is defined by a SELECT statement, but has no storage of its own. Any time a query references a view, the definition of the view is substituted into the query as if the user had typed it as a subquery instead of the name of the view. For more information, see CREATE VIEW . Visibility map (fork) A storage structure that keeps metadata about each data page of a table's main fork. The visibility map entry for each page stores two bits: the first one ( all-visible ) indicates that all tuples in the page are visible to all transactions. The second one ( all-frozen ) indicates that all tuples in the page are marked frozen. WAL See Write-ahead log . WAL archiver (process) An auxiliary process which, if enabled, saves copies of WAL files for the purpose of creating backups or keeping replicas current. For more information, see Section 26.3 . WAL file Also known as WAL segment or WAL segment file . Each of the sequentially-numbered files that provide storage space for WAL . The files are all of the same predefined size and are written in sequential order, interspersing changes as they occur in multiple simultaneous sessions. If the system crashes, the files are read in order, and each of the changes is replayed to restore the system to the state it was in before the crash. Each WAL file can be released after a checkpoint writes all the changes in it to the corresponding data files. Releasing the file can be done either by deleting it, or by changing its name so that it will be used in the future, which is called recycling . For more information, see Section 30.6 . WAL record A low-level description of an individual data change. It contains sufficient information for the data change to be re-executed ( replayed ) in case a system failure causes the change to be lost. WAL records use a non-printable binary format. For more information, see Section 30.6 . WAL receiver (process) An auxiliary process that runs on a replica to receive WAL from the primary server for replay by the startup process . For more information, see Section 27.2 . WAL segment See WAL file . WAL sender (process) A special backend process that streams WAL over a network. The receiving end can be a WAL receiver in a replica , pg_receivewal , or any other client program that speaks the replication protocol. WAL writer (process) An auxiliary process that writes WAL records from shared memory to WAL files . For more information, see Section 20.5 . Window function (routine) A type of function used in a query that applies to a partition of the query's result set ; the function's result is based on values found in rows of the same partition or frame. All aggregate functions can be used as window functions, but window functions can also be used to, for example, give ranks to each of the rows in the partition. Also known as analytic functions . For more information, see Section 3.5 . Write-ahead log The journal that keeps track of the changes in the database cluster as user- and system-invoked operations take place. It comprises many individual WAL records written sequentially to WAL files ."
https://www.postgresql.org/docs/15/features.html,Appendix D. SQL Conformance,"This section attempts to outline to what extent PostgreSQL conforms to the current SQL standard. The following information is not a full statement of conformance, but it presents the main topics in as much detail as is both reasonable and useful for users. The formal name of the SQL standard is ISO/IEC 9075 “ Database Language SQL ” . A revised version of the standard is released from time to time; the most recent update appearing in 2016. The 2016 version is referred to as ISO/IEC 9075:2016, or simply as SQL:2016. The versions prior to that were SQL:2011, SQL:2008, SQL:2006, SQL:2003, SQL:1999, and SQL-92. Each version replaces the previous one, so claims of conformance to earlier versions have no official merit. PostgreSQL development aims for conformance with the latest official version of the standard where such conformance does not contradict traditional features or common sense. Many of the features required by the SQL standard are supported, though sometimes with slightly differing syntax or function. Further moves towards conformance can be expected over time. SQL-92 defined three feature sets for conformance: Entry, Intermediate, and Full. Most database management systems claiming SQL standard conformance were conforming at only the Entry level, since the entire set of features in the Intermediate and Full levels was either too voluminous or in conflict with legacy behaviors. Starting with SQL:1999 , the SQL standard defines a large set of individual features rather than the ineffectively broad three levels found in SQL-92 . A large subset of these features represents the “ Core ” features, which every conforming SQL implementation must supply. The rest of the features are purely optional. The standard versions beginning with SQL:2003 are also split into a number of parts. Each is known by a shorthand name. Note that these parts are not consecutively numbered. ISO/IEC 9075-1 Framework (SQL/Framework) ISO/IEC 9075-2 Foundation (SQL/Foundation) ISO/IEC 9075-3 Call Level Interface (SQL/CLI) ISO/IEC 9075-4 Persistent Stored Modules (SQL/PSM) ISO/IEC 9075-9 Management of External Data (SQL/MED) ISO/IEC 9075-10 Object Language Bindings (SQL/OLB) ISO/IEC 9075-11 Information and Definition Schemas (SQL/Schemata) ISO/IEC 9075-13 Routines and Types using the Java Language (SQL/JRT) ISO/IEC 9075-14 XML-related specifications (SQL/XML) ISO/IEC 9075-15 Multi-dimensional arrays (SQL/MDA) The PostgreSQL core covers parts 1, 2, 9, 11, and 14. Part 3 is covered by the ODBC driver, and part 13 is covered by the PL/Java plug-in, but exact conformance is currently not being verified for these components. There are currently no implementations of parts 4, 10, and 15 for PostgreSQL . PostgreSQL supports most of the major features of SQL:2016. Out of 177 mandatory features required for full Core conformance, PostgreSQL conforms to at least 170. In addition, there is a long list of supported optional features. It might be worth noting that at the time of writing, no current version of any database management system claims full conformance to Core SQL:2016. In the following two sections, we provide a list of those features that PostgreSQL supports, followed by a list of the features defined in SQL:2016 which are not yet supported in PostgreSQL . Both of these lists are approximate: There might be minor details that are nonconforming for a feature that is listed as supported, and large parts of an unsupported feature might in fact be implemented. The main body of the documentation always contains the most accurate information about what does and does not work. Note Feature codes containing a hyphen are subfeatures. Therefore, if a particular subfeature is not supported, the main feature is listed as unsupported even if some other subfeatures are supported."
https://www.postgresql.org/docs/15/queries.html,Chapter 7. Queries,"The previous chapters explained how to create tables, how to fill them with data, and how to manipulate that data. Now we finally discuss how to retrieve the data from the database."
https://www.postgresql.org/docs/15/planner-stats-details.html,Chapter 75. How the Planner Uses Statistics,"This chapter builds on the material covered in Section 14.1 and Section 14.2 to show some additional details about how the planner uses the system statistics to estimate the number of rows each part of a query might return. This is a significant part of the planning process, providing much of the raw material for cost calculation. The intent of this chapter is not to document the code in detail, but to present an overview of how it works. This will perhaps ease the learning curve for someone who subsequently wishes to read the code."
https://www.postgresql.org/docs/15/bug-reporting.html,5. Bug Reporting Guidelines,"When you find a bug in PostgreSQL we want to hear about it. Your bug reports play an important part in making PostgreSQL more reliable because even the utmost care cannot guarantee that every part of PostgreSQL will work on every platform under every circumstance. The following suggestions are intended to assist you in forming bug reports that can be handled in an effective fashion. No one is required to follow them but doing so tends to be to everyone's advantage. We cannot promise to fix every bug right away. If the bug is obvious, critical, or affects a lot of users, chances are good that someone will look into it. It could also happen that we tell you to update to a newer version to see if the bug happens there. Or we might decide that the bug cannot be fixed before some major rewrite we might be planning is done. Or perhaps it is simply too hard and there are more important things on the agenda. If you need help immediately, consider obtaining a commercial support contract. 5.1. Identifying Bugs Before you report a bug, please read and re-read the documentation to verify that you can really do whatever it is you are trying. If it is not clear from the documentation whether you can do something or not, please report that too; it is a bug in the documentation. If it turns out that a program does something different from what the documentation says, that is a bug. That might include, but is not limited to, the following circumstances: A program terminates with a fatal signal or an operating system error message that would point to a problem in the program. (A counterexample might be a “ disk full ” message, since you have to fix that yourself.) A program produces the wrong output for any given input. A program refuses to accept valid input (as defined in the documentation). A program accepts invalid input without a notice or error message. But keep in mind that your idea of invalid input might be our idea of an extension or compatibility with traditional practice. PostgreSQL fails to compile, build, or install according to the instructions on supported platforms. Here “ program ” refers to any executable, not only the backend process. Being slow or resource-hogging is not necessarily a bug. Read the documentation or ask on one of the mailing lists for help in tuning your applications. Failing to comply to the SQL standard is not necessarily a bug either, unless compliance for the specific feature is explicitly claimed. Before you continue, check on the TODO list and in the FAQ to see if your bug is already known. If you cannot decode the information on the TODO list, report your problem. The least we can do is make the TODO list clearer. 5.2. What to Report The most important thing to remember about bug reporting is to state all the facts and only facts. Do not speculate what you think went wrong, what “ it seemed to do ” , or which part of the program has a fault. If you are not familiar with the implementation you would probably guess wrong and not help us a bit. And even if you are, educated explanations are a great supplement to but no substitute for facts. If we are going to fix the bug we still have to see it happen for ourselves first. Reporting the bare facts is relatively straightforward (you can probably copy and paste them from the screen) but all too often important details are left out because someone thought it does not matter or the report would be understood anyway. The following items should be contained in every bug report: The exact sequence of steps from program start-up necessary to reproduce the problem. This should be self-contained; it is not enough to send in a bare SELECT statement without the preceding CREATE TABLE and INSERT statements, if the output should depend on the data in the tables. We do not have the time to reverse-engineer your database schema, and if we are supposed to make up our own data we would probably miss the problem. The best format for a test case for SQL-related problems is a file that can be run through the psql frontend that shows the problem. (Be sure to not have anything in your ~/.psqlrc start-up file.) An easy way to create this file is to use pg_dump to dump out the table declarations and data needed to set the scene, then add the problem query. You are encouraged to minimize the size of your example, but this is not absolutely necessary. If the bug is reproducible, we will find it either way. If your application uses some other client interface, such as PHP , then please try to isolate the offending queries. We will probably not set up a web server to reproduce your problem. In any case remember to provide the exact input files; do not guess that the problem happens for “ large files ” or “ midsize databases ” , etc. since this information is too inexact to be of use. The output you got. Please do not say that it “ didn't work ” or “ crashed ” . If there is an error message, show it, even if you do not understand it. If the program terminates with an operating system error, say which. If nothing at all happens, say so. Even if the result of your test case is a program crash or otherwise obvious it might not happen on our platform. The easiest thing is to copy the output from the terminal, if possible. Note If you are reporting an error message, please obtain the most verbose form of the message. In psql , say \set VERBOSITY verbose beforehand. If you are extracting the message from the server log, set the run-time parameter log_error_verbosity to verbose so that all details are logged. Note In case of fatal errors, the error message reported by the client might not contain all the information available. Please also look at the log output of the database server. If you do not keep your server's log output, this would be a good time to start doing so. The output you expected is very important to state. If you just write “ This command gives me that output. ” or “ This is not what I expected. ” , we might run it ourselves, scan the output, and think it looks OK and is exactly what we expected. We should not have to spend the time to decode the exact semantics behind your commands. Especially refrain from merely saying that “ This is not what SQL says/Oracle does. ” Digging out the correct behavior from SQL is not a fun undertaking, nor do we all know how all the other relational databases out there behave. (If your problem is a program crash, you can obviously omit this item.) Any command line options and other start-up options, including any relevant environment variables or configuration files that you changed from the default. Again, please provide exact information. If you are using a prepackaged distribution that starts the database server at boot time, you should try to find out how that is done. Anything you did at all differently from the installation instructions. The PostgreSQL version. You can run the command SELECT version(); to find out the version of the server you are connected to. Most executable programs also support a --version option; at least postgres --version and psql --version should work. If the function or the options do not exist then your version is more than old enough to warrant an upgrade. If you run a prepackaged version, such as RPMs, say so, including any subversion the package might have. If you are talking about a Git snapshot, mention that, including the commit hash. If your version is older than 15.14 we will almost certainly tell you to upgrade. There are many bug fixes and improvements in each new release, so it is quite possible that a bug you have encountered in an older release of PostgreSQL has already been fixed. We can only provide limited support for sites using older releases of PostgreSQL ; if you require more than we can provide, consider acquiring a commercial support contract. Platform information. This includes the kernel name and version, C library, processor, memory information, and so on. In most cases it is sufficient to report the vendor and version, but do not assume everyone knows what exactly “ Debian ” contains or that everyone runs on x86_64. If you have installation problems then information about the toolchain on your machine (compiler, make , and so on) is also necessary. Do not be afraid if your bug report becomes rather lengthy. That is a fact of life. It is better to report everything the first time than us having to squeeze the facts out of you. On the other hand, if your input files are huge, it is fair to ask first whether somebody is interested in looking into it. Here is an article that outlines some more tips on reporting bugs. Do not spend all your time to figure out which changes in the input make the problem go away. This will probably not help solving it. If it turns out that the bug cannot be fixed right away, you will still have time to find and share your work-around. Also, once again, do not waste your time guessing why the bug exists. We will find that out soon enough. When writing a bug report, please avoid confusing terminology. The software package in total is called “ PostgreSQL ” , sometimes “ Postgres ” for short. If you are specifically talking about the backend process, mention that, do not just say “ PostgreSQL crashes ” . A crash of a single backend process is quite different from crash of the parent “ postgres ” process; please don't say “ the server crashed ” when you mean a single backend process went down, nor vice versa. Also, client programs such as the interactive frontend “ psql ” are completely separate from the backend. Please try to be specific about whether the problem is on the client or server side. 5.3. Where to Report Bugs In general, send bug reports to the bug report mailing list at < pgsql-bugs@lists.postgresql.org > . You are requested to use a descriptive subject for your email message, perhaps parts of the error message. Another method is to fill in the bug report web-form available at the project's web site . Entering a bug report this way causes it to be mailed to the < pgsql-bugs@lists.postgresql.org > mailing list. If your bug report has security implications and you'd prefer that it not become immediately visible in public archives, don't send it to pgsql-bugs . Security issues can be reported privately to < security@postgresql.org > . Do not send bug reports to any of the user mailing lists, such as < pgsql-sql@lists.postgresql.org > or < pgsql-general@lists.postgresql.org > . These mailing lists are for answering user questions, and their subscribers normally do not wish to receive bug reports. More importantly, they are unlikely to fix them. Also, please do not send reports to the developers' mailing list < pgsql-hackers@lists.postgresql.org > . This list is for discussing the development of PostgreSQL , and it would be nice if we could keep the bug reports separate. We might choose to take up a discussion about your bug report on pgsql-hackers , if the problem needs more review. If you have a problem with the documentation, the best place to report it is the documentation mailing list < pgsql-docs@lists.postgresql.org > . Please be specific about what part of the documentation you are unhappy with. If your bug is a portability problem on a non-supported platform, send mail to < pgsql-hackers@lists.postgresql.org > , so we (and you) can work on porting PostgreSQL to your platform. Note Due to the unfortunate amount of spam going around, all of the above lists will be moderated unless you are subscribed. That means there will be some delay before the email is delivered. If you wish to subscribe to the lists, please visit https://lists.postgresql.org/ for instructions."
https://www.postgresql.org/docs/15/monitoring.html,Chapter 28. Monitoring Database Activity,"A database administrator frequently wonders, “ What is the system doing right now? ” This chapter discusses how to find that out. Several tools are available for monitoring database activity and analyzing performance. Most of this chapter is devoted to describing PostgreSQL 's cumulative statistics system, but one should not neglect regular Unix monitoring programs such as ps , top , iostat , and vmstat . Also, once one has identified a poorly-performing query, further investigation might be needed using PostgreSQL 's EXPLAIN command. Section 14.1 discusses EXPLAIN and other methods for understanding the behavior of an individual query."
https://www.postgresql.org/docs/15/indexam.html,Chapter 64. Index Access Method Interface Definition,"This chapter defines the interface between the core PostgreSQL system and index access methods , which manage individual index types. The core system knows nothing about indexes beyond what is specified here, so it is possible to develop entirely new index types by writing add-on code. All indexes in PostgreSQL are what are known technically as secondary indexes ; that is, the index is physically separate from the table file that it describes. Each index is stored as its own physical relation and so is described by an entry in the pg_class catalog. The contents of an index are entirely under the control of its index access method. In practice, all index access methods divide indexes into standard-size pages so that they can use the regular storage manager and buffer manager to access the index contents. (All the existing index access methods furthermore use the standard page layout described in Section 73.6 , and most use the same format for index tuple headers; but these decisions are not forced on an access method.) An index is effectively a mapping from some data key values to tuple identifiers , or TIDs , of row versions (tuples) in the index's parent table. A TID consists of a block number and an item number within that block (see Section 73.6 ). This is sufficient information to fetch a particular row version from the table. Indexes are not directly aware that under MVCC, there might be multiple extant versions of the same logical row; to an index, each tuple is an independent object that needs its own index entry. Thus, an update of a row always creates all-new index entries for the row, even if the key values did not change. ( HOT tuples are an exception to this statement; but indexes do not deal with those, either.) Index entries for dead tuples are reclaimed (by vacuuming) when the dead tuples themselves are reclaimed."
https://www.postgresql.org/docs/15/runtime.html,Chapter 19. Server Setup and Operation,"This chapter discusses how to set up and run the database server, and its interactions with the operating system. The directions in this chapter assume that you are working with plain PostgreSQL without any additional infrastructure, for example a copy that you built from source according to the directions in the preceding chapters. If you are working with a pre-packaged or vendor-supplied version of PostgreSQL , it is likely that the packager has made special provisions for installing and starting the database server according to your system's conventions. Consult the package-level documentation for details."
https://www.postgresql.org/docs/15/sql-commands.html,No Title,SQL Commands This part contains reference information for the SQL commands supported by PostgreSQL . By “ SQL ” the language in general is meant; information about the standards conformance and compatibility of each command can be found on the respective reference page.
https://www.postgresql.org/docs/15/datatype.html,Chapter 8. Data Types,"PostgreSQL has a rich set of native data types available to users. Users can add new types to PostgreSQL using the CREATE TYPE command. Table 8.1 shows all the built-in general-purpose data types. Most of the alternative names listed in the “ Aliases ” column are the names used internally by PostgreSQL for historical reasons. In addition, some internally used or deprecated types are available, but are not listed here. Table 8.1. Data Types Name Aliases Description bigint int8 signed eight-byte integer bigserial serial8 autoincrementing eight-byte integer bit [ ( n ) ] fixed-length bit string bit varying [ ( n ) ] varbit [ ( n ) ] variable-length bit string boolean bool logical Boolean (true/false) box rectangular box on a plane bytea binary data ( “ byte array ” ) character [ ( n ) ] char [ ( n ) ] fixed-length character string character varying [ ( n ) ] varchar [ ( n ) ] variable-length character string cidr IPv4 or IPv6 network address circle circle on a plane date calendar date (year, month, day) double precision float , float8 double precision floating-point number (8 bytes) inet IPv4 or IPv6 host address integer int , int4 signed four-byte integer interval [ fields ] [ ( p ) ] time span json textual JSON data jsonb binary JSON data, decomposed line infinite line on a plane lseg line segment on a plane macaddr MAC (Media Access Control) address macaddr8 MAC (Media Access Control) address (EUI-64 format) money currency amount numeric [ ( p , s ) ] decimal [ ( p , s ) ] exact numeric of selectable precision path geometric path on a plane pg_lsn PostgreSQL Log Sequence Number pg_snapshot user-level transaction ID snapshot point geometric point on a plane polygon closed geometric path on a plane real float4 single precision floating-point number (4 bytes) smallint int2 signed two-byte integer smallserial serial2 autoincrementing two-byte integer serial serial4 autoincrementing four-byte integer text variable-length character string time [ ( p ) ] [ without time zone ] time of day (no time zone) time [ ( p ) ] with time zone timetz time of day, including time zone timestamp [ ( p ) ] [ without time zone ] date and time (no time zone) timestamp [ ( p ) ] with time zone timestamptz date and time, including time zone tsquery text search query tsvector text search document txid_snapshot user-level transaction ID snapshot (deprecated; see pg_snapshot ) uuid universally unique identifier xml XML data Compatibility The following types (or spellings thereof) are specified by SQL : bigint , bit , bit varying , boolean , char , character varying , character , varchar , date , double precision , integer , interval , numeric , decimal , real , smallint , time (with or without time zone), timestamp (with or without time zone), xml . Each data type has an external representation determined by its input and output functions. Many of the built-in types have obvious external formats. However, several types are either unique to PostgreSQL , such as geometric paths, or have several possible formats, such as the date and time types. Some of the input and output functions are not invertible, i.e., the result of an output function might lose accuracy when compared to the original input."
https://www.postgresql.org/docs/15/server-programming.html,No Title,"Part V. Server Programming This part is about extending the server functionality with user-defined functions, data types, triggers, etc. These are advanced topics which should probably be approached only after all the other user documentation about PostgreSQL has been understood. Later chapters in this part describe the server-side programming languages available in the PostgreSQL distribution as well as general issues concerning server-side programming languages. It is essential to read at least the earlier sections of Chapter 38 (covering functions) before diving into the material about server-side programming languages."
https://www.postgresql.org/docs/15/reference-server.html,No Title,PostgreSQL Server Applications This part contains reference information for PostgreSQL server applications and support utilities. These commands can only be run usefully on the host where the database server resides. Other utility programs are listed in PostgreSQL Client Applications .
https://www.postgresql.org/docs/15/views.html,Chapter 54. System Views,"In addition to the system catalogs, PostgreSQL provides a number of built-in views. Some system views provide convenient access to some commonly used queries on the system catalogs. Other views provide access to internal server state. The information schema ( Chapter 37 ) provides an alternative set of views which overlap the functionality of the system views. Since the information schema is SQL-standard whereas the views described here are PostgreSQL -specific, it's usually better to use the information schema if it provides all the information you need. Table 54.1 lists the system views described here. More detailed documentation of each view follows below. There are some additional views that provide access to accumulated statistics; they are described in Table 28.2 ."
https://www.postgresql.org/docs/15/generic-wal.html,Chapter 65. Generic WAL Records,"Although all built-in WAL-logged modules have their own types of WAL records, there is also a generic WAL record type, which describes changes to pages in a generic way. This is useful for extensions that provide custom access methods. In comparison with Custom WAL Resource Managers , Generic WAL is simpler for an extension to implement and does not require the extension library to be loaded in order to apply the records. Note Generic WAL records are ignored during Logical Decoding . If logical decoding is required for your extension, consider a Custom WAL Resource Manager. The API for constructing generic WAL records is defined in access/generic_xlog.h and implemented in access/transam/generic_xlog.c . To perform a WAL-logged data update using the generic WAL record facility, follow these steps: state = GenericXLogStart(relation) — start construction of a generic WAL record for the given relation. page = GenericXLogRegisterBuffer(state, buffer, flags) — register a buffer to be modified within the current generic WAL record. This function returns a pointer to a temporary copy of the buffer's page, where modifications should be made. (Do not modify the buffer's contents directly.) The third argument is a bit mask of flags applicable to the operation. Currently the only such flag is GENERIC_XLOG_FULL_IMAGE , which indicates that a full-page image rather than a delta update should be included in the WAL record. Typically this flag would be set if the page is new or has been rewritten completely. GenericXLogRegisterBuffer can be repeated if the WAL-logged action needs to modify multiple pages. Apply modifications to the page images obtained in the previous step. GenericXLogFinish(state) — apply the changes to the buffers and emit the generic WAL record. WAL record construction can be canceled between any of the above steps by calling GenericXLogAbort(state) . This will discard all changes to the page image copies. Please note the following points when using the generic WAL record facility: No direct modifications of buffers are allowed! All modifications must be done in copies acquired from GenericXLogRegisterBuffer() . In other words, code that makes generic WAL records should never call BufferGetPage() for itself. However, it remains the caller's responsibility to pin/unpin and lock/unlock the buffers at appropriate times. Exclusive lock must be held on each target buffer from before GenericXLogRegisterBuffer() until after GenericXLogFinish() . Registrations of buffers (step 2) and modifications of page images (step 3) can be mixed freely, i.e., both steps may be repeated in any sequence. Keep in mind that buffers should be registered in the same order in which locks are to be obtained on them during replay. The maximum number of buffers that can be registered for a generic WAL record is MAX_GENERIC_XLOG_PAGES . An error will be thrown if this limit is exceeded. Generic WAL assumes that the pages to be modified have standard layout, and in particular that there is no useful data between pd_lower and pd_upper . Since you are modifying copies of buffer pages, GenericXLogStart() does not start a critical section. Thus, you can safely do memory allocation, error throwing, etc. between GenericXLogStart() and GenericXLogFinish() . The only actual critical section is present inside GenericXLogFinish() . There is no need to worry about calling GenericXLogAbort() during an error exit, either. GenericXLogFinish() takes care of marking buffers dirty and setting their LSNs. You do not need to do this explicitly. For unlogged relations, everything works the same except that no actual WAL record is emitted. Thus, you typically do not need to do any explicit checks for unlogged relations. The generic WAL redo function will acquire exclusive locks to buffers in the same order as they were registered. After redoing all changes, the locks will be released in the same order. If GENERIC_XLOG_FULL_IMAGE is not specified for a registered buffer, the generic WAL record contains a delta between the old and the new page images. This delta is based on byte-by-byte comparison. This is not very compact for the case of moving data within a page, and might be improved in the future."
https://www.postgresql.org/docs/15/bki.html,Chapter 74. System Catalog Declarations and Initial Contents,"PostgreSQL uses many different system catalogs to keep track of the existence and properties of database objects, such as tables and functions. Physically there is no difference between a system catalog and a plain user table, but the backend C code knows the structure and properties of each catalog, and can manipulate it directly at a low level. Thus, for example, it is inadvisable to attempt to alter the structure of a catalog on-the-fly; that would break assumptions built into the C code about how rows of the catalog are laid out. But the structure of the catalogs can change between major versions. The structures of the catalogs are declared in specially formatted C header files in the src/include/catalog/ directory of the source tree. For each catalog there is a header file named after the catalog (e.g., pg_class.h for pg_class ), which defines the set of columns the catalog has, as well as some other basic properties such as its OID. Many of the catalogs have initial data that must be loaded into them during the “ bootstrap ” phase of initdb , to bring the system up to a point where it is capable of executing SQL commands. (For example, pg_class.h must contain an entry for itself, as well as one for each other system catalog and index.) This initial data is kept in editable form in data files that are also stored in the src/include/catalog/ directory. For example, pg_proc.dat describes all the initial rows that must be inserted into the pg_proc catalog. To create the catalog files and load this initial data into them, a backend running in bootstrap mode reads a BKI (Backend Interface) file containing commands and initial data. The postgres.bki file used in this mode is prepared from the aforementioned header and data files, while building a PostgreSQL distribution, by a Perl script named genbki.pl . Although it's specific to a particular PostgreSQL release, postgres.bki is platform-independent and is installed in the share subdirectory of the installation tree. genbki.pl also produces a derived header file for each catalog, for example pg_class_d.h for the pg_class catalog. This file contains automatically-generated macro definitions, and may contain other macros, enum declarations, and so on that can be useful for client C code that reads a particular catalog. Most PostgreSQL developers don't need to be directly concerned with the BKI file, but almost any nontrivial feature addition in the backend will require modifying the catalog header files and/or initial data files. The rest of this chapter gives some information about that, and for completeness describes the BKI file format."
https://www.postgresql.org/docs/15/mvcc.html,Chapter 13. Concurrency Control,This chapter describes the behavior of the PostgreSQL database system when two or more sessions try to access the same data at the same time. The goals in that situation are to allow efficient access for all sessions while maintaining strict data integrity. Every developer of database applications should be familiar with the topics covered in this chapter.
https://www.postgresql.org/docs/15/archive-modules.html,Chapter 51. Archive Modules,"PostgreSQL provides infrastructure to create custom modules for continuous archiving (see Section 26.3 ). While archiving via a shell command (i.e., archive_command ) is much simpler, a custom archive module will often be considerably more robust and performant. When a custom archive_library is configured, PostgreSQL will submit completed WAL files to the module, and the server will avoid recycling or removing these WAL files until the module indicates that the files were successfully archived. It is ultimately up to the module to decide what to do with each WAL file, but many recommendations are listed at Section 26.3.1 . Archiving modules must at least consist of an initialization function (see Section 51.1 ) and the required callbacks (see Section 51.2 ). However, archive modules are also permitted to do much more (e.g., declare GUCs and register background workers). The contrib/basic_archive module contains a working example, which demonstrates some useful techniques."
https://www.postgresql.org/docs/15/information-schema.html,Chapter 37. The Information Schema,"The information schema consists of a set of views that contain information about the objects defined in the current database. The information schema is defined in the SQL standard and can therefore be expected to be portable and remain stable — unlike the system catalogs, which are specific to PostgreSQL and are modeled after implementation concerns. The information schema views do not, however, contain information about PostgreSQL -specific features; to inquire about those you need to query the system catalogs or other PostgreSQL -specific views. Note When querying the database for constraint information, it is possible for a standard-compliant query that expects to return one row to return several. This is because the SQL standard requires constraint names to be unique within a schema, but PostgreSQL does not enforce this restriction. PostgreSQL automatically-generated constraint names avoid duplicates in the same schema, but users can specify such duplicate names. This problem can appear when querying information schema views such as check_constraint_routine_usage , check_constraints , domain_constraints , and referential_constraints . Some other views have similar issues but contain the table name to help distinguish duplicate rows, e.g., constraint_column_usage , constraint_table_usage , table_constraints ."
https://www.postgresql.org/docs/15/installation.html,Chapter 17. Installation from Source Code,"This chapter describes the installation of PostgreSQL using the source code distribution. If you are installing a pre-packaged distribution, such as an RPM or Debian package, ignore this chapter and see Chapter 16 instead. If you are building PostgreSQL for Microsoft Windows, read this chapter if you intend to build with MinGW or Cygwin; but if you intend to build with Microsoft's Visual C++ , see Chapter 18 instead."
https://www.postgresql.org/docs/15/external-projects.html,Appendix H. External Projects,"PostgreSQL is a complex software project, and managing the project is difficult. We have found that many enhancements to PostgreSQL can be more efficiently developed separately from the core project."
https://www.postgresql.org/docs/15/intro-whatis.html,1.  What IsPostgreSQL?,"PostgreSQL is an object-relational database management system ( ORDBMS ) based on POSTGRES, Version 4.2 , developed at the University of California at Berkeley Computer Science Department. POSTGRES pioneered many concepts that only became available in some commercial database systems much later. PostgreSQL is an open-source descendant of this original Berkeley code. It supports a large part of the SQL standard and offers many modern features: complex queries foreign keys triggers updatable views transactional integrity multiversion concurrency control Also, PostgreSQL can be extended by the user in many ways, for example by adding new data types functions operators aggregate functions index methods procedural languages And because of the liberal license, PostgreSQL can be used, modified, and distributed by anyone free of charge for any purpose, be it private, commercial, or academic."
https://www.postgresql.org/docs/15/limits.html,Appendix K.PostgreSQLLimits,"Table K.1 describes various hard limits of PostgreSQL . However, practical limits, such as performance limitations or available disk space may apply before absolute hard limits are reached. Table K.1. PostgreSQL Limitations Item Upper Limit Comment database size unlimited number of databases 4,294,950,911 relations per database 1,431,650,303 relation size 32 TB with the default BLCKSZ of 8192 bytes rows per table limited by the number of tuples that can fit onto 4,294,967,295 pages columns per table 1,600 further limited by tuple size fitting on a single page; see note below columns in a result set 1,664 field size 1 GB indexes per table unlimited constrained by maximum relations per database columns per index 32 can be increased by recompiling PostgreSQL partition keys 32 can be increased by recompiling PostgreSQL identifier length 63 bytes can be increased by recompiling PostgreSQL function arguments 100 can be increased by recompiling PostgreSQL query parameters 65,535 The maximum number of columns for a table is further reduced as the tuple being stored must fit in a single 8192-byte heap page. For example, excluding the tuple header, a tuple made up of 1,600 int columns would consume 6400 bytes and could be stored in a heap page, but a tuple of 1,600 bigint columns would consume 12800 bytes and would therefore not fit inside a heap page. Variable-length fields of types such as text , varchar , and char can have their values stored out of line in the table's TOAST table when the values are large enough to require it. Only an 18-byte pointer must remain inside the tuple in the table's heap. For shorter length variable-length fields, either a 4-byte or 1-byte field header is used and the value is stored inside the heap tuple. Columns that have been dropped from the table also contribute to the maximum column limit. Moreover, although the dropped column values for newly created tuples are internally marked as null in the tuple's null bitmap, the null bitmap also occupies space. Each table can store a theoretical maximum of 2^32 out-of-line values; see Section 73.2 for a detailed discussion of out-of-line storage. This limit arises from the use of a 32-bit OID to identify each such value. The practical limit is significantly less than the theoretical limit, because as the OID space fills up, finding an OID that is still free can become expensive, in turn slowing down INSERT/UPDATE statements. Typically, this is only an issue for tables containing many terabytes of data; partitioning is a possible workaround."
https://www.postgresql.org/docs/15/sql.html,No Title,"Part II. The SQL Language This part describes the use of the SQL language in PostgreSQL . We start with describing the general syntax of SQL , then explain how to create the structures to hold data, how to populate the database, and how to query it. The middle part lists the available data types and functions for use in SQL commands. The rest treats several aspects that are important for tuning a database for optimal performance. The information in this part is arranged so that a novice user can follow it start to end to gain a full understanding of the topics without having to refer forward too many times. The chapters are intended to be self-contained, so that advanced users can read the chapters individually as they choose. The information in this part is presented in a narrative fashion in topical units. Readers looking for a complete description of a particular command should see Part VI . Readers of this part should know how to connect to a PostgreSQL database and issue SQL commands. Readers that are unfamiliar with these issues are encouraged to read Part I first. SQL commands are typically entered using the PostgreSQL interactive terminal psql , but other programs that have similar functionality can be used as well."
